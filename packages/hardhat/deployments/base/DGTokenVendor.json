{
  "address": "0x24DD71aDd0026E924e0Fc7a7701A851e2b9c09C4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialExchangeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stewardCouncilAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AppChangeCooldownStillActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DailySellLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsMaxWhitelistedCollections",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCooldownActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFuelForUpgrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPointsForUpgrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBurnAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCooldown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDailyLimitMultiplier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDevAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExchangeRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeBPS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFuelRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPointsAwarded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQualifyingBuyThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUpgradeFuelThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUpgradePointsThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxStageReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumAmountNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoValidKeyForUserFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RateCooldownActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StageCooldownActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StageSellLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WhitelistedCollectionsAlreadyInitialized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDevAddress",
          "type": "address"
        }
      ],
      "name": "DevAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "ExchangeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rateChangeCooldown",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "appChangeCooldown",
          "type": "uint256"
        }
      ],
      "name": "FeeConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBuyFeeBPS",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSellFeeBPS",
          "type": "uint256"
        }
      ],
      "name": "FeeRatesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapTokenFees",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFuel",
          "type": "uint256"
        }
      ],
      "name": "Lit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IDGTokenVendor.UserStage",
          "name": "stage",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "burnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradePointsThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradeFuelThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuelRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pointsAwarded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qualifyingBuyThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSellBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyLimitMultiplier",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IDGTokenVendor.StageConfig",
          "name": "oldConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "burnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradePointsThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradeFuelThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuelRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pointsAwarded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qualifyingBuyThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSellBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyLimitMultiplier",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IDGTokenVendor.StageConfig",
          "name": "newConfig",
          "type": "tuple"
        }
      ],
      "name": "StageConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "parameter",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "StageConstantsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IDGTokenVendor.UserStage",
          "name": "newStage",
          "type": "uint8"
        }
      ],
      "name": "StageUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newStewardCouncilAddress",
          "type": "address"
        }
      ],
      "name": "StewardCouncilAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "TokensSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        }
      ],
      "name": "WhitelistedCollectionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        }
      ],
      "name": "WhitelistedCollectionRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DAILY_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FUEL_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FUEL_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_POINTS_AWARDED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SELL_BPS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WHITELISTED_COLLECTIONS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canChangeExchangeRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canChangeFeeRates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxFeeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minFeeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyFeeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellFeeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rateChangeCooldown",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "appChangeCooldown",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.FeeConfig",
          "name": "_feeConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFirstValidCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IDGTokenVendor.UserStage",
          "name": "_stage",
          "type": "uint8"
        }
      ],
      "name": "getStageConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "burnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradePointsThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradeFuelThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuelRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pointsAwarded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qualifyingBuyThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSellBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyLimitMultiplier",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.StageConfig",
          "name": "_stageConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStageConstants",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxSellCooldown",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBuyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSellAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.StageConstants",
          "name": "_stageConstants",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSystemState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseTokenFees",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapTokenFees",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRateChangeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastFeeChangeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "devAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stewardCouncil",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastDevAddressChangeTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.SystemState",
          "name": "_systemState",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "baseToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "swapToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.TokenConfig",
          "name": "_tokenConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum IDGTokenVendor.UserStage",
              "name": "stage",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "points",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuel",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastStage3MaxSale",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailySoldAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyWindowStart",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.UserState",
          "name": "_userState",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelistedCollections",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasValidKey",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collections",
          "type": "address[]"
        }
      ],
      "name": "initializeWhitelistedCollections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lightUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rateChangeCooldown",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_appChangeCooldown",
          "type": "uint256"
        }
      ],
      "name": "setCooldownConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDevAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "setExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBuyFeeBPS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSellFeeBPS",
          "type": "uint256"
        }
      ],
      "name": "setFeeRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IDGTokenVendor.UserStage",
          "name": "_stage",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "burnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradePointsThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradeFuelThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuelRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pointsAwarded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qualifyingBuyThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSellBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyLimitMultiplier",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.StageConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setStageConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCouncilAddress",
          "type": "address"
        }
      ],
      "name": "setStewardCouncilAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc54ceef2826e3f5bad616e213916781dc62f0bbb4220f373be0f7b0b4b898247",
  "receipt": {
    "to": null,
    "from": "0x19F6020e9a4330a0DDCd1B6f0e7B03f7Df7D18E5",
    "contractAddress": "0x24DD71aDd0026E924e0Fc7a7701A851e2b9c09C4",
    "transactionIndex": 187,
    "gasUsed": "3319538",
    "logsBloom": "0x
    "blockHash": "0x42089476406d0ffe7c3d6498c89b4a6f2a4758102961cb829a85627db7c67697",
    "transactionHash": "0xc54ceef2826e3f5bad616e213916781dc62f0bbb4220f373be0f7b0b4b898247",
    "logs": [
      {
        "transactionIndex": 187,
        "blockNumber": 30004995,
        "transactionHash": "0xc54ceef2826e3f5bad616e213916781dc62f0bbb4220f373be0f7b0b4b898247",
        "address": "0x24DD71aDd0026E924e0Fc7a7701A851e2b9c09C4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000019f6020e9a4330a0ddcd1b6f0e7b03f7df7d18e5"
        ],
        "data": "0x",
        "logIndex": 599,
        "blockHash": "0x42089476406d0ffe7c3d6498c89b4a6f2a4758102961cb829a85627db7c67697"
      }
    ],
    "blockNumber": 30004995,
    "cumulativeGasUsed": "56425625",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaC27fa800955849d6D17cC8952Ba9dD6EAA66187",
    "0x4aA47eD29959c7053996d8f7918db01A62D02ee5",
    10,
    "0xE11Cd5244DE68D90755a1d142Ab446A4D17cDC10",
    "0x167e7497191346211dBC6e9f64c9A736eC84C689"
  ],
  "numDeployments": 2,
  "solcInputHash": "b2a3f391f7be7256493aa38cded65508",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stewardCouncilAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AppChangeCooldownStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DailySellLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxWhitelistedCollections\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCooldownActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFuelForUpgrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPointsForUpgrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurnAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCooldown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDailyLimitMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDevAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExchangeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeBPS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFuelRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPointsAwarded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQualifyingBuyThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUpgradeFuelThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUpgradePointsThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxStageReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumAmountNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoValidKeyForUserFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateCooldownActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageCooldownActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageSellLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhitelistedCollectionsAlreadyInitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"DevAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateChangeCooldown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appChangeCooldown\",\"type\":\"uint256\"}],\"name\":\"FeeConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyFeeBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellFeeBPS\",\"type\":\"uint256\"}],\"name\":\"FeeRatesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokenFees\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFuel\",\"type\":\"uint256\"}],\"name\":\"Lit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IDGTokenVendor.UserStage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradePointsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeFuelThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuelRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsAwarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyingBuyThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimitMultiplier\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDGTokenVendor.StageConfig\",\"name\":\"oldConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradePointsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeFuelThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuelRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsAwarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyingBuyThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimitMultiplier\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDGTokenVendor.StageConfig\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"StageConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"parameter\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StageConstantsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IDGTokenVendor.UserStage\",\"name\":\"newStage\",\"type\":\"uint8\"}],\"name\":\"StageUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newStewardCouncilAddress\",\"type\":\"address\"}],\"name\":\"StewardCouncilAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"WhitelistedCollectionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"WhitelistedCollectionRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DAILY_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FUEL_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FUEL_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_POINTS_AWARDED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SELL_BPS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WHITELISTED_COLLECTIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canChangeExchangeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canChangeFeeRates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateChangeCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appChangeCooldown\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.FeeConfig\",\"name\":\"_feeConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFirstValidCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IDGTokenVendor.UserStage\",\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"getStageConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradePointsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeFuelThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuelRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsAwarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyingBuyThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimitMultiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.StageConfig\",\"name\":\"_stageConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStageConstants\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxSellCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSellAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.StageConstants\",\"name\":\"_stageConstants\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseTokenFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTokenFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRateChangeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastFeeChangeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stewardCouncil\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastDevAddressChangeTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.SystemState\",\"name\":\"_systemState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.TokenConfig\",\"name\":\"_tokenConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserState\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IDGTokenVendor.UserStage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStage3MaxSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailySoldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyWindowStart\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.UserState\",\"name\":\"_userState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedCollections\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasValidKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"}],\"name\":\"initializeWhitelistedCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lightUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateChangeCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_appChangeCooldown\",\"type\":\"uint256\"}],\"name\":\"setCooldownConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFeeBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellFeeBPS\",\"type\":\"uint256\"}],\"name\":\"setFeeRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IDGTokenVendor.UserStage\",\"name\":\"_stage\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradePointsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeFuelThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuelRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsAwarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyingBuyThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimitMultiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.StageConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setStageConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCouncilAddress\",\"type\":\"address\"}],\"name\":\"setStewardCouncilAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"DevAddressUpdated(address)\":{\"params\":{\"newDevAddress\":\"The new developer address\"}},\"ETHWithdrawn(address,uint256)\":{\"params\":{\"amount\":\"Amount of ETH withdrawn\",\"to\":\"Address receiving the ETH\"}},\"ExchangeRateUpdated(uint256)\":{\"params\":{\"newRate\":\"New exchange rate\"}},\"FeeConfigUpdated(uint256,uint256)\":{\"params\":{\"appChangeCooldown\":\"New app change cooldown\",\"rateChangeCooldown\":\"New rate change cooldown\"}},\"FeeRatesUpdated(uint256,uint256)\":{\"params\":{\"newBuyFeeBPS\":\"New buy fee rate in basis points\",\"newSellFeeBPS\":\"New sell fee rate in basis points\"}},\"FeesWithdrawn(address,uint256,uint256)\":{\"params\":{\"baseTokenFees\":\"Amount of base token fees withdrawn\",\"swapTokenFees\":\"Amount of swap token fees withdrawn\",\"to\":\"Address receiving the fees\"}},\"Lit(address,uint256,uint256)\":{\"params\":{\"burnAmount\":\"Amount of tokens burned\",\"newFuel\":\"New fuel level\",\"user\":\"User address\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"StageConfigUpdated(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"newConfig\":\"New configuration\",\"oldConfig\":\"Previous configuration\",\"stage\":\"The stage being updated\"}},\"StageConstantsUpdated(string,uint256)\":{\"params\":{\"parameter\":\"The name of the updated parameter\",\"value\":\"The new value\"}},\"StageUpgraded(address,uint8)\":{\"params\":{\"newStage\":\"New stage of the user\",\"user\":\"User address\"}},\"StewardCouncilAddressUpdated(address)\":{\"params\":{\"newStewardCouncilAddress\":\"The new steward council address\"}},\"TokensPurchased(address,uint256,uint256,uint256)\":{\"params\":{\"baseTokenAmount\":\"Amount of base tokens used\",\"buyer\":\"Address of the buyer\",\"fee\":\"Fee taken in base tokens\",\"swapTokenAmount\":\"Amount of swap tokens received\"}},\"TokensSold(address,uint256,uint256,uint256)\":{\"params\":{\"baseTokenAmount\":\"Amount of base tokens received\",\"fee\":\"Fee taken in swap tokens\",\"seller\":\"Address of the seller\",\"swapTokenAmount\":\"Amount of swap tokens sold\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"WhitelistedCollectionAdded(address)\":{\"params\":{\"collectionAddress\":\"Address of the added collection\"}},\"WhitelistedCollectionRemoved(address)\":{\"params\":{\"collectionAddress\":\"Address of the removed collection\"}}},\"kind\":\"dev\",\"methods\":{\"buyTokens(uint256)\":{\"params\":{\"amount\":\"Amount of base token to use for purchase\"}},\"canChangeExchangeRate()\":{\"returns\":{\"_0\":\"bool Whether exchange rate can be changed\"}},\"canChangeFeeRates()\":{\"returns\":{\"_0\":\"bool Whether fee rates can be changed\"}},\"getExchangeRate()\":{\"returns\":{\"_0\":\"_exchangeRate The exchange rate\"}},\"getFeeConfig()\":{\"returns\":{\"_feeConfig\":\"The fee configuration\"}},\"getFirstValidCollection(address)\":{\"params\":{\"user\":\"Address to check\"},\"returns\":{\"_0\":\"address First valid collection address\"}},\"getStageConfig(uint8)\":{\"params\":{\"_stage\":\"The stage to get configuration for\"},\"returns\":{\"_stageConfig\":\"The stage configuration\"}},\"getStageConstants()\":{\"returns\":{\"_stageConstants\":\"The stage constants\"}},\"getSystemState()\":{\"returns\":{\"_systemState\":\"The system state\"}},\"getTokenConfig()\":{\"returns\":{\"_tokenConfig\":\"The token configuration\"}},\"getUserState(address)\":{\"params\":{\"user\":\"The user address\"},\"returns\":{\"_userState\":\"The user state\"}},\"getWhitelistedCollections()\":{\"returns\":{\"_0\":\"address[] Array of whitelisted collection addresses\"}},\"hasValidKey(address)\":{\"params\":{\"user\":\"Address to check\"},\"returns\":{\"_0\":\"bool Whether user has a valid key\"}},\"initializeWhitelistedCollections(address[])\":{\"params\":{\"collections\":\"Array of collection addresses to whitelist\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sellTokens(uint256)\":{\"params\":{\"amount\":\"Amount of swap token to sell\"}},\"setCooldownConfig(uint256,uint256)\":{\"params\":{\"_appChangeCooldown\":\"Cooldown for changing app settings\",\"_rateChangeCooldown\":\"Cooldown for changing exchange rate\"}},\"setDevAddress(address)\":{\"params\":{\"newDevAddress\":\"New developer address\"}},\"setExchangeRate(uint256)\":{\"params\":{\"newRate\":\"New exchange rate\"}},\"setFeeRates(uint256,uint256)\":{\"params\":{\"newBuyFeeBPS\":\"New buy fee in basis points\",\"newSellFeeBPS\":\"New sell fee in basis points\"}},\"setStageConfig(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"_config\":\"New configuration for the stage\",\"_stage\":\"The stage to update\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawETH()\":{\"details\":\"Withdraw ETH from the contract (only admin)\"}},\"version\":1},\"userdoc\":{\"events\":{\"DevAddressUpdated(address)\":{\"notice\":\"Emitted when the developer address is updated\"},\"ETHWithdrawn(address,uint256)\":{\"notice\":\"Emitted when ETH is withdrawn\"},\"ExchangeRateUpdated(uint256)\":{\"notice\":\"Emitted when exchange rate is updated\"},\"FeeConfigUpdated(uint256,uint256)\":{\"notice\":\"Emitted when fee configuration cooldowns are updated\"},\"FeeRatesUpdated(uint256,uint256)\":{\"notice\":\"Emitted when fee rates are updated\"},\"FeesWithdrawn(address,uint256,uint256)\":{\"notice\":\"Emitted when fees are withdrawn\"},\"Lit(address,uint256,uint256)\":{\"notice\":\"Emitted when a user uses the light up feature\"},\"StageConfigUpdated(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Emitted when stage configuration is updated\"},\"StageConstantsUpdated(string,uint256)\":{\"notice\":\"Emitted when stage constants are updated\"},\"StageUpgraded(address,uint8)\":{\"notice\":\"Emitted when a user upgrades to a new stage\"},\"StewardCouncilAddressUpdated(address)\":{\"notice\":\"Emitted when the steward council address is updated\"},\"TokensPurchased(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when tokens are purchased\"},\"TokensSold(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when tokens are sold\"},\"WhitelistedCollectionAdded(address)\":{\"notice\":\"Emitted when a collection is added to whitelist\"},\"WhitelistedCollectionRemoved(address)\":{\"notice\":\"Emitted when a collection is removed from whitelist\"}},\"kind\":\"user\",\"methods\":{\"buyTokens(uint256)\":{\"notice\":\"Buy tokens using base token\"},\"canChangeExchangeRate()\":{\"notice\":\"Check if exchange rate can be changed\"},\"canChangeFeeRates()\":{\"notice\":\"Check if fee rates can be changed\"},\"getExchangeRate()\":{\"notice\":\"Get exchange rate\"},\"getFeeConfig()\":{\"notice\":\"Get fee configuration\"},\"getFirstValidCollection(address)\":{\"notice\":\"Get the whitelisted collection for the first valid key a user has\"},\"getStageConfig(uint8)\":{\"notice\":\"Get stage configuration\"},\"getStageConstants()\":{\"notice\":\"Get stage constants\"},\"getSystemState()\":{\"notice\":\"Get system state\"},\"getTokenConfig()\":{\"notice\":\"Get token configuration\"},\"getUserState(address)\":{\"notice\":\"Get user state\"},\"getWhitelistedCollections()\":{\"notice\":\"Get all whitelisted collections\"},\"hasValidKey(address)\":{\"notice\":\"Check if user has a valid NFT key\"},\"initializeWhitelistedCollections(address[])\":{\"notice\":\"Initialize the whitelisted collections \"},\"lightUp()\":{\"notice\":\"Increase user's fuel by burning tokens\"},\"sellTokens(uint256)\":{\"notice\":\"Sell tokens to receive base token\"},\"setCooldownConfig(uint256,uint256)\":{\"notice\":\"Updates the fee configuration\"},\"setDevAddress(address)\":{\"notice\":\"Set new developer address\"},\"setExchangeRate(uint256)\":{\"notice\":\"Set new exchange rate\"},\"setFeeRates(uint256,uint256)\":{\"notice\":\"Set new fee rates\"},\"setStageConfig(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Update stage configuration\"},\"upgradeStage()\":{\"notice\":\"Upgrade user to next stage when requirements are met\"},\"withdrawFees()\":{\"notice\":\"Withdraw accumulated fees\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DGTokenVendor.sol\":\"DGTokenVendor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/DGTokenVendor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n/**\\r\\n * @title DGTokenVendor\\r\\n * @author Danny Thomx\\r\\n * @notice A token vendor implementation for trading, burning and account progression\\r\\n * @dev This contract implements a token exchange system with additional features such as\\r\\n * user stages, points system, fuel system, and NFT-based access control\\r\\n\\r\\n * @custom:disclaimer This smart contract is provided for EDUCATIONAL and INFORMATIONAL purposes ONLY.\\r\\n * The author makes no warranties or representations, express or implied, regarding the security,\\r\\n * accuracy, or fitness for any particular purpose of this code. While efforts have been made to\\r\\n * ensure the contract's quality, NO GUARANTEE is provided about its security or functionality.\\r\\n *\\r\\n * Users must conduct their own thorough review, testing, and security audits before any implementation\\r\\n * in a production environment. For commercial applications, professional code audits by reputable\\r\\n * security firms are strongly recommended. The author shall not be held liable for any damages or\\r\\n * consequences resulting from the use of this contract.\\r\\n */\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"./interfaces/IDGTokenVendor.sol\\\";\\r\\n\\r\\nerror AppChangeCooldownStillActive();\\r\\nerror CollectionAddressNotFound();\\r\\nerror CollectionAlreadyAdded();\\r\\nerror DailySellLimitExceeded();\\r\\nerror ExceedsMaxWhitelistedCollections();\\r\\nerror ETHTransferFailed();\\r\\nerror FeeCooldownActive();\\r\\nerror InsufficientPointsForUpgrade();\\r\\nerror InsufficientFuelForUpgrade();\\r\\nerror InvalidFeeBPS();\\r\\nerror InvalidDevAddress();\\r\\nerror InvalidExchangeRate();\\r\\nerror InsufficientBalance();\\r\\nerror InvalidFuelRate();\\r\\nerror InvalidPointsAwarded();\\r\\nerror InvalidDailyLimitMultiplier();\\r\\nerror InvalidBurnAmount();\\r\\nerror InvalidUpgradePointsThreshold();\\r\\nerror InvalidUpgradeFuelThreshold();\\r\\nerror InvalidQualifyingBuyThreshold();\\r\\nerror InvalidCooldown();\\r\\nerror MinimumAmountNotMet();\\r\\nerror MaxStageReached();\\r\\nerror NoValidKeyForUserFound();\\r\\nerror RateCooldownActive();\\r\\nerror StageSellLimitExceeded();\\r\\nerror StageCooldownActive();\\r\\nerror UnauthorizedCaller();\\r\\nerror WhitelistedCollectionsAlreadyInitialized();\\r\\n\\r\\ninterface IPublicLock {\\r\\n    function getHasValidKey(address _user) external view returns (bool);\\r\\n\\r\\n    function tokenOfOwnerByIndex(address _user, uint256 _index) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract DGTokenVendor is Ownable, ReentrancyGuard, Pausable, IDGTokenVendor {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Core Constants\\r\\n    uint256 public constant MAX_WHITELISTED_COLLECTIONS = 10;\\r\\n    uint256 public constant BASIS_POINTS = 10000;\\r\\n    uint256 public constant MAX_DAILY_MULTIPLIER = 100;\\r\\n    uint256 public constant MAX_FUEL_LIMIT = 100;\\r\\n    uint256 public constant MAX_FUEL_RATE = 5;\\r\\n    uint256 public constant MAX_POINTS_AWARDED = 5;\\r\\n    uint256 public constant MAX_SELL_BPS_LIMIT = 7000;\\r\\n    address public constant BURN_ADDRESS = 0x2Ef7DeC913e4127Fd0f94B32eeAd23ee63143598;\\r\\n\\r\\n    // State Variables\\r\\n    StageConstants stageConstants;\\r\\n    FeeConfig feeConfig;\\r\\n    TokenConfig tokenConfig;\\r\\n    SystemState systemState;\\r\\n    address[] private whitelistedCollections;\\r\\n\\r\\n    mapping(address => UserState) userStates;\\r\\n    mapping(UserStage => StageConfig) stageConfig;\\r\\n\\r\\n    modifier onlyNFTHolder() {\\r\\n        if (!hasValidKey(msg.sender)) revert NoValidKeyForUserFound();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        if (!(msg.sender == owner() || msg.sender == systemState.devAddress)) revert UnauthorizedCaller();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDev() {\\r\\n        if (msg.sender != systemState.devAddress) revert UnauthorizedCaller();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        if (!(msg.sender == owner() || msg.sender == systemState.stewardCouncil)) revert UnauthorizedCaller();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _baseToken,\\r\\n        address _swapToken,\\r\\n        uint256 _initialExchangeRate,\\r\\n        address _devAddress,\\r\\n        address _stewardCouncilAddress\\r\\n    ) Ownable(msg.sender) {\\r\\n        if (_initialExchangeRate == 0) revert InvalidExchangeRate();\\r\\n        _initialize(_baseToken, _swapToken, _initialExchangeRate, _devAddress, _stewardCouncilAddress);\\r\\n    }\\r\\n\\r\\n    function pause() public onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function buyTokens(uint256 amount) external nonReentrant onlyNFTHolder whenNotPaused {\\r\\n        if (amount < stageConstants.minBuyAmount) revert MinimumAmountNotMet();\\r\\n        if (tokenConfig.baseToken.balanceOf(msg.sender) < amount) revert InsufficientBalance();\\r\\n        uint256 fee = (amount * feeConfig.buyFeeBps) / BASIS_POINTS;\\r\\n        uint256 tokenToBuyAmount = (amount - fee) * tokenConfig.exchangeRate;\\r\\n\\r\\n        systemState.baseTokenFees += fee;\\r\\n        // Update user points\\r\\n        UserState storage user = userStates[msg.sender];\\r\\n        StageConfig memory config = stageConfig[user.stage];\\r\\n\\r\\n        // Award points if threshold met\\r\\n        if (amount >= config.qualifyingBuyThreshold) {\\r\\n            user.points += config.pointsAwarded;\\r\\n        }\\r\\n\\r\\n        tokenConfig.baseToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        tokenConfig.swapToken.safeTransfer(msg.sender, tokenToBuyAmount);\\r\\n\\r\\n        emit TokensPurchased(msg.sender, amount, tokenToBuyAmount, fee);\\r\\n    }\\r\\n\\r\\n    function sellTokens(uint256 amount) external nonReentrant onlyNFTHolder whenNotPaused {\\r\\n        if (amount < stageConstants.minSellAmount) revert MinimumAmountNotMet();\\r\\n\\r\\n        // Calculate token conversion and fees\\r\\n        uint256 fee = (amount * feeConfig.sellFeeBps) / BASIS_POINTS;\\r\\n        uint256 tokensAmountAfterFee = amount - fee;\\r\\n        uint256 tokensToTransferAmount = tokensAmountAfterFee / tokenConfig.exchangeRate;\\r\\n        if (tokensToTransferAmount == 0) revert MinimumAmountNotMet();\\r\\n\\r\\n        UserState storage user = userStates[msg.sender];\\r\\n        StageConfig memory config = stageConfig[user.stage];\\r\\n\\r\\n        // Calculate maximum allowed transaction size\\r\\n        uint256 contractBalance = tokenConfig.baseToken.balanceOf(address(this));\\r\\n        uint256 maxTxSell = (contractBalance * config.maxSellBps) / BASIS_POINTS;\\r\\n\\r\\n        // Validate transaction limits\\r\\n        if (tokensToTransferAmount > maxTxSell) revert StageSellLimitExceeded();\\r\\n\\r\\n        // Handle OG stage cooldown for max-sized transactions\\r\\n        if (user.stage == UserStage.OG && tokensToTransferAmount == maxTxSell) {\\r\\n            if (block.timestamp <= user.lastStage3MaxSale + stageConstants.maxSellCooldown) {\\r\\n                revert StageCooldownActive();\\r\\n            }\\r\\n            user.lastStage3MaxSale = block.timestamp;\\r\\n        }\\r\\n\\r\\n        // Update daily tracking window\\r\\n        if (block.timestamp > user.dailyWindowStart + stageConstants.dailyWindow) {\\r\\n            user.dailySoldAmount = 0;\\r\\n            user.dailyWindowStart = block.timestamp;\\r\\n        }\\r\\n\\r\\n        // Calculate and validate daily limit\\r\\n        uint256 dailyLimit = config.qualifyingBuyThreshold * (config.dailyLimitMultiplier + user.fuel);\\r\\n        if (user.dailySoldAmount + amount > dailyLimit) {\\r\\n            revert DailySellLimitExceeded();\\r\\n        }\\r\\n\\r\\n        // Update state variables\\r\\n        user.dailySoldAmount += amount;\\r\\n        user.fuel = 0;\\r\\n        systemState.swapTokenFees += fee;\\r\\n\\r\\n        // Execute token transfers\\r\\n        tokenConfig.swapToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        tokenConfig.baseToken.safeTransfer(msg.sender, tokensToTransferAmount);\\r\\n\\r\\n        emit TokensSold(msg.sender, amount, tokensToTransferAmount, fee);\\r\\n    }\\r\\n\\r\\n    function lightUp() external onlyNFTHolder whenNotPaused nonReentrant {\\r\\n        UserState storage user = userStates[msg.sender];\\r\\n        StageConfig memory config = stageConfig[UserStage(user.stage)];\\r\\n\\r\\n        tokenConfig.baseToken.safeTransferFrom(msg.sender, BURN_ADDRESS, config.burnAmount);\\r\\n\\r\\n        uint256 newFuel = Math.min(user.fuel + config.fuelRate, MAX_FUEL_LIMIT);\\r\\n\\r\\n        if (newFuel > user.fuel) user.fuel = newFuel;\\r\\n        emit Lit(msg.sender, config.burnAmount, newFuel);\\r\\n    }\\r\\n\\r\\n    function upgradeStage() external onlyNFTHolder whenNotPaused nonReentrant {\\r\\n        UserState storage user = userStates[msg.sender];\\r\\n        if (user.stage == UserStage.OG) revert MaxStageReached();\\r\\n        UserStage nextStage = UserStage(uint256(user.stage) + 1);\\r\\n\\r\\n        if (user.points < stageConfig[nextStage].upgradePointsThreshold) revert InsufficientPointsForUpgrade();\\r\\n        if (user.fuel < stageConfig[nextStage].upgradeFuelThreshold) revert InsufficientFuelForUpgrade();\\r\\n\\r\\n        user.stage = nextStage;\\r\\n        user.points = 0;\\r\\n        user.fuel = 0;\\r\\n        emit StageUpgraded(msg.sender, user.stage);\\r\\n    }\\r\\n\\r\\n    function setExchangeRate(uint256 newRate) external onlyOwner {\\r\\n        uint256 maxRate = 1000;\\r\\n        if (block.timestamp < systemState.lastRateChangeTimestamp + feeConfig.rateChangeCooldown)\\r\\n            revert RateCooldownActive();\\r\\n        if (newRate == 0 || newRate > maxRate) revert InvalidExchangeRate();\\r\\n\\r\\n        tokenConfig.exchangeRate = newRate;\\r\\n        systemState.lastRateChangeTimestamp = block.timestamp;\\r\\n        emit ExchangeRateUpdated(newRate);\\r\\n    }\\r\\n\\r\\n    function setFeeRates(uint256 newBuyFeeBPS, uint256 newSellFeeBPS) external onlyOwner {\\r\\n        if (block.timestamp < systemState.lastFeeChangeTimestamp + feeConfig.appChangeCooldown)\\r\\n            revert FeeCooldownActive();\\r\\n        if (newBuyFeeBPS > feeConfig.maxFeeBps || newSellFeeBPS > feeConfig.maxFeeBps) revert InvalidFeeBPS();\\r\\n        if (newBuyFeeBPS < feeConfig.minFeeBps || newSellFeeBPS < feeConfig.minFeeBps) revert InvalidFeeBPS();\\r\\n\\r\\n        feeConfig.buyFeeBps = newBuyFeeBPS;\\r\\n        feeConfig.sellFeeBps = newSellFeeBPS;\\r\\n        systemState.lastFeeChangeTimestamp = block.timestamp;\\r\\n        emit FeeRatesUpdated(newBuyFeeBPS, newSellFeeBPS);\\r\\n    }\\r\\n\\r\\n    function setDevAddress(address newDevAddress) external onlyDev {\\r\\n        if (newDevAddress == address(0)) revert InvalidDevAddress();\\r\\n        if (block.timestamp < systemState.lastDevAddressChangeTimestamp + feeConfig.appChangeCooldown)\\r\\n            revert AppChangeCooldownStillActive();\\r\\n        systemState.devAddress = newDevAddress;\\r\\n        systemState.lastDevAddressChangeTimestamp = block.timestamp;\\r\\n        emit DevAddressUpdated(newDevAddress);\\r\\n    }\\r\\n\\r\\n    function setStewardCouncilAddress(address _newCouncilAddress) external onlyOwner {\\r\\n        if (_newCouncilAddress == address(0)) revert InvalidDevAddress();\\r\\n        systemState.stewardCouncil = _newCouncilAddress;\\r\\n        emit StewardCouncilAddressUpdated(_newCouncilAddress);\\r\\n    }\\r\\n\\r\\n    function withdrawFees() external nonReentrant onlyAuthorized whenNotPaused {\\r\\n        address to = systemState.devAddress;\\r\\n        uint256 baseTokenFeesToWithdraw = systemState.baseTokenFees;\\r\\n        uint256 swapTokenFeesToWithdraw = systemState.swapTokenFees;\\r\\n\\r\\n        systemState.baseTokenFees = 0;\\r\\n        systemState.swapTokenFees = 0;\\r\\n\\r\\n        if (baseTokenFeesToWithdraw > 0) {\\r\\n            tokenConfig.baseToken.safeTransfer(to, baseTokenFeesToWithdraw);\\r\\n        }\\r\\n\\r\\n        if (swapTokenFeesToWithdraw > 0) {\\r\\n            tokenConfig.swapToken.safeTransfer(to, swapTokenFeesToWithdraw);\\r\\n        }\\r\\n\\r\\n        emit FeesWithdrawn(to, baseTokenFeesToWithdraw, swapTokenFeesToWithdraw);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw ETH from the contract (only admin)\\r\\n     */\\r\\n    function withdrawETH() external nonReentrant onlyAuthorized whenNotPaused {\\r\\n        address to = systemState.devAddress;\\r\\n        uint256 amount = address(this).balance;\\r\\n        (bool success, ) = to.call{ value: amount }(\\\"\\\");\\r\\n        if (!success) revert ETHTransferFailed();\\r\\n\\r\\n        emit ETHWithdrawn(to, amount);\\r\\n    }\\r\\n\\r\\n    function initializeWhitelistedCollections(address[] calldata collections) external onlyAuthorized {\\r\\n        if (whitelistedCollections.length + collections.length > MAX_WHITELISTED_COLLECTIONS)\\r\\n            revert ExceedsMaxWhitelistedCollections();\\r\\n        if (whitelistedCollections.length > 0) revert WhitelistedCollectionsAlreadyInitialized();\\r\\n\\r\\n        for (uint256 i = 0; i < collections.length; i++) {\\r\\n            if (!_isCollectionWhitelisted(collections[i])) {\\r\\n                whitelistedCollections.push(collections[i]);\\r\\n                emit WhitelistedCollectionAdded(collections[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function canChangeFeeRates() external view returns (bool) {\\r\\n        return block.timestamp >= systemState.lastFeeChangeTimestamp + feeConfig.appChangeCooldown;\\r\\n    }\\r\\n\\r\\n    function canChangeExchangeRate() external view returns (bool) {\\r\\n        return block.timestamp >= systemState.lastRateChangeTimestamp + feeConfig.rateChangeCooldown;\\r\\n    }\\r\\n\\r\\n    function hasValidKey(address user) public view returns (bool) {\\r\\n        if (whitelistedCollections.length == 0) return false;\\r\\n\\r\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\r\\n            if (IPublicLock(whitelistedCollections[i]).getHasValidKey(user)) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getFirstValidCollection(address user) public view returns (address) {\\r\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\r\\n            if (IPublicLock(whitelistedCollections[i]).getHasValidKey(user)) {\\r\\n                return whitelistedCollections[i];\\r\\n            }\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    function getStageConstants() public view returns (StageConstants memory _stageConstants) {\\r\\n        _stageConstants = stageConstants;\\r\\n    }\\r\\n\\r\\n    function getFeeConfig() public view returns (FeeConfig memory _feeConfig) {\\r\\n        _feeConfig = feeConfig;\\r\\n    }\\r\\n\\r\\n    function getTokenConfig() public view returns (TokenConfig memory _tokenConfig) {\\r\\n        _tokenConfig = tokenConfig;\\r\\n    }\\r\\n\\r\\n    function getSystemState() public view returns (SystemState memory _systemState) {\\r\\n        _systemState = systemState;\\r\\n    }\\r\\n\\r\\n    function getUserState(address user) public view returns (UserState memory _userState) {\\r\\n        _userState = userStates[user];\\r\\n    }\\r\\n\\r\\n    function getStageConfig(UserStage _stage) public view returns (StageConfig memory _stageConfig) {\\r\\n        _stageConfig = stageConfig[_stage];\\r\\n    }\\r\\n\\r\\n    function getExchangeRate() external view returns (uint256) {\\r\\n        return tokenConfig.exchangeRate;\\r\\n    }\\r\\n\\r\\n    function getWhitelistedCollections() external view returns (address[] memory) {\\r\\n        return whitelistedCollections;\\r\\n    }\\r\\n\\r\\n    function _isCollectionWhitelisted(address collectionAddress) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\r\\n            if (whitelistedCollections[i] == collectionAddress) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function _findCollectionIndex(address collectionAddress) internal view returns (uint256) {\\r\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\r\\n            if (whitelistedCollections[i] == collectionAddress) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return whitelistedCollections.length;\\r\\n    }\\r\\n\\r\\n    function setStageConfig(UserStage _stage, StageConfig calldata _config) external onlyOwner {\\r\\n        uint256 minSellBps = 100;\\r\\n        uint256 invalidLowerBound = 0;\\r\\n        if (_config.maxSellBps < minSellBps || _config.maxSellBps > MAX_SELL_BPS_LIMIT) revert InvalidFeeBPS();\\r\\n        if (_config.fuelRate == invalidLowerBound || _config.fuelRate > MAX_FUEL_RATE) revert InvalidFuelRate();\\r\\n        if (_config.pointsAwarded == invalidLowerBound || _config.pointsAwarded > MAX_POINTS_AWARDED)\\r\\n            revert InvalidPointsAwarded();\\r\\n        if (_config.dailyLimitMultiplier == invalidLowerBound || _config.dailyLimitMultiplier > MAX_DAILY_MULTIPLIER)\\r\\n            revert InvalidDailyLimitMultiplier();\\r\\n        if (_config.burnAmount == invalidLowerBound) revert InvalidBurnAmount();\\r\\n        if (_config.upgradePointsThreshold == invalidLowerBound) revert InvalidUpgradePointsThreshold();\\r\\n        if (_config.upgradeFuelThreshold == invalidLowerBound) revert InvalidUpgradeFuelThreshold();\\r\\n        if (_config.qualifyingBuyThreshold == invalidLowerBound) revert InvalidQualifyingBuyThreshold();\\r\\n\\r\\n        StageConfig storage storedConfig = stageConfig[_stage];\\r\\n        StageConfig memory oldConfig = storedConfig;\\r\\n\\r\\n        storedConfig.burnAmount = _config.burnAmount;\\r\\n        storedConfig.upgradePointsThreshold = _config.upgradePointsThreshold;\\r\\n        storedConfig.upgradeFuelThreshold = _config.upgradeFuelThreshold;\\r\\n        storedConfig.fuelRate = _config.fuelRate;\\r\\n        storedConfig.pointsAwarded = _config.pointsAwarded;\\r\\n        storedConfig.qualifyingBuyThreshold = _config.qualifyingBuyThreshold;\\r\\n        storedConfig.maxSellBps = _config.maxSellBps;\\r\\n        storedConfig.dailyLimitMultiplier = _config.dailyLimitMultiplier;\\r\\n\\r\\n        emit StageConfigUpdated(_stage, oldConfig, storedConfig);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the fee configuration\\r\\n     * @param _rateChangeCooldown Cooldown for changing exchange rate\\r\\n     * @param _appChangeCooldown Cooldown for changing app settings\\r\\n     */\\r\\n    function setCooldownConfig(uint256 _rateChangeCooldown, uint256 _appChangeCooldown) external onlyOwner {\\r\\n        uint256 minCooldown = 14 days;\\r\\n        uint256 maxCooldown = 180 days;\\r\\n        if (_rateChangeCooldown < minCooldown || _rateChangeCooldown > maxCooldown) revert InvalidCooldown();\\r\\n        if (_appChangeCooldown < minCooldown || _appChangeCooldown > maxCooldown) revert InvalidCooldown();\\r\\n\\r\\n        feeConfig.rateChangeCooldown = _rateChangeCooldown;\\r\\n        feeConfig.appChangeCooldown = _appChangeCooldown;\\r\\n        emit FeeConfigUpdated(_rateChangeCooldown, _appChangeCooldown);\\r\\n    }\\r\\n\\r\\n    function _initialize(\\r\\n        address _baseToken,\\r\\n        address _swapToken,\\r\\n        uint256 _initialExchangeRate,\\r\\n        address _devAddress,\\r\\n        address _stewardCouncilAddress\\r\\n    ) private {\\r\\n        // Initialize token config\\r\\n        tokenConfig = TokenConfig({\\r\\n            baseToken: IERC20(_baseToken),\\r\\n            swapToken: IERC20(_swapToken),\\r\\n            exchangeRate: _initialExchangeRate\\r\\n        });\\r\\n\\r\\n        // Initialize system state\\r\\n        systemState = SystemState({\\r\\n            baseTokenFees: 0,\\r\\n            swapTokenFees: 0,\\r\\n            lastRateChangeTimestamp: block.timestamp,\\r\\n            lastFeeChangeTimestamp: block.timestamp,\\r\\n            devAddress: _devAddress,\\r\\n            stewardCouncil: _stewardCouncilAddress,\\r\\n            lastDevAddressChangeTimestamp: block.timestamp\\r\\n        });\\r\\n\\r\\n        // Initialize fee config\\r\\n        feeConfig = FeeConfig({\\r\\n            maxFeeBps: 1000,\\r\\n            minFeeBps: 10,\\r\\n            buyFeeBps: 100,\\r\\n            sellFeeBps: 200,\\r\\n            rateChangeCooldown: 90 days,\\r\\n            appChangeCooldown: 120 days\\r\\n        });\\r\\n\\r\\n        // Initialize stage constants\\r\\n        stageConstants = StageConstants({\\r\\n            maxSellCooldown: 45 days,\\r\\n            dailyWindow: 24 hours,\\r\\n            minBuyAmount: 1000e18,\\r\\n            minSellAmount: 5000e18\\r\\n        });\\r\\n\\r\\n        // Configure stages\\r\\n        stageConfig[UserStage.PLEB] = StageConfig({\\r\\n            burnAmount: 10e18,\\r\\n            upgradePointsThreshold: 0,\\r\\n            upgradeFuelThreshold: 0,\\r\\n            fuelRate: 1,\\r\\n            pointsAwarded: 1,\\r\\n            qualifyingBuyThreshold: 1000e18,\\r\\n            maxSellBps: 5000,\\r\\n            dailyLimitMultiplier: 100\\r\\n        });\\r\\n\\r\\n        stageConfig[UserStage.HUSTLER] = StageConfig({\\r\\n            burnAmount: 100e18,\\r\\n            upgradePointsThreshold: 50,\\r\\n            upgradeFuelThreshold: 10,\\r\\n            fuelRate: 2,\\r\\n            pointsAwarded: 2,\\r\\n            qualifyingBuyThreshold: 5000e18,\\r\\n            maxSellBps: 6000,\\r\\n            dailyLimitMultiplier: 100\\r\\n        });\\r\\n\\r\\n        stageConfig[UserStage.OG] = StageConfig({\\r\\n            burnAmount: 500e18,\\r\\n            upgradePointsThreshold: 500,\\r\\n            upgradeFuelThreshold: 100,\\r\\n            fuelRate: 5,\\r\\n            pointsAwarded: 5,\\r\\n            qualifyingBuyThreshold: 20000e18,\\r\\n            maxSellBps: 7000,\\r\\n            dailyLimitMultiplier: 100\\r\\n        });\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x59dbf3385d8b8e0539e15e4584ee66e31bafa805bb692e4c1f620b1e39466ad8\",\"license\":\"MIT\"},\"contracts/interfaces/IDGTokenVendor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IDGTokenVendor\\r\\n * @author Danny Thomx\\r\\n * @notice Interface for the DGTokenVendor V2 contract\\r\\n * @dev Contains all external and public functions of the DGTokenVendor contract\\r\\n */\\r\\ninterface IDGTokenVendor {\\r\\n    /* ========== ENUMS & STRUCTS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice User progression stages\\r\\n     */\\r\\n    enum UserStage {\\r\\n        PLEB, // Entry level\\r\\n        HUSTLER, // Mid level\\r\\n        OG // Top level\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Configuration for each user stage\\r\\n     * @param burnAmount Amount of tokens burned for \\\"light up\\\" feature\\r\\n     * @param upgradePointsThreshold Points needed for upgrading to next stage\\r\\n     * @param upgradeFuelThreshold Fuel threshold for upgrade\\r\\n     * @param fuelRate Rate at which fuel increases\\r\\n     * @param pointsAwarded Points awarded for qualifying buy\\r\\n     * @param qualifyingBuyThreshold Minimum buy amount to earn points at this stage\\r\\n     * @param maxSellBps Maximum percentage of contract balance that can be sold in one tx\\r\\n     * @param dailyLimitMultiplier Multiplier for daily sell limit\\r\\n     */\\r\\n    struct StageConfig {\\r\\n        uint256 burnAmount;\\r\\n        uint256 upgradePointsThreshold;\\r\\n        uint256 upgradeFuelThreshold;\\r\\n        uint256 fuelRate;\\r\\n        uint256 pointsAwarded;\\r\\n        uint256 qualifyingBuyThreshold;\\r\\n        uint256 maxSellBps;\\r\\n        uint256 dailyLimitMultiplier;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constants for stage system timing and minimum amounts\\r\\n     * @param maxSellCooldown Cooldown period before another maxSell txn can be made\\r\\n     * @param dailyWindow Time window for daily limits\\r\\n     * @param minBuyAmount Minimum amount for buying tokens\\r\\n     * @param minSellAmount Minimum amount for selling tokens\\r\\n     */\\r\\n    struct StageConstants {\\r\\n        uint256 maxSellCooldown;\\r\\n        uint256 dailyWindow;\\r\\n        uint256 minBuyAmount;\\r\\n        uint256 minSellAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Individual user state\\r\\n     * @param stage Current user stage\\r\\n     * @param points Points earned toward next stage\\r\\n     * @param fuel Current fuel level\\r\\n     * @param lastStage3MaxSale Timestamp of last maximum stage 3 sale\\r\\n     * @param dailySoldAmount Amount sold in current daily window\\r\\n     * @param dailyWindowStart Start timestamp of current daily window\\r\\n     */\\r\\n    struct UserState {\\r\\n        UserStage stage;\\r\\n        uint256 points;\\r\\n        uint256 fuel;\\r\\n        uint256 lastStage3MaxSale;\\r\\n        uint256 dailySoldAmount;\\r\\n        uint256 dailyWindowStart;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fee configuration\\r\\n     * @param maxFeeBps Maximum fee in basis points\\r\\n     * @param minFeeBps Minimum fee in basis points\\r\\n     * @param buyFeeBps Fee for buying tokens in basis points\\r\\n     * @param sellFeeBps Fee for selling tokens in basis points\\r\\n     * @param rateChangeCooldown Cooldown for changing exchange rate\\r\\n     * @param appChangeCooldown Cooldown for changing app settings\\r\\n     */\\r\\n    struct FeeConfig {\\r\\n        uint256 maxFeeBps;\\r\\n        uint256 minFeeBps;\\r\\n        uint256 buyFeeBps;\\r\\n        uint256 sellFeeBps;\\r\\n        uint256 rateChangeCooldown;\\r\\n        uint256 appChangeCooldown;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Token configuration\\r\\n     * @param baseToken The base token contract\\r\\n     * @param swapToken The swap token contract\\r\\n     * @param exchangeRate Exchange rate between tokens\\r\\n     */\\r\\n    struct TokenConfig {\\r\\n        IERC20 baseToken;\\r\\n        IERC20 swapToken;\\r\\n        uint256 exchangeRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice System state variables\\r\\n     * @param baseTokenFees Accumulated fees in base token\\r\\n     * @param swapTokenFees Accumulated fees in swap token\\r\\n     * @param lastRateChangeTimestamp Last time exchange rate was changed\\r\\n     * @param lastFeeChangeTimestamp Last time fees were changed\\r\\n     * @param devAddress Developer address for fee withdrawal\\r\\n     * @param stewardCouncil Multisig address for emergency action\\r\\n     * @param lastDevAddressChangeTimestamp Last time dev address was changed\\r\\n     */\\r\\n    struct SystemState {\\r\\n        uint256 baseTokenFees;\\r\\n        uint256 swapTokenFees;\\r\\n        uint256 lastRateChangeTimestamp;\\r\\n        uint256 lastFeeChangeTimestamp;\\r\\n        address devAddress;\\r\\n        address stewardCouncil;\\r\\n        uint256 lastDevAddressChangeTimestamp;\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when tokens are purchased\\r\\n     * @param buyer Address of the buyer\\r\\n     * @param baseTokenAmount Amount of base tokens used\\r\\n     * @param swapTokenAmount Amount of swap tokens received\\r\\n     * @param fee Fee taken in base tokens\\r\\n     */\\r\\n    event TokensPurchased(address indexed buyer, uint256 baseTokenAmount, uint256 swapTokenAmount, uint256 fee);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when tokens are sold\\r\\n     * @param seller Address of the seller\\r\\n     * @param swapTokenAmount Amount of swap tokens sold\\r\\n     * @param baseTokenAmount Amount of base tokens received\\r\\n     * @param fee Fee taken in swap tokens\\r\\n     */\\r\\n    event TokensSold(address indexed seller, uint256 swapTokenAmount, uint256 baseTokenAmount, uint256 fee);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a collection is added to whitelist\\r\\n     * @param collectionAddress Address of the added collection\\r\\n     */\\r\\n    event WhitelistedCollectionAdded(address indexed collectionAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a collection is removed from whitelist\\r\\n     * @param collectionAddress Address of the removed collection\\r\\n     */\\r\\n    event WhitelistedCollectionRemoved(address indexed collectionAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when exchange rate is updated\\r\\n     * @param newRate New exchange rate\\r\\n     */\\r\\n    event ExchangeRateUpdated(uint256 newRate);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the developer address is updated\\r\\n     * @param newDevAddress The new developer address\\r\\n     */\\r\\n    event DevAddressUpdated(address indexed newDevAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the steward council address is updated\\r\\n     * @param newStewardCouncilAddress The new steward council address\\r\\n     */\\r\\n    event StewardCouncilAddressUpdated(address indexed newStewardCouncilAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when fees are withdrawn\\r\\n     * @param to Address receiving the fees\\r\\n     * @param baseTokenFees Amount of base token fees withdrawn\\r\\n     * @param swapTokenFees Amount of swap token fees withdrawn\\r\\n     */\\r\\n    event FeesWithdrawn(address indexed to, uint256 baseTokenFees, uint256 swapTokenFees);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when ETH is withdrawn\\r\\n     * @param to Address receiving the ETH\\r\\n     * @param amount Amount of ETH withdrawn\\r\\n     */\\r\\n    event ETHWithdrawn(address indexed to, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when fee rates are updated\\r\\n     * @param newBuyFeeBPS New buy fee rate in basis points\\r\\n     * @param newSellFeeBPS New sell fee rate in basis points\\r\\n     */\\r\\n    event FeeRatesUpdated(uint256 newBuyFeeBPS, uint256 newSellFeeBPS);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a user upgrades to a new stage\\r\\n     * @param user User address\\r\\n     * @param newStage New stage of the user\\r\\n     */\\r\\n    event StageUpgraded(address indexed user, UserStage newStage);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a user uses the light up feature\\r\\n     * @param user User address\\r\\n     * @param burnAmount Amount of tokens burned\\r\\n     * @param newFuel New fuel level\\r\\n     */\\r\\n    event Lit(address indexed user, uint256 burnAmount, uint256 newFuel);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when stage constants are updated\\r\\n     * @param parameter The name of the updated parameter\\r\\n     * @param value The new value\\r\\n     */\\r\\n    event StageConstantsUpdated(string parameter, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when fee configuration cooldowns are updated\\r\\n     * @param rateChangeCooldown New rate change cooldown\\r\\n     * @param appChangeCooldown New app change cooldown\\r\\n     */\\r\\n    event FeeConfigUpdated(uint256 rateChangeCooldown, uint256 appChangeCooldown);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when stage configuration is updated\\r\\n     * @param stage The stage being updated\\r\\n     * @param oldConfig Previous configuration\\r\\n     * @param newConfig New configuration\\r\\n     */\\r\\n    event StageConfigUpdated(UserStage indexed stage, StageConfig oldConfig, StageConfig newConfig);\\r\\n\\r\\n    /* ========== CORE CONSTANTS ========== */\\r\\n    function MAX_WHITELISTED_COLLECTIONS() external pure returns (uint256);\\r\\n\\r\\n    function BASIS_POINTS() external pure returns (uint256);\\r\\n\\r\\n    function MAX_DAILY_MULTIPLIER() external pure returns (uint256);\\r\\n\\r\\n    function MAX_FUEL_LIMIT() external pure returns (uint256);\\r\\n\\r\\n    function MAX_FUEL_RATE() external pure returns (uint256);\\r\\n\\r\\n    function MAX_POINTS_AWARDED() external pure returns (uint256);\\r\\n\\r\\n    function MAX_SELL_BPS_LIMIT() external pure returns (uint256);\\r\\n\\r\\n    function BURN_ADDRESS() external pure returns (address);\\r\\n\\r\\n    /* ========== USER FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Buy tokens using base token\\r\\n     * @param amount Amount of base token to use for purchase\\r\\n     */\\r\\n    function buyTokens(uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sell tokens to receive base token\\r\\n     * @param amount Amount of swap token to sell\\r\\n     */\\r\\n    function sellTokens(uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Increase user's fuel by burning tokens\\r\\n     */\\r\\n    function lightUp() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Upgrade user to next stage when requirements are met\\r\\n     */\\r\\n    function upgradeStage() external;\\r\\n\\r\\n    /* ========== ADMIN FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Set new exchange rate\\r\\n     * @param newRate New exchange rate\\r\\n     */\\r\\n    function setExchangeRate(uint256 newRate) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set new fee rates\\r\\n     * @param newBuyFeeBPS New buy fee in basis points\\r\\n     * @param newSellFeeBPS New sell fee in basis points\\r\\n     */\\r\\n    function setFeeRates(uint256 newBuyFeeBPS, uint256 newSellFeeBPS) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set new developer address\\r\\n     * @param newDevAddress New developer address\\r\\n     */\\r\\n    function setDevAddress(address newDevAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw accumulated fees\\r\\n     */\\r\\n    function withdrawFees() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw ETH from the contract\\r\\n     */\\r\\n    function withdrawETH() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize the whitelisted collections \\r\\n     * @param collections Array of collection addresses to whitelist\\r\\n     */\\r\\n    function initializeWhitelistedCollections(address[] calldata collections) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update stage configuration\\r\\n     * @param _stage The stage to update\\r\\n     * @param _config New configuration for the stage\\r\\n     */\\r\\n    function setStageConfig(UserStage _stage, StageConfig calldata _config) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update cooldown configuration\\r\\n     * @param _rateChangeCooldown New rate change cooldown\\r\\n     * @param _appChangeCooldown New app change cooldown\\r\\n     */\\r\\n    function setCooldownConfig(uint256 _rateChangeCooldown, uint256 _appChangeCooldown) external;\\r\\n\\r\\n    /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Check if fee rates can be changed\\r\\n     * @return bool Whether fee rates can be changed\\r\\n     */\\r\\n    function canChangeFeeRates() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Check if exchange rate can be changed\\r\\n     * @return bool Whether exchange rate can be changed\\r\\n     */\\r\\n    function canChangeExchangeRate() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Check if user has a valid NFT key\\r\\n     * @param user Address to check\\r\\n     * @return bool Whether user has a valid key\\r\\n     */\\r\\n    function hasValidKey(address user) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the whitelisted collection for the first valid key a user has\\r\\n     * @param user Address to check\\r\\n     * @return address First valid collection address\\r\\n     */\\r\\n    function getFirstValidCollection(address user) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get all whitelisted collections\\r\\n     * @return address[] Array of whitelisted collection addresses\\r\\n     */\\r\\n    function getWhitelistedCollections() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Get stage constants\\r\\n     * @return _stageConstants The stage constants\\r\\n     */\\r\\n    function getStageConstants() external view returns (StageConstants memory _stageConstants);\\r\\n\\r\\n    /**\\r\\n     * @notice Get fee configuration\\r\\n     * @return _feeConfig The fee configuration\\r\\n     */\\r\\n    function getFeeConfig() external view returns (FeeConfig memory _feeConfig);\\r\\n\\r\\n    /**\\r\\n     * @notice Get token configuration\\r\\n     * @return _tokenConfig The token configuration\\r\\n     */\\r\\n    function getTokenConfig() external view returns (TokenConfig memory _tokenConfig);\\r\\n\\r\\n    /**\\r\\n     * @notice Get system state\\r\\n     * @return _systemState The system state\\r\\n     */\\r\\n    function getSystemState() external view returns (SystemState memory _systemState);\\r\\n\\r\\n    /**\\r\\n     * @notice Get user state\\r\\n     * @param user The user address\\r\\n     * @return _userState The user state\\r\\n     */\\r\\n    function getUserState(address user) external view returns (UserState memory _userState);\\r\\n\\r\\n    /**\\r\\n     * @notice Get exchange rate\\r\\n     * @return _exchangeRate The exchange rate\\r\\n     */\\r\\n    function getExchangeRate() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get stage configuration\\r\\n     * @param _stage The stage to get configuration for\\r\\n     * @return _stageConfig The stage configuration\\r\\n     */\\r\\n    function getStageConfig(UserStage _stage) external view returns (StageConfig memory _stageConfig);\\r\\n}\\r\\n\",\"keccak256\":\"0x0835a5a7f6ce4d94bffe2b92f0c14c2d3b5a0be743dd4af0eb0592a2efd7468b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002f1838038062002f188339810160408190526200003491620004f5565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006681620000b2565b50600180556002805460ff191690556000839003620000985760405163a2ec3a5560e01b815260040160405180910390fd5b620000a7858585858562000102565b505050505062000572565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051606080820183526001600160a01b038881168084528882166020808601829052948601899052600d80546001600160a01b03199081169093179055600e805483169091179055600f889055845160e080820187526000808352828701819052428389018190528387018190528a86166080808601829052968b1660a080870182905260c096870184905260108590556011859055601284905560138490556014805489169093179092556015805490971617909555601655875180840189526103e8808252600a828a018190526064838c0181905260c8848b018190526276a700858b01819052629e3400958a0186905260079490945560088390556009829055909155600b91909155600c9190915588518087018a52623b538080825262015180828b01819052683635c9adc5dea00000838d0181905269010f0cf064dd59200000938b018490526003929092556004556005819055600691909155895161010081018b52678ac7230489e80000815298890183905298880182905260019688018790529487019590955291850195909552611388948401949094529282019290925290601990808152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015590505060405180610100016040528068056bc75e2d63100000815260200160328152602001600a8152602001600281526020016002815260200169010f0cf064dd5920000081526020016117708152602001606481525060196000600160028111156200037e576200037e6200055c565b60028111156200039257620003926200055c565b8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155905050604051806101000160405280681b1ae4d6e2ef50000081526020016101f4815260200160648152602001600581526020016005815260200169043c33c19375648000008152602001611b5881526020016064815250601960006002808111156200046157620004616200055c565b60028111156200047557620004756200055c565b81526020808201929092526040908101600020835181559183015160018301558201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0909101516007909101555050505050565b80516001600160a01b0381168114620004f057600080fd5b919050565b600080600080600060a086880312156200050e57600080fd5b6200051986620004d8565b94506200052960208701620004d8565b9350604086015192506200054060608701620004d8565b91506200055060808701620004d8565b90509295509295909350565b634e487b7160e01b600052602160045260246000fd5b61299680620005826000396000f3fe6080604052600436106102345760003560e01c8063715018a61161012e578063d0d41fe1116100ab578063e6aa216c1161006f578063e6aa216c1461070c578063f2fde38b14610721578063fccc281314610741578063feaca58314610769578063ff8fefc51461078957600080fd5b8063d0d41fe114610674578063db068e0e14610694578063e086e5ec146106b4578063e1f1c4a7146106c9578063e2909150146106df57600080fd5b80638da5cb5b116100f25780638da5cb5b1461058f57806390eff96914610435578063a1441f4f146105c1578063abd6dfb014610634578063b1c5b8a71461065457600080fd5b8063715018a61461052e5780638438296d146104c35780638456cb59146105435780638b0279d2146105585780638ca8cc9b1461057a57600080fd5b80634205ecf4116101bc5780635fbbc0d2116101805780635fbbc0d2146104625780635fec87c5146104c3578063641208f1146104d85780636c11bcd3146104ee5780636f0dc1bd1461050e57600080fd5b80634205ecf4146103dd578063476343ee146103fd57806349fea517146104125780634faf0e71146104355780635c975abb1461044a57600080fd5b80632f036c90116102035780632f036c90146103365780633610724e1461035b57806339c078221461037b5780633f4ba83a1461039b578063416ae768146103b057600080fd5b80630602f2f914610240578063168c89cf146102575780631e70a17c1461026c57806328fa777f146102bd57600080fd5b3661023b57005b600080fd5b34801561024c57600080fd5b506102556107a9565b005b34801561026357600080fd5b50610255610991565b34801561027857600080fd5b50610281610b22565b6040516102b491908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b60405180910390f35b3480156102c957600080fd5b506102d2610b7a565b6040516102b49190600060e08201905082518252602083015160208301526040830151604083015260608301516060830152608083015160018060a01b0380821660808501528060a08601511660a0850152505060c083015160c083015292915050565b34801561034257600080fd5b5061034b610c1d565b60405190151581526020016102b4565b34801561036757600080fd5b50610255610376366004612563565b610c37565b34801561038757600080fd5b5061025561039636600461257c565b610ec7565b3480156103a757600080fd5b50610255610f40565b3480156103bc57600080fd5b506103d06103cb36600461257c565b610f88565b6040516102b491906125dd565b3480156103e957600080fd5b506102556103f836600461263c565b61104a565b34801561040957600080fd5b5061025561130a565b34801561041e57600080fd5b50610427600a81565b6040519081526020016102b4565b34801561044157600080fd5b50610427606481565b34801561045657600080fd5b5060025460ff1661034b565b34801561046e57600080fd5b506104776113f6565b6040516102b49190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b3480156104cf57600080fd5b50610427600581565b3480156104e457600080fd5b50610427611b5881565b3480156104fa57600080fd5b50610255610509366004612563565b61146c565b34801561051a57600080fd5b5061025561052936600461267d565b611820565b34801561053a57600080fd5b506102556118cf565b34801561054f57600080fd5b506102556118e1565b34801561056457600080fd5b5061056d611929565b6040516102b4919061269f565b34801561058657600080fd5b5061034b61198b565b34801561059b57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016102b4565b3480156105cd57600080fd5b506040805160608082018352600080835260208084018290529284015282518082018452600d546001600160a01b03908116808352600e548216838601908152600f54938701938452865191825251909116938101939093525192820192909252016102b4565b34801561064057600080fd5b5061034b61064f36600461257c565b61199d565b34801561066057600080fd5b506105a961066f36600461257c565b611a71565b34801561068057600080fd5b5061025561068f36600461257c565b611b4f565b3480156106a057600080fd5b506102556106af366004612563565b611c1f565b3480156106c057600080fd5b50610255611cc5565b3480156106d557600080fd5b5061042761271081565b3480156106eb57600080fd5b506106ff6106fa3660046126ec565b611dca565b6040516102b49190612755565b34801561071857600080fd5b50600f54610427565b34801561072d57600080fd5b5061025561073c36600461257c565b611eaa565b34801561074d57600080fd5b506105a9732ef7dec913e4127fd0f94b32eead23ee6314359881565b34801561077557600080fd5b5061025561078436600461267d565b611eea565b34801561079557600080fd5b506102556107a4366004612764565b611fc4565b6107b23361199d565b6107cf5760405163e4c147b760e01b815260040160405180910390fd5b6107d7612162565b6107df612186565b3360009081526018602052604090206002815460ff166002811115610806576108066125a5565b03610824576040516323c3457d60e21b815260040160405180910390fd5b805460009060ff16600281111561083d5761083d6125a5565b6108489060016127ef565b6002811115610859576108596125a5565b905060196000826002811115610871576108716125a5565b6002811115610882576108826125a5565b815260200190815260200160002060010154826001015410156108b857604051635d25a49360e01b815260040160405180910390fd5b601960008260028111156108ce576108ce6125a5565b60028111156108df576108df6125a5565b8152602001908152602001600020600201548260020154101561091557604051630797028d60e01b815260040160405180910390fd5b81548190839060ff19166001836002811115610933576109336125a5565b02179055506000600183018190556002830155815460405133917fb70d74b9d8c0fda2b85abb8b3f56ec446bbb704a0f82cff6e20bb695877840789161097c9160ff1690612802565b60405180910390a2505061098f60018055565b565b61099a3361199d565b6109b75760405163e4c147b760e01b815260040160405180910390fd5b6109bf612162565b6109c7612186565b3360009081526018602052604081208054909190601990829060ff1660028111156109f4576109f46125a5565b6002811115610a0557610a056125a5565b8152602080820192909252604090810160002081516101008101835281548082526001830154948201949094526002820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e0820152600d54909250610aa2916001600160a01b03909116903390732ef7dec913e4127fd0f94b32eead23ee63143598906121b0565b6000610ac282606001518460020154610abb91906127ef565b606461221d565b90508260020154811115610ad857600283018190555b8151604080519182526020820183905233917fdbfd1f1a3141f27f6376b66eab3b06a7aed44b4adaa74c1cde2953f60b4a901e91015b60405180910390a250505061098f60018055565b610b4d6040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526003548152600454602082015260055491810191909152600654606082015290565b610bcc6040518060e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081525090565b506040805160e081018252601054815260115460208201526012549181019190915260135460608201526014546001600160a01b0390811660808301526015541660a082015260165460c082015290565b600b54601254600091610c2f916127ef565b421015905090565b610c3f612186565b610c483361199d565b610c655760405163e4c147b760e01b815260040160405180910390fd5b610c6d612162565b600554811015610c9057604051631b88e6f960e31b815260040160405180910390fd5b600d546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfc9190612810565b1015610d1b57604051631e9acf1760e31b815260040160405180910390fd5b60095460009061271090610d2f9084612829565b610d399190612840565b600f54909150600090610d4c8385612862565b610d569190612829565b90508160106000016000828254610d6d91906127ef565b90915550503360009081526018602052604081208054909190601990829060ff166002811115610d9f57610d9f6125a5565b6002811115610db057610db06125a5565b8152602001908152602001600020604051806101000160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090508060a001518510610e45578060800151826001016000828254610e3f91906127ef565b90915550505b600d54610e5d906001600160a01b03163330886121b0565b600e54610e74906001600160a01b03163385612237565b604080518681526020810185905290810185905233907f0d1a0d5e3d583a0e92588799dd06e50fd78c07daf05f0cc06d7b848b1ca445f19060600160405180910390a250505050610ec460018055565b50565b610ecf612268565b6001600160a01b038116610ef657604051636a37fde960e01b815260040160405180910390fd5b601580546001600160a01b0319166001600160a01b0383169081179091556040517f73c00ab29958d28e658220b90dfab0e80b8279f6835cbfb4ad2fc637e02781c790600090a250565b6000546001600160a01b0316331480610f6357506015546001600160a01b031633145b610f8057604051635c427cd960e01b815260040160405180910390fd5b61098f612295565b610fc26040805160c08101909152806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03821660009081526018602052604090819020815160c081019092528054829060ff166002811115610ffd57610ffd6125a5565b600281111561100e5761100e6125a5565b81526001820154602082015260028201546040820152600382015460608201526004820154608082015260059091015460a09091015292915050565b611052612268565b6064600060c083013582118061106d5750611b588360c00135115b1561108b5760405163530da5b960e01b815260040160405180910390fd5b80836060013514806110a1575060058360600135115b156110bf57604051630816fbc760e11b815260040160405180910390fd5b80836080013514806110d5575060058360800135115b156110f3576040516308226f8b60e01b815260040160405180910390fd5b808360e001351480611109575060648360e00135115b156111275760405163de35777160e01b815260040160405180910390fd5b8235819003611149576040516302075cc160e41b815260040160405180910390fd5b8083602001350361116d57604051639541404d60e01b815260040160405180910390fd5b808360400135036111915760405163ecb4113760e01b815260040160405180910390fd5b808360a00135036111b55760405163062e16f560e11b815260040160405180910390fd5b6000601960008660028111156111cd576111cd6125a5565b60028111156111de576111de6125a5565b815260200190815260200160002090506000816040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905084600001358260000181905550846020013582600101819055508460400135826002018190555084606001358260030181905550846080013582600401819055508460a0013582600501819055508460c0013582600601819055508460e0013582600701819055508560028111156112c9576112c96125a5565b7fc58b1e897dd4f5f2b7b3549304a2614500629e7b5954f911df41b4f9b27b46bb82846040516112fa929190612875565b60405180910390a2505050505050565b611312612186565b6000546001600160a01b031633148061133557506014546001600160a01b031633145b61135257604051635c427cd960e01b815260040160405180910390fd5b61135a612162565b60145460108054601180546000938490559290556001600160a01b039092169190811561139857600d54611398906001600160a01b03168484612237565b80156113b557600e546113b5906001600160a01b03168483612237565b60408051838152602081018390526001600160a01b038516917fdeb5099d7943aa2b4c1142e5d53d2f7636aa8f7bd130ec79816f151572bcdf459101610b0e565b61142f6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805160c0810182526007548152600854602082015260095491810191909152600a546060820152600b546080820152600c5460a082015290565b611474612186565b61147d3361199d565b61149a5760405163e4c147b760e01b815260040160405180910390fd5b6114a2612162565b6006548110156114c557604051631b88e6f960e31b815260040160405180910390fd5b600a54600090612710906114d99084612829565b6114e39190612840565b905060006114f18284612862565b600f549091506000906115049083612840565b90508060000361152757604051631b88e6f960e31b815260040160405180910390fd5b3360009081526018602052604081208054909190601990829060ff166002811115611554576115546125a5565b6002811115611565576115656125a5565b81526020808201929092526040908101600090812082516101008101845281548152600182015494810194909452600281015484840152600381015460608501526004808201546080860152600582015460a0860152600682015460c086015260079091015460e0850152600d5492516370a0823160e01b81523091810191909152929350916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116419190612810565b905060006127108360c00151836116589190612829565b6116629190612840565b90508085111561168557604051632509499f60e11b815260040160405180910390fd5b6002845460ff16600281111561169d5761169d6125a5565b1480156116a957508085145b156116e65760038054908501546116c091906127ef565b42116116df576040516308516f7760e11b815260040160405180910390fd5b4260038501555b60045460058501546116f891906127ef565b42111561170d57600060048501554260058501555b600084600201548460e0015161172391906127ef565b8460a001516117329190612829565b90508089866004015461174591906127ef565b111561176457604051636a6c16ab60e01b815260040160405180910390fd5b8885600401600082825461177891906127ef565b9091555050600060028601819055601180548a92906117989084906127ef565b9091555050600e546117b5906001600160a01b031633308c6121b0565b600d546117cc906001600160a01b03163388612237565b604080518a81526020810188905290810189905233907f6db63bebf1e6540277744df32846ebdb98385b1a73f2d5de49b28348add63f509060600160405180910390a25050505050505050610ec460018055565b611828612268565b6212750062ed4e008184108061183d57508084115b1561185b57604051637475d84d60e11b815260040160405180910390fd5b8183108061186857508083115b1561188657604051637475d84d60e11b815260040160405180910390fd5b600b849055600c83905560408051858152602081018590527f1eab951da250f7e001396235b296e29bc73945b6a52fd471dd8f3de3398634be910160405180910390a150505050565b6118d7612268565b61098f60006122e7565b6000546001600160a01b031633148061190457506015546001600160a01b031633145b61192157604051635c427cd960e01b815260040160405180910390fd5b61098f612337565b6060601780548060200260200160405190810160405280929190818152602001828054801561198157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611963575b5050505050905090565b600c54601354600091610c2f916127ef565b60175460009081036119b157506000919050565b60005b601754811015611a6857601781815481106119d1576119d16128e0565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03858116600483015290911690636d8ea5b490602401602060405180830381865afa158015611a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4891906128f6565b15611a565750600192915050565b80611a6081612918565b9150506119b4565b50600092915050565b6000805b601754811015611a685760178181548110611a9257611a926128e0565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03858116600483015290911690636d8ea5b490602401602060405180830381865afa158015611ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0991906128f6565b15611b3d5760178181548110611b2157611b216128e0565b6000918252602090912001546001600160a01b03169392505050565b80611b4781612918565b915050611a75565b6014546001600160a01b03163314611b7a57604051635c427cd960e01b815260040160405180910390fd5b6001600160a01b038116611ba157604051636a37fde960e01b815260040160405180910390fd5b600c54601654611bb191906127ef565b421015611bd1576040516326f4231b60e11b815260040160405180910390fd5b601480546001600160a01b0319166001600160a01b038316908117909155426016556040517f34830ecd12aee38e030de8db2aab7662959ba614a8af53e095041d13deced11d90600090a250565b611c27612268565b600b546012546103e891611c3a916127ef565b421015611c5a5760405163418ffd5d60e01b815260040160405180910390fd5b811580611c6657508082115b15611c845760405163a2ec3a5560e01b815260040160405180910390fd5b600f829055426012556040518281527f388f446e9526fe5c9af20a5919b342370c8a7c0cb05245afe1e545658fa3cdba906020015b60405180910390a15050565b611ccd612186565b6000546001600160a01b0316331480611cf057506014546001600160a01b031633145b611d0d57604051635c427cd960e01b815260040160405180910390fd5b611d15612162565b6014546040516001600160a01b03909116904790600090839083908381818185875af1925050503d8060008114611d68576040519150601f19603f3d011682016040523d82523d6000602084013e611d6d565b606091505b5050905080611d8f5760405163b12d13eb60e01b815260040160405180910390fd5b826001600160a01b03167f94b2de810873337ed265c5f8cf98c9cffefa06b8607f9a2f1fbaebdfbcfbef1c83604051610b0e91815260200190565b611e1260405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60196000836002811115611e2857611e286125a5565b6002811115611e3957611e396125a5565b815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b611eb2612268565b6001600160a01b038116611ee157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610ec4816122e7565b611ef2612268565b600c54601354611f0291906127ef565b421015611f22576040516376fd201760e01b815260040160405180910390fd5b600754821180611f33575060075481115b15611f515760405163530da5b960e01b815260040160405180910390fd5b600854821080611f62575060085481105b15611f805760405163530da5b960e01b815260040160405180910390fd5b6009829055600a8190554260135560408051838152602081018390527f4f672c50736ba0fe8a4825ecfde8bcd931727422a77ac89af44fccce2746e0b39101611cb9565b6000546001600160a01b0316331480611fe757506014546001600160a01b031633145b61200457604051635c427cd960e01b815260040160405180910390fd5b601754600a906120159083906127ef565b111561203457604051630ef0d4a960e11b815260040160405180910390fd5b6017541561205557604051630397a11d60e41b815260040160405180910390fd5b60005b8181101561215d5761208f838383818110612075576120756128e0565b905060200201602081019061208a919061257c565b612374565b61214b5760178383838181106120a7576120a76128e0565b90506020020160208101906120bc919061257c565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055828282818110612100576121006128e0565b9050602002016020810190612115919061257c565b6001600160a01b03167f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9260405160405180910390a25b8061215581612918565b915050612058565b505050565b60025460ff161561098f5760405163d93c066560e01b815260040160405180910390fd5b6002600154036121a957604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b0384811660248301528381166044830152606482018390526122179186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506123d4565b50505050565b600081831061222c578161222e565b825b90505b92915050565b6040516001600160a01b0383811660248301526044820183905261215d91859182169063a9059cbb906064016121e5565b6000546001600160a01b0316331461098f5760405163118cdaa760e01b8152336004820152602401611ed8565b61229d612437565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61233f612162565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122ca3390565b6000805b601754811015611a6857826001600160a01b03166017828154811061239f5761239f6128e0565b6000918252602090912001546001600160a01b0316036123c25750600192915050565b806123cc81612918565b915050612378565b60006123e96001600160a01b0384168361245a565b9050805160001415801561240e57508080602001905181019061240c91906128f6565b155b1561215d57604051635274afe760e01b81526001600160a01b0384166004820152602401611ed8565b60025460ff1661098f57604051638dfc202b60e01b815260040160405180910390fd5b606061222e8383600084600080856001600160a01b031684866040516124809190612931565b60006040518083038185875af1925050503d80600081146124bd576040519150601f19603f3d011682016040523d82523d6000602084013e6124c2565b606091505b50915091506124d28683836124de565b925050505b9392505050565b6060826124f3576124ee8261253a565b6124d7565b815115801561250a57506001600160a01b0384163b155b1561253357604051639996b31560e01b81526001600160a01b0385166004820152602401611ed8565b50806124d7565b80511561254a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561257557600080fd5b5035919050565b60006020828403121561258e57600080fd5b81356001600160a01b03811681146124d757600080fd5b634e487b7160e01b600052602160045260246000fd5b600381106125d957634e487b7160e01b600052602160045260246000fd5b9052565b600060c0820190506125f08284516125bb565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b80356003811061263757600080fd5b919050565b60008082840361012081121561265157600080fd5b61265a84612628565b9250610100601f198201121561266f57600080fd5b506020830190509250929050565b6000806040838503121561269057600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156126e05783516001600160a01b0316835292840192918401916001016126bb565b50909695505050505050565b6000602082840312156126fe57600080fd5b61222e82612628565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b61010081016122318284612707565b6000806020838503121561277757600080fd5b823567ffffffffffffffff8082111561278f57600080fd5b818501915085601f8301126127a357600080fd5b8135818111156127b257600080fd5b8660208260051b85010111156127c757600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115612231576122316127d9565b6020810161223182846125bb565b60006020828403121561282257600080fd5b5051919050565b8082028115828204841417612231576122316127d9565b60008261285d57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115612231576122316127d9565b61020081016128848285612707565b8254610100830152600183015461012083015260028301546101408301526003830154610160830152600483015461018083015260058301546101a083015260068301546101c083015260078301546101e08301529392505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561290857600080fd5b815180151581146124d757600080fd5b60006001820161292a5761292a6127d9565b5060010190565b6000825160005b818110156129525760208186018101518583015201612938565b50600092019182525091905056fea2646970667358221220783f87d64317636d0e838686179e8d57e87c0b7318951f2311425b4fe899619a64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102345760003560e01c8063715018a61161012e578063d0d41fe1116100ab578063e6aa216c1161006f578063e6aa216c1461070c578063f2fde38b14610721578063fccc281314610741578063feaca58314610769578063ff8fefc51461078957600080fd5b8063d0d41fe114610674578063db068e0e14610694578063e086e5ec146106b4578063e1f1c4a7146106c9578063e2909150146106df57600080fd5b80638da5cb5b116100f25780638da5cb5b1461058f57806390eff96914610435578063a1441f4f146105c1578063abd6dfb014610634578063b1c5b8a71461065457600080fd5b8063715018a61461052e5780638438296d146104c35780638456cb59146105435780638b0279d2146105585780638ca8cc9b1461057a57600080fd5b80634205ecf4116101bc5780635fbbc0d2116101805780635fbbc0d2146104625780635fec87c5146104c3578063641208f1146104d85780636c11bcd3146104ee5780636f0dc1bd1461050e57600080fd5b80634205ecf4146103dd578063476343ee146103fd57806349fea517146104125780634faf0e71146104355780635c975abb1461044a57600080fd5b80632f036c90116102035780632f036c90146103365780633610724e1461035b57806339c078221461037b5780633f4ba83a1461039b578063416ae768146103b057600080fd5b80630602f2f914610240578063168c89cf146102575780631e70a17c1461026c57806328fa777f146102bd57600080fd5b3661023b57005b600080fd5b34801561024c57600080fd5b506102556107a9565b005b34801561026357600080fd5b50610255610991565b34801561027857600080fd5b50610281610b22565b6040516102b491908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b60405180910390f35b3480156102c957600080fd5b506102d2610b7a565b6040516102b49190600060e08201905082518252602083015160208301526040830151604083015260608301516060830152608083015160018060a01b0380821660808501528060a08601511660a0850152505060c083015160c083015292915050565b34801561034257600080fd5b5061034b610c1d565b60405190151581526020016102b4565b34801561036757600080fd5b50610255610376366004612563565b610c37565b34801561038757600080fd5b5061025561039636600461257c565b610ec7565b3480156103a757600080fd5b50610255610f40565b3480156103bc57600080fd5b506103d06103cb36600461257c565b610f88565b6040516102b491906125dd565b3480156103e957600080fd5b506102556103f836600461263c565b61104a565b34801561040957600080fd5b5061025561130a565b34801561041e57600080fd5b50610427600a81565b6040519081526020016102b4565b34801561044157600080fd5b50610427606481565b34801561045657600080fd5b5060025460ff1661034b565b34801561046e57600080fd5b506104776113f6565b6040516102b49190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b3480156104cf57600080fd5b50610427600581565b3480156104e457600080fd5b50610427611b5881565b3480156104fa57600080fd5b50610255610509366004612563565b61146c565b34801561051a57600080fd5b5061025561052936600461267d565b611820565b34801561053a57600080fd5b506102556118cf565b34801561054f57600080fd5b506102556118e1565b34801561056457600080fd5b5061056d611929565b6040516102b4919061269f565b34801561058657600080fd5b5061034b61198b565b34801561059b57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016102b4565b3480156105cd57600080fd5b506040805160608082018352600080835260208084018290529284015282518082018452600d546001600160a01b03908116808352600e548216838601908152600f54938701938452865191825251909116938101939093525192820192909252016102b4565b34801561064057600080fd5b5061034b61064f36600461257c565b61199d565b34801561066057600080fd5b506105a961066f36600461257c565b611a71565b34801561068057600080fd5b5061025561068f36600461257c565b611b4f565b3480156106a057600080fd5b506102556106af366004612563565b611c1f565b3480156106c057600080fd5b50610255611cc5565b3480156106d557600080fd5b5061042761271081565b3480156106eb57600080fd5b506106ff6106fa3660046126ec565b611dca565b6040516102b49190612755565b34801561071857600080fd5b50600f54610427565b34801561072d57600080fd5b5061025561073c36600461257c565b611eaa565b34801561074d57600080fd5b506105a9732ef7dec913e4127fd0f94b32eead23ee6314359881565b34801561077557600080fd5b5061025561078436600461267d565b611eea565b34801561079557600080fd5b506102556107a4366004612764565b611fc4565b6107b23361199d565b6107cf5760405163e4c147b760e01b815260040160405180910390fd5b6107d7612162565b6107df612186565b3360009081526018602052604090206002815460ff166002811115610806576108066125a5565b03610824576040516323c3457d60e21b815260040160405180910390fd5b805460009060ff16600281111561083d5761083d6125a5565b6108489060016127ef565b6002811115610859576108596125a5565b905060196000826002811115610871576108716125a5565b6002811115610882576108826125a5565b815260200190815260200160002060010154826001015410156108b857604051635d25a49360e01b815260040160405180910390fd5b601960008260028111156108ce576108ce6125a5565b60028111156108df576108df6125a5565b8152602001908152602001600020600201548260020154101561091557604051630797028d60e01b815260040160405180910390fd5b81548190839060ff19166001836002811115610933576109336125a5565b02179055506000600183018190556002830155815460405133917fb70d74b9d8c0fda2b85abb8b3f56ec446bbb704a0f82cff6e20bb695877840789161097c9160ff1690612802565b60405180910390a2505061098f60018055565b565b61099a3361199d565b6109b75760405163e4c147b760e01b815260040160405180910390fd5b6109bf612162565b6109c7612186565b3360009081526018602052604081208054909190601990829060ff1660028111156109f4576109f46125a5565b6002811115610a0557610a056125a5565b8152602080820192909252604090810160002081516101008101835281548082526001830154948201949094526002820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e0820152600d54909250610aa2916001600160a01b03909116903390732ef7dec913e4127fd0f94b32eead23ee63143598906121b0565b6000610ac282606001518460020154610abb91906127ef565b606461221d565b90508260020154811115610ad857600283018190555b8151604080519182526020820183905233917fdbfd1f1a3141f27f6376b66eab3b06a7aed44b4adaa74c1cde2953f60b4a901e91015b60405180910390a250505061098f60018055565b610b4d6040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526003548152600454602082015260055491810191909152600654606082015290565b610bcc6040518060e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081525090565b506040805160e081018252601054815260115460208201526012549181019190915260135460608201526014546001600160a01b0390811660808301526015541660a082015260165460c082015290565b600b54601254600091610c2f916127ef565b421015905090565b610c3f612186565b610c483361199d565b610c655760405163e4c147b760e01b815260040160405180910390fd5b610c6d612162565b600554811015610c9057604051631b88e6f960e31b815260040160405180910390fd5b600d546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfc9190612810565b1015610d1b57604051631e9acf1760e31b815260040160405180910390fd5b60095460009061271090610d2f9084612829565b610d399190612840565b600f54909150600090610d4c8385612862565b610d569190612829565b90508160106000016000828254610d6d91906127ef565b90915550503360009081526018602052604081208054909190601990829060ff166002811115610d9f57610d9f6125a5565b6002811115610db057610db06125a5565b8152602001908152602001600020604051806101000160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090508060a001518510610e45578060800151826001016000828254610e3f91906127ef565b90915550505b600d54610e5d906001600160a01b03163330886121b0565b600e54610e74906001600160a01b03163385612237565b604080518681526020810185905290810185905233907f0d1a0d5e3d583a0e92588799dd06e50fd78c07daf05f0cc06d7b848b1ca445f19060600160405180910390a250505050610ec460018055565b50565b610ecf612268565b6001600160a01b038116610ef657604051636a37fde960e01b815260040160405180910390fd5b601580546001600160a01b0319166001600160a01b0383169081179091556040517f73c00ab29958d28e658220b90dfab0e80b8279f6835cbfb4ad2fc637e02781c790600090a250565b6000546001600160a01b0316331480610f6357506015546001600160a01b031633145b610f8057604051635c427cd960e01b815260040160405180910390fd5b61098f612295565b610fc26040805160c08101909152806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03821660009081526018602052604090819020815160c081019092528054829060ff166002811115610ffd57610ffd6125a5565b600281111561100e5761100e6125a5565b81526001820154602082015260028201546040820152600382015460608201526004820154608082015260059091015460a09091015292915050565b611052612268565b6064600060c083013582118061106d5750611b588360c00135115b1561108b5760405163530da5b960e01b815260040160405180910390fd5b80836060013514806110a1575060058360600135115b156110bf57604051630816fbc760e11b815260040160405180910390fd5b80836080013514806110d5575060058360800135115b156110f3576040516308226f8b60e01b815260040160405180910390fd5b808360e001351480611109575060648360e00135115b156111275760405163de35777160e01b815260040160405180910390fd5b8235819003611149576040516302075cc160e41b815260040160405180910390fd5b8083602001350361116d57604051639541404d60e01b815260040160405180910390fd5b808360400135036111915760405163ecb4113760e01b815260040160405180910390fd5b808360a00135036111b55760405163062e16f560e11b815260040160405180910390fd5b6000601960008660028111156111cd576111cd6125a5565b60028111156111de576111de6125a5565b815260200190815260200160002090506000816040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905084600001358260000181905550846020013582600101819055508460400135826002018190555084606001358260030181905550846080013582600401819055508460a0013582600501819055508460c0013582600601819055508460e0013582600701819055508560028111156112c9576112c96125a5565b7fc58b1e897dd4f5f2b7b3549304a2614500629e7b5954f911df41b4f9b27b46bb82846040516112fa929190612875565b60405180910390a2505050505050565b611312612186565b6000546001600160a01b031633148061133557506014546001600160a01b031633145b61135257604051635c427cd960e01b815260040160405180910390fd5b61135a612162565b60145460108054601180546000938490559290556001600160a01b039092169190811561139857600d54611398906001600160a01b03168484612237565b80156113b557600e546113b5906001600160a01b03168483612237565b60408051838152602081018390526001600160a01b038516917fdeb5099d7943aa2b4c1142e5d53d2f7636aa8f7bd130ec79816f151572bcdf459101610b0e565b61142f6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805160c0810182526007548152600854602082015260095491810191909152600a546060820152600b546080820152600c5460a082015290565b611474612186565b61147d3361199d565b61149a5760405163e4c147b760e01b815260040160405180910390fd5b6114a2612162565b6006548110156114c557604051631b88e6f960e31b815260040160405180910390fd5b600a54600090612710906114d99084612829565b6114e39190612840565b905060006114f18284612862565b600f549091506000906115049083612840565b90508060000361152757604051631b88e6f960e31b815260040160405180910390fd5b3360009081526018602052604081208054909190601990829060ff166002811115611554576115546125a5565b6002811115611565576115656125a5565b81526020808201929092526040908101600090812082516101008101845281548152600182015494810194909452600281015484840152600381015460608501526004808201546080860152600582015460a0860152600682015460c086015260079091015460e0850152600d5492516370a0823160e01b81523091810191909152929350916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116419190612810565b905060006127108360c00151836116589190612829565b6116629190612840565b90508085111561168557604051632509499f60e11b815260040160405180910390fd5b6002845460ff16600281111561169d5761169d6125a5565b1480156116a957508085145b156116e65760038054908501546116c091906127ef565b42116116df576040516308516f7760e11b815260040160405180910390fd5b4260038501555b60045460058501546116f891906127ef565b42111561170d57600060048501554260058501555b600084600201548460e0015161172391906127ef565b8460a001516117329190612829565b90508089866004015461174591906127ef565b111561176457604051636a6c16ab60e01b815260040160405180910390fd5b8885600401600082825461177891906127ef565b9091555050600060028601819055601180548a92906117989084906127ef565b9091555050600e546117b5906001600160a01b031633308c6121b0565b600d546117cc906001600160a01b03163388612237565b604080518a81526020810188905290810189905233907f6db63bebf1e6540277744df32846ebdb98385b1a73f2d5de49b28348add63f509060600160405180910390a25050505050505050610ec460018055565b611828612268565b6212750062ed4e008184108061183d57508084115b1561185b57604051637475d84d60e11b815260040160405180910390fd5b8183108061186857508083115b1561188657604051637475d84d60e11b815260040160405180910390fd5b600b849055600c83905560408051858152602081018590527f1eab951da250f7e001396235b296e29bc73945b6a52fd471dd8f3de3398634be910160405180910390a150505050565b6118d7612268565b61098f60006122e7565b6000546001600160a01b031633148061190457506015546001600160a01b031633145b61192157604051635c427cd960e01b815260040160405180910390fd5b61098f612337565b6060601780548060200260200160405190810160405280929190818152602001828054801561198157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611963575b5050505050905090565b600c54601354600091610c2f916127ef565b60175460009081036119b157506000919050565b60005b601754811015611a6857601781815481106119d1576119d16128e0565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03858116600483015290911690636d8ea5b490602401602060405180830381865afa158015611a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4891906128f6565b15611a565750600192915050565b80611a6081612918565b9150506119b4565b50600092915050565b6000805b601754811015611a685760178181548110611a9257611a926128e0565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03858116600483015290911690636d8ea5b490602401602060405180830381865afa158015611ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0991906128f6565b15611b3d5760178181548110611b2157611b216128e0565b6000918252602090912001546001600160a01b03169392505050565b80611b4781612918565b915050611a75565b6014546001600160a01b03163314611b7a57604051635c427cd960e01b815260040160405180910390fd5b6001600160a01b038116611ba157604051636a37fde960e01b815260040160405180910390fd5b600c54601654611bb191906127ef565b421015611bd1576040516326f4231b60e11b815260040160405180910390fd5b601480546001600160a01b0319166001600160a01b038316908117909155426016556040517f34830ecd12aee38e030de8db2aab7662959ba614a8af53e095041d13deced11d90600090a250565b611c27612268565b600b546012546103e891611c3a916127ef565b421015611c5a5760405163418ffd5d60e01b815260040160405180910390fd5b811580611c6657508082115b15611c845760405163a2ec3a5560e01b815260040160405180910390fd5b600f829055426012556040518281527f388f446e9526fe5c9af20a5919b342370c8a7c0cb05245afe1e545658fa3cdba906020015b60405180910390a15050565b611ccd612186565b6000546001600160a01b0316331480611cf057506014546001600160a01b031633145b611d0d57604051635c427cd960e01b815260040160405180910390fd5b611d15612162565b6014546040516001600160a01b03909116904790600090839083908381818185875af1925050503d8060008114611d68576040519150601f19603f3d011682016040523d82523d6000602084013e611d6d565b606091505b5050905080611d8f5760405163b12d13eb60e01b815260040160405180910390fd5b826001600160a01b03167f94b2de810873337ed265c5f8cf98c9cffefa06b8607f9a2f1fbaebdfbcfbef1c83604051610b0e91815260200190565b611e1260405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60196000836002811115611e2857611e286125a5565b6002811115611e3957611e396125a5565b815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b611eb2612268565b6001600160a01b038116611ee157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610ec4816122e7565b611ef2612268565b600c54601354611f0291906127ef565b421015611f22576040516376fd201760e01b815260040160405180910390fd5b600754821180611f33575060075481115b15611f515760405163530da5b960e01b815260040160405180910390fd5b600854821080611f62575060085481105b15611f805760405163530da5b960e01b815260040160405180910390fd5b6009829055600a8190554260135560408051838152602081018390527f4f672c50736ba0fe8a4825ecfde8bcd931727422a77ac89af44fccce2746e0b39101611cb9565b6000546001600160a01b0316331480611fe757506014546001600160a01b031633145b61200457604051635c427cd960e01b815260040160405180910390fd5b601754600a906120159083906127ef565b111561203457604051630ef0d4a960e11b815260040160405180910390fd5b6017541561205557604051630397a11d60e41b815260040160405180910390fd5b60005b8181101561215d5761208f838383818110612075576120756128e0565b905060200201602081019061208a919061257c565b612374565b61214b5760178383838181106120a7576120a76128e0565b90506020020160208101906120bc919061257c565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055828282818110612100576121006128e0565b9050602002016020810190612115919061257c565b6001600160a01b03167f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9260405160405180910390a25b8061215581612918565b915050612058565b505050565b60025460ff161561098f5760405163d93c066560e01b815260040160405180910390fd5b6002600154036121a957604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b0384811660248301528381166044830152606482018390526122179186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506123d4565b50505050565b600081831061222c578161222e565b825b90505b92915050565b6040516001600160a01b0383811660248301526044820183905261215d91859182169063a9059cbb906064016121e5565b6000546001600160a01b0316331461098f5760405163118cdaa760e01b8152336004820152602401611ed8565b61229d612437565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61233f612162565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122ca3390565b6000805b601754811015611a6857826001600160a01b03166017828154811061239f5761239f6128e0565b6000918252602090912001546001600160a01b0316036123c25750600192915050565b806123cc81612918565b915050612378565b60006123e96001600160a01b0384168361245a565b9050805160001415801561240e57508080602001905181019061240c91906128f6565b155b1561215d57604051635274afe760e01b81526001600160a01b0384166004820152602401611ed8565b60025460ff1661098f57604051638dfc202b60e01b815260040160405180910390fd5b606061222e8383600084600080856001600160a01b031684866040516124809190612931565b60006040518083038185875af1925050503d80600081146124bd576040519150601f19603f3d011682016040523d82523d6000602084013e6124c2565b606091505b50915091506124d28683836124de565b925050505b9392505050565b6060826124f3576124ee8261253a565b6124d7565b815115801561250a57506001600160a01b0384163b155b1561253357604051639996b31560e01b81526001600160a01b0385166004820152602401611ed8565b50806124d7565b80511561254a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561257557600080fd5b5035919050565b60006020828403121561258e57600080fd5b81356001600160a01b03811681146124d757600080fd5b634e487b7160e01b600052602160045260246000fd5b600381106125d957634e487b7160e01b600052602160045260246000fd5b9052565b600060c0820190506125f08284516125bb565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b80356003811061263757600080fd5b919050565b60008082840361012081121561265157600080fd5b61265a84612628565b9250610100601f198201121561266f57600080fd5b506020830190509250929050565b6000806040838503121561269057600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156126e05783516001600160a01b0316835292840192918401916001016126bb565b50909695505050505050565b6000602082840312156126fe57600080fd5b61222e82612628565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b61010081016122318284612707565b6000806020838503121561277757600080fd5b823567ffffffffffffffff8082111561278f57600080fd5b818501915085601f8301126127a357600080fd5b8135818111156127b257600080fd5b8660208260051b85010111156127c757600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115612231576122316127d9565b6020810161223182846125bb565b60006020828403121561282257600080fd5b5051919050565b8082028115828204841417612231576122316127d9565b60008261285d57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115612231576122316127d9565b61020081016128848285612707565b8254610100830152600183015461012083015260028301546101408301526003830154610160830152600483015461018083015260058301546101a083015260068301546101c083015260078301546101e08301529392505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561290857600080fd5b815180151581146124d757600080fd5b60006001820161292a5761292a6127d9565b5060010190565b6000825160005b818110156129525760208186018101518583015201612938565b50600092019182525091905056fea2646970667358221220783f87d64317636d0e838686179e8d57e87c0b7318951f2311425b4fe899619a64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "DevAddressUpdated(address)": {
        "params": {
          "newDevAddress": "The new developer address"
        }
      },
      "ETHWithdrawn(address,uint256)": {
        "params": {
          "amount": "Amount of ETH withdrawn",
          "to": "Address receiving the ETH"
        }
      },
      "ExchangeRateUpdated(uint256)": {
        "params": {
          "newRate": "New exchange rate"
        }
      },
      "FeeConfigUpdated(uint256,uint256)": {
        "params": {
          "appChangeCooldown": "New app change cooldown",
          "rateChangeCooldown": "New rate change cooldown"
        }
      },
      "FeeRatesUpdated(uint256,uint256)": {
        "params": {
          "newBuyFeeBPS": "New buy fee rate in basis points",
          "newSellFeeBPS": "New sell fee rate in basis points"
        }
      },
      "FeesWithdrawn(address,uint256,uint256)": {
        "params": {
          "baseTokenFees": "Amount of base token fees withdrawn",
          "swapTokenFees": "Amount of swap token fees withdrawn",
          "to": "Address receiving the fees"
        }
      },
      "Lit(address,uint256,uint256)": {
        "params": {
          "burnAmount": "Amount of tokens burned",
          "newFuel": "New fuel level",
          "user": "User address"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "StageConfigUpdated(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "newConfig": "New configuration",
          "oldConfig": "Previous configuration",
          "stage": "The stage being updated"
        }
      },
      "StageConstantsUpdated(string,uint256)": {
        "params": {
          "parameter": "The name of the updated parameter",
          "value": "The new value"
        }
      },
      "StageUpgraded(address,uint8)": {
        "params": {
          "newStage": "New stage of the user",
          "user": "User address"
        }
      },
      "StewardCouncilAddressUpdated(address)": {
        "params": {
          "newStewardCouncilAddress": "The new steward council address"
        }
      },
      "TokensPurchased(address,uint256,uint256,uint256)": {
        "params": {
          "baseTokenAmount": "Amount of base tokens used",
          "buyer": "Address of the buyer",
          "fee": "Fee taken in base tokens",
          "swapTokenAmount": "Amount of swap tokens received"
        }
      },
      "TokensSold(address,uint256,uint256,uint256)": {
        "params": {
          "baseTokenAmount": "Amount of base tokens received",
          "fee": "Fee taken in swap tokens",
          "seller": "Address of the seller",
          "swapTokenAmount": "Amount of swap tokens sold"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "WhitelistedCollectionAdded(address)": {
        "params": {
          "collectionAddress": "Address of the added collection"
        }
      },
      "WhitelistedCollectionRemoved(address)": {
        "params": {
          "collectionAddress": "Address of the removed collection"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "buyTokens(uint256)": {
        "params": {
          "amount": "Amount of base token to use for purchase"
        }
      },
      "canChangeExchangeRate()": {
        "returns": {
          "_0": "bool Whether exchange rate can be changed"
        }
      },
      "canChangeFeeRates()": {
        "returns": {
          "_0": "bool Whether fee rates can be changed"
        }
      },
      "getExchangeRate()": {
        "returns": {
          "_0": "_exchangeRate The exchange rate"
        }
      },
      "getFeeConfig()": {
        "returns": {
          "_feeConfig": "The fee configuration"
        }
      },
      "getFirstValidCollection(address)": {
        "params": {
          "user": "Address to check"
        },
        "returns": {
          "_0": "address First valid collection address"
        }
      },
      "getStageConfig(uint8)": {
        "params": {
          "_stage": "The stage to get configuration for"
        },
        "returns": {
          "_stageConfig": "The stage configuration"
        }
      },
      "getStageConstants()": {
        "returns": {
          "_stageConstants": "The stage constants"
        }
      },
      "getSystemState()": {
        "returns": {
          "_systemState": "The system state"
        }
      },
      "getTokenConfig()": {
        "returns": {
          "_tokenConfig": "The token configuration"
        }
      },
      "getUserState(address)": {
        "params": {
          "user": "The user address"
        },
        "returns": {
          "_userState": "The user state"
        }
      },
      "getWhitelistedCollections()": {
        "returns": {
          "_0": "address[] Array of whitelisted collection addresses"
        }
      },
      "hasValidKey(address)": {
        "params": {
          "user": "Address to check"
        },
        "returns": {
          "_0": "bool Whether user has a valid key"
        }
      },
      "initializeWhitelistedCollections(address[])": {
        "params": {
          "collections": "Array of collection addresses to whitelist"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sellTokens(uint256)": {
        "params": {
          "amount": "Amount of swap token to sell"
        }
      },
      "setCooldownConfig(uint256,uint256)": {
        "params": {
          "_appChangeCooldown": "Cooldown for changing app settings",
          "_rateChangeCooldown": "Cooldown for changing exchange rate"
        }
      },
      "setDevAddress(address)": {
        "params": {
          "newDevAddress": "New developer address"
        }
      },
      "setExchangeRate(uint256)": {
        "params": {
          "newRate": "New exchange rate"
        }
      },
      "setFeeRates(uint256,uint256)": {
        "params": {
          "newBuyFeeBPS": "New buy fee in basis points",
          "newSellFeeBPS": "New sell fee in basis points"
        }
      },
      "setStageConfig(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "_config": "New configuration for the stage",
          "_stage": "The stage to update"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawETH()": {
        "details": "Withdraw ETH from the contract (only admin)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DevAddressUpdated(address)": {
        "notice": "Emitted when the developer address is updated"
      },
      "ETHWithdrawn(address,uint256)": {
        "notice": "Emitted when ETH is withdrawn"
      },
      "ExchangeRateUpdated(uint256)": {
        "notice": "Emitted when exchange rate is updated"
      },
      "FeeConfigUpdated(uint256,uint256)": {
        "notice": "Emitted when fee configuration cooldowns are updated"
      },
      "FeeRatesUpdated(uint256,uint256)": {
        "notice": "Emitted when fee rates are updated"
      },
      "FeesWithdrawn(address,uint256,uint256)": {
        "notice": "Emitted when fees are withdrawn"
      },
      "Lit(address,uint256,uint256)": {
        "notice": "Emitted when a user uses the light up feature"
      },
      "StageConfigUpdated(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Emitted when stage configuration is updated"
      },
      "StageConstantsUpdated(string,uint256)": {
        "notice": "Emitted when stage constants are updated"
      },
      "StageUpgraded(address,uint8)": {
        "notice": "Emitted when a user upgrades to a new stage"
      },
      "StewardCouncilAddressUpdated(address)": {
        "notice": "Emitted when the steward council address is updated"
      },
      "TokensPurchased(address,uint256,uint256,uint256)": {
        "notice": "Emitted when tokens are purchased"
      },
      "TokensSold(address,uint256,uint256,uint256)": {
        "notice": "Emitted when tokens are sold"
      },
      "WhitelistedCollectionAdded(address)": {
        "notice": "Emitted when a collection is added to whitelist"
      },
      "WhitelistedCollectionRemoved(address)": {
        "notice": "Emitted when a collection is removed from whitelist"
      }
    },
    "kind": "user",
    "methods": {
      "buyTokens(uint256)": {
        "notice": "Buy tokens using base token"
      },
      "canChangeExchangeRate()": {
        "notice": "Check if exchange rate can be changed"
      },
      "canChangeFeeRates()": {
        "notice": "Check if fee rates can be changed"
      },
      "getExchangeRate()": {
        "notice": "Get exchange rate"
      },
      "getFeeConfig()": {
        "notice": "Get fee configuration"
      },
      "getFirstValidCollection(address)": {
        "notice": "Get the whitelisted collection for the first valid key a user has"
      },
      "getStageConfig(uint8)": {
        "notice": "Get stage configuration"
      },
      "getStageConstants()": {
        "notice": "Get stage constants"
      },
      "getSystemState()": {
        "notice": "Get system state"
      },
      "getTokenConfig()": {
        "notice": "Get token configuration"
      },
      "getUserState(address)": {
        "notice": "Get user state"
      },
      "getWhitelistedCollections()": {
        "notice": "Get all whitelisted collections"
      },
      "hasValidKey(address)": {
        "notice": "Check if user has a valid NFT key"
      },
      "initializeWhitelistedCollections(address[])": {
        "notice": "Initialize the whitelisted collections "
      },
      "lightUp()": {
        "notice": "Increase user's fuel by burning tokens"
      },
      "sellTokens(uint256)": {
        "notice": "Sell tokens to receive base token"
      },
      "setCooldownConfig(uint256,uint256)": {
        "notice": "Updates the fee configuration"
      },
      "setDevAddress(address)": {
        "notice": "Set new developer address"
      },
      "setExchangeRate(uint256)": {
        "notice": "Set new exchange rate"
      },
      "setFeeRates(uint256,uint256)": {
        "notice": "Set new fee rates"
      },
      "setStageConfig(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Update stage configuration"
      },
      "upgradeStage()": {
        "notice": "Upgrade user to next stage when requirements are met"
      },
      "withdrawFees()": {
        "notice": "Withdraw accumulated fees"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1083,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 964,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2331,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "stageConstants",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(StageConstants)4005_storage"
      },
      {
        "astId": 2334,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "feeConfig",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(FeeConfig)4034_storage"
      },
      {
        "astId": 2337,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "tokenConfig",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(TokenConfig)4044_storage"
      },
      {
        "astId": 2340,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "systemState",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(SystemState)4060_storage"
      },
      {
        "astId": 2343,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "whitelistedCollections",
        "offset": 0,
        "slot": "23",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2348,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "userStates",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_struct(UserState)4020_storage)"
      },
      {
        "astId": 2354,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "stageConfig",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_enum(UserStage)3977,t_struct(StageConfig)3995_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)229": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(UserStage)3977": {
        "encoding": "inplace",
        "label": "enum IDGTokenVendor.UserStage",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserState)4020_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDGTokenVendor.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)4020_storage"
      },
      "t_mapping(t_enum(UserStage)3977,t_struct(StageConfig)3995_storage)": {
        "encoding": "mapping",
        "key": "t_enum(UserStage)3977",
        "label": "mapping(enum IDGTokenVendor.UserStage => struct IDGTokenVendor.StageConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(StageConfig)3995_storage"
      },
      "t_struct(FeeConfig)4034_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.FeeConfig",
        "members": [
          {
            "astId": 4023,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "maxFeeBps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4025,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "minFeeBps",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4027,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "buyFeeBps",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4029,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "sellFeeBps",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4031,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "rateChangeCooldown",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4033,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "appChangeCooldown",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(StageConfig)3995_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.StageConfig",
        "members": [
          {
            "astId": 3980,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "burnAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3982,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "upgradePointsThreshold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3984,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "upgradeFuelThreshold",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3986,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "fuelRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3988,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "pointsAwarded",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3990,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "qualifyingBuyThreshold",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3992,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "maxSellBps",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3994,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "dailyLimitMultiplier",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(StageConstants)4005_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.StageConstants",
        "members": [
          {
            "astId": 3998,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "maxSellCooldown",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4000,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "dailyWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4002,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "minBuyAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4004,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "minSellAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SystemState)4060_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.SystemState",
        "members": [
          {
            "astId": 4047,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "baseTokenFees",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4049,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "swapTokenFees",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4051,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "lastRateChangeTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4053,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "lastFeeChangeTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4055,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "devAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4057,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "stewardCouncil",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 4059,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "lastDevAddressChangeTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(TokenConfig)4044_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.TokenConfig",
        "members": [
          {
            "astId": 4038,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "baseToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)229"
          },
          {
            "astId": 4041,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "swapToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)229"
          },
          {
            "astId": 4043,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "exchangeRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserState)4020_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.UserState",
        "members": [
          {
            "astId": 4009,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "stage",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(UserStage)3977"
          },
          {
            "astId": 4011,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "points",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4013,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "fuel",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4015,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "lastStage3MaxSale",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4017,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "dailySoldAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4019,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "dailyWindowStart",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}