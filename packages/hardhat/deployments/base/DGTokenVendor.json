{
  "address": "0x2Ef7DeC913e4127Fd0f94B32eeAd23ee63143598",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialExchangeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AppChangeCooldownStillActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollectionAddressNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollectionAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsMaxWhitelistedCollections",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeLockStillActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDevAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeBPS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoValidKeyForUserFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RateLockStillActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedCaller",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "ExchangeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBuyFeeBPS",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSellFeeBPS",
          "type": "uint256"
        }
      ],
      "name": "FeeRatesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapTokenFees",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "TokensSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        }
      ],
      "name": "WhitelistedCollectionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        }
      ],
      "name": "WhitelistedCollectionRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APP_CHANGE_COOLDOWN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WHITELISTED_COLLECTIONS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATE_CHANGE_COOLDOWN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        }
      ],
      "name": "addWhitelistedCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collections",
          "type": "address[]"
        }
      ],
      "name": "batchAddWhitelistedCollections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyFeeBPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canChangeExchangeRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canChangeFeeRates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFirstValidKeyCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelistedCollections",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasValidKey",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDevAddressChangeTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeChangeTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRateChangeTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellFeeBPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDevAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "setExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBuyFeeBPS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSellFeeBPS",
          "type": "uint256"
        }
      ],
      "name": "setFeeRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTokenFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1e2325073ba51e1a69a8ffc441114245dcb7c0c42fe2ddd10d8502863cf12ac2",
  "receipt": {
    "to": null,
    "from": "0x57a79bFB16155303E77E12beB1137803F3D42326",
    "contractAddress": "0x2Ef7DeC913e4127Fd0f94B32eeAd23ee63143598",
    "transactionIndex": 102,
    "gasUsed": "1679380",
    "logsBloom": "0x
    "blockHash": "0xf87924083cbe9827b1b7bafc53fc4e6af701f8762e2e1b5e85005d23c5a628f1",
    "transactionHash": "0x1e2325073ba51e1a69a8ffc441114245dcb7c0c42fe2ddd10d8502863cf12ac2",
    "logs": [
      {
        "transactionIndex": 102,
        "blockNumber": 28172182,
        "transactionHash": "0x1e2325073ba51e1a69a8ffc441114245dcb7c0c42fe2ddd10d8502863cf12ac2",
        "address": "0x2Ef7DeC913e4127Fd0f94B32eeAd23ee63143598",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000057a79bfb16155303e77e12beb1137803f3d42326"
        ],
        "data": "0x",
        "logIndex": 279,
        "blockHash": "0xf87924083cbe9827b1b7bafc53fc4e6af701f8762e2e1b5e85005d23c5a628f1"
      }
    ],
    "blockNumber": 28172182,
    "cumulativeGasUsed": "31942067",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaC27fa800955849d6D17cC8952Ba9dD6EAA66187",
    "0x04A79EA9dAF3F3FbA76e7CF231829f9cbAC8d9f1",
    10,
    "0xca7632327567796e51920f6b16373e92c7823854"
  ],
  "numDeployments": 1,
  "solcInputHash": "065964863f821b31a189fad4d173f95d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AppChangeCooldownStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionAddressNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxWhitelistedCollections\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeLockStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDevAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeBPS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoValidKeyForUserFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateLockStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyFeeBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellFeeBPS\",\"type\":\"uint256\"}],\"name\":\"FeeRatesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokenFees\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"WhitelistedCollectionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"WhitelistedCollectionRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APP_CHANGE_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WHITELISTED_COLLECTIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_CHANGE_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"addWhitelistedCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"}],\"name\":\"batchAddWhitelistedCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canChangeExchangeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canChangeFeeRates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFirstValidKeyCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedCollections\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasValidKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDevAddressChangeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeChangeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRateChangeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"removeWhitelistedCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFeeBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellFeeBPS\",\"type\":\"uint256\"}],\"name\":\"setFeeRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addWhitelistedCollection(address)\":{\"details\":\"Add a collection to the whitelist\",\"params\":{\"collectionAddress\":\"Address of the NFT collection to add\"}},\"batchAddWhitelistedCollections(address[])\":{\"details\":\"Add multiple collections to the whitelist\",\"params\":{\"collections\":\"Array of collection addresses to add\"}},\"buyTokens(uint256)\":{\"details\":\"Buy swap tokens using base tokens\",\"params\":{\"amount\":\"Amount of base tokens to spend\"}},\"canChangeExchangeRate()\":{\"details\":\"Check if a user can change the exchange rate\",\"returns\":{\"_0\":\"True if the rate change cooldown has passed, false otherwise\"}},\"canChangeFeeRates()\":{\"details\":\"Check if fee rates can be changed\",\"returns\":{\"_0\":\"True if the fee change cooldown has passed, false otherwise\"}},\"getFirstValidKeyCollection(address)\":{\"details\":\"Returns the address of the first collection for which the user has a valid key\",\"params\":{\"user\":\"Address of the user to check\"},\"returns\":{\"_0\":\"The address of the first valid collection, or address(0) if none found\"}},\"getWhitelistedCollections()\":{\"details\":\"Get all whitelisted collections\",\"returns\":{\"_0\":\"Array of whitelisted collection addresses\"}},\"hasValidKey(address)\":{\"details\":\"Check if a user has a valid key to any of the whitelisted collections\",\"params\":{\"user\":\"Address of the user to check\"},\"returns\":{\"_0\":\"True if the user has a valid key, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeWhitelistedCollection(address)\":{\"details\":\"Remove a collection from the whitelist\",\"params\":{\"collectionAddress\":\"Address of the NFT collection to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sellTokens(uint256)\":{\"details\":\"Sell swap tokens for base tokens\",\"params\":{\"amount\":\"Amount of swap tokens to sell\"}},\"setExchangeRate(uint256)\":{\"details\":\"Update the exchange rate (only once per 90 days)\",\"params\":{\"newRate\":\"New exchange rate\"}},\"setFeeRates(uint256,uint256)\":{\"details\":\"Update both buy and sell fee rates (only once per 90 days)\",\"params\":{\"newBuyFeeBPS\":\"New buy fee in basis points\",\"newSellFeeBPS\":\"New sell fee in basis points\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawETH()\":{\"details\":\"Withdraw ETH from the contract (only admin)\"},\"withdrawFees()\":{\"details\":\"Withdraw accumulated fees to a specified address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DGTokenVendor.sol\":\"DGTokenVendor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/DGTokenVendor.sol\":{\"content\":\"pragma solidity 0.8.20; //Do not change the solidity version as it negatively impacts submission grading\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n// Custom error definitions\\nerror ExceedsMaxWhitelistedCollections();\\nerror CollectionAddressNotFound();\\nerror CollectionAlreadyAdded();\\nerror NoValidKeyForUserFound();\\nerror TokenTransferFailed();\\nerror RateLockStillActive();\\nerror FeeLockStillActive();\\nerror InsufficientAllowance();\\nerror ETHTransferFailed();\\nerror InvalidFeeBPS();\\nerror InvalidDevAddress();\\nerror AppChangeCooldownStillActive();\\nerror UnauthorizedCaller();\\n\\ninterface IPublicLock {\\n    function getHasValidKey(address _user) external view returns (bool);\\n\\n    function tokenOfOwnerByIndex(address _user, uint256 _index) external view returns (uint256);\\n}\\n\\ncontract DGTokenVendor is Ownable, ReentrancyGuard {\\n    // Constants\\n    uint256 public constant MAX_WHITELISTED_COLLECTIONS = 10;\\n    uint256 public constant BASIS_POINTS = 10000; // 100% = 10000 basis points\\n    uint256 public constant MAX_FEE_BPS = 1000; // Maximum fee of 10% (1000 basis points)\\n    uint256 public constant RATE_CHANGE_COOLDOWN = 90 days;\\n    uint256 public constant APP_CHANGE_COOLDOWN = 100 days;\\n    address public DEV_ADDRESS;\\n    uint64 public constant VERSION = 1;\\n    string public constant NAME = \\\"DGTokenVendorV1\\\";\\n\\n    // Token addresses\\n    IERC20 public baseToken;\\n    IERC20 public swapToken;\\n\\n    uint256 public lastDevAddressChangeTimestamp;\\n\\n    // Exchange rate (how many swap tokens per base token)\\n    uint256 public exchangeRate;\\n    uint256 public lastRateChangeTimestamp;\\n\\n    // Fee settings\\n    uint256 public buyFeeBPS; // Buy fee in basis points\\n    uint256 public sellFeeBPS; // Sell fee in basis points\\n    uint256 public lastFeeChangeTimestamp;\\n\\n    // Array of whitelisted NFT collection addresses\\n    address[] private whitelistedCollections;\\n\\n    // Fee tracking\\n    uint256 public baseTokenFees;\\n    uint256 public swapTokenFees;\\n\\n    // Events\\n    event TokensPurchased(address indexed buyer, uint256 baseTokenAmount, uint256 swapTokenAmount, uint256 fee);\\n    event TokensSold(address indexed seller, uint256 swapTokenAmount, uint256 baseTokenAmount, uint256 fee);\\n    event WhitelistedCollectionAdded(address indexed collectionAddress);\\n    event WhitelistedCollectionRemoved(address indexed collectionAddress);\\n    event ExchangeRateUpdated(uint256 newRate);\\n    event FeesWithdrawn(address indexed to, uint256 baseTokenFees, uint256 swapTokenFees);\\n    event ETHWithdrawn(address indexed to, uint256 amount);\\n    event FeeRatesUpdated(uint256 newBuyFeeBPS, uint256 newSellFeeBPS);\\n\\n    constructor(\\n        address _baseToken,\\n        address _swapToken,\\n        uint256 _initialExchangeRate,\\n        address _devAddress\\n    ) Ownable(msg.sender) {\\n        // Initialize Dapp state\\n        baseToken = IERC20(_baseToken);\\n        swapToken = IERC20(_swapToken);\\n        exchangeRate = _initialExchangeRate;\\n        lastRateChangeTimestamp = block.timestamp;\\n        buyFeeBPS = 100; // 1% initial buy fee\\n        sellFeeBPS = 200; // 2% initial sell fee\\n        lastFeeChangeTimestamp = block.timestamp;\\n        DEV_ADDRESS = _devAddress;\\n        lastDevAddressChangeTimestamp = block.timestamp;\\n    }\\n\\n    modifier onlyNFTHolder() {\\n        if (!hasValidKey(msg.sender)) revert NoValidKeyForUserFound();\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        if (!(msg.sender == owner() || msg.sender == DEV_ADDRESS)) revert UnauthorizedCaller();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Buy swap tokens using base tokens\\n     * @param amount Amount of base tokens to spend\\n     */\\n    function buyTokens(uint256 amount) external nonReentrant onlyNFTHolder {\\n        // Calculate fee using current buyFeeBPS\\n        uint256 fee = (amount * buyFeeBPS) / BASIS_POINTS;\\n        uint256 tokenToBuyAmountAfterFee = amount - fee;\\n        // Calculate swap tokens to receive\\n        uint256 tokenToBuyAmount = tokenToBuyAmountAfterFee * exchangeRate;\\n\\n        // Update fee tracking\\n        baseTokenFees += fee;\\n\\n        // Transfer base tokens from user to contract\\n        bool baseTransferSuccess = baseToken.transferFrom(msg.sender, address(this), amount);\\n        if (!baseTransferSuccess) revert TokenTransferFailed();\\n\\n        // Transfer swap tokens to user\\n        bool swapTransferSuccess = swapToken.transfer(msg.sender, tokenToBuyAmount);\\n        if (!swapTransferSuccess) revert TokenTransferFailed();\\n\\n        emit TokensPurchased(msg.sender, amount, tokenToBuyAmount, fee);\\n    }\\n\\n    /**\\n     * @dev Sell swap tokens for base tokens\\n     * @param amount Amount of swap tokens to sell\\n     */\\n    function sellTokens(uint256 amount) external nonReentrant onlyNFTHolder {\\n        // Calculate fee using current sellFeeBPS\\n        uint256 fee = (amount * sellFeeBPS) / BASIS_POINTS;\\n        uint256 tokensAmountAfterFee = amount - fee;\\n        // Calculate base tokens to receive\\n        uint256 tokensToTransferAmount = tokensAmountAfterFee / exchangeRate;\\n\\n        // Update fee tracking\\n        swapTokenFees += fee;\\n\\n        // Transfer swap tokens from user to contract\\n        bool swapTransferSuccess = swapToken.transferFrom(msg.sender, address(this), amount);\\n        if (!swapTransferSuccess) revert TokenTransferFailed();\\n\\n        // Transfer base tokens to user\\n        bool baseTransferSuccess = baseToken.transfer(msg.sender, tokensToTransferAmount);\\n        if (!baseTransferSuccess) revert TokenTransferFailed();\\n\\n        emit TokensSold(msg.sender, amount, tokensToTransferAmount, fee);\\n    }\\n\\n    // Admin Functions\\n\\n    /**\\n     * @dev Update the exchange rate (only once per 90 days)\\n     * @param newRate New exchange rate\\n     */\\n    function setExchangeRate(uint256 newRate) external onlyOwner {\\n        if (block.timestamp < lastRateChangeTimestamp + RATE_CHANGE_COOLDOWN) revert RateLockStillActive();\\n\\n        exchangeRate = newRate;\\n        lastRateChangeTimestamp = block.timestamp;\\n\\n        emit ExchangeRateUpdated(newRate);\\n    }\\n\\n    /**\\n     * @dev Update both buy and sell fee rates (only once per 90 days)\\n     * @param newBuyFeeBPS New buy fee in basis points\\n     * @param newSellFeeBPS New sell fee in basis points\\n     */\\n    function setFeeRates(uint256 newBuyFeeBPS, uint256 newSellFeeBPS) external onlyOwner {\\n        // Check cooldown period\\n        if (block.timestamp < lastFeeChangeTimestamp + APP_CHANGE_COOLDOWN) revert FeeLockStillActive();\\n\\n        // Validate new fee rates\\n        if (newBuyFeeBPS > MAX_FEE_BPS || newSellFeeBPS > MAX_FEE_BPS) revert InvalidFeeBPS();\\n\\n        buyFeeBPS = newBuyFeeBPS;\\n        sellFeeBPS = newSellFeeBPS;\\n        lastFeeChangeTimestamp = block.timestamp;\\n\\n        emit FeeRatesUpdated(newBuyFeeBPS, newSellFeeBPS);\\n    }\\n\\n    /**\\n     * @dev Check if fee rates can be changed\\n     * @return True if the fee change cooldown has passed, false otherwise\\n     */\\n    function canChangeFeeRates() external view returns (bool) {\\n        return block.timestamp >= lastFeeChangeTimestamp + APP_CHANGE_COOLDOWN;\\n    }\\n\\n    function setDevAddress(address newDevAddress) external onlyOwner {\\n        if (newDevAddress == address(0)) revert InvalidDevAddress();\\n        if (block.timestamp < lastDevAddressChangeTimestamp + APP_CHANGE_COOLDOWN)\\n            revert AppChangeCooldownStillActive();\\n        DEV_ADDRESS = newDevAddress;\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated fees to a specified address\\n     */\\n    function withdrawFees() external nonReentrant onlyAuthorized {\\n        address to = DEV_ADDRESS;\\n        uint256 baseTokenFeesToWithdraw = baseTokenFees;\\n        uint256 swapTokenFeesToWithdraw = swapTokenFees;\\n\\n        // Reset fee tracking\\n        baseTokenFees = 0;\\n        swapTokenFees = 0;\\n\\n        // Transfer base token fees\\n        if (baseTokenFeesToWithdraw > 0) {\\n            bool baseTransferSuccess = baseToken.transfer(to, baseTokenFeesToWithdraw);\\n            if (!baseTransferSuccess) revert TokenTransferFailed();\\n        }\\n\\n        // Transfer swap token fees\\n        if (swapTokenFeesToWithdraw > 0) {\\n            bool swapTransferSuccess = swapToken.transfer(to, swapTokenFeesToWithdraw);\\n            if (!swapTransferSuccess) revert TokenTransferFailed();\\n        }\\n\\n        emit FeesWithdrawn(to, baseTokenFeesToWithdraw, swapTokenFeesToWithdraw);\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH from the contract (only admin)\\n     */\\n    function withdrawETH() external nonReentrant onlyAuthorized {\\n        address to = DEV_ADDRESS;\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n        if (!success) revert ETHTransferFailed();\\n\\n        emit ETHWithdrawn(to, amount);\\n    }\\n\\n    // Whitelist Management Functions\\n\\n    /**\\n     * @dev Add a collection to the whitelist\\n     * @param collectionAddress Address of the NFT collection to add\\n     */\\n    function addWhitelistedCollection(address collectionAddress) external onlyOwner {\\n        if (whitelistedCollections.length >= MAX_WHITELISTED_COLLECTIONS) revert ExceedsMaxWhitelistedCollections();\\n        if (_isCollectionWhitelisted(collectionAddress)) revert CollectionAlreadyAdded();\\n\\n        whitelistedCollections.push(collectionAddress);\\n        emit WhitelistedCollectionAdded(collectionAddress);\\n    }\\n\\n    /**\\n     * @dev Add multiple collections to the whitelist\\n     * @param collections Array of collection addresses to add\\n     */\\n    function batchAddWhitelistedCollections(address[] calldata collections) external onlyOwner {\\n        if (whitelistedCollections.length + collections.length > MAX_WHITELISTED_COLLECTIONS)\\n            revert ExceedsMaxWhitelistedCollections();\\n\\n        for (uint256 i = 0; i < collections.length; i++) {\\n            if (!_isCollectionWhitelisted(collections[i])) {\\n                whitelistedCollections.push(collections[i]);\\n                emit WhitelistedCollectionAdded(collections[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove a collection from the whitelist\\n     * @param collectionAddress Address of the NFT collection to remove\\n     */\\n    function removeWhitelistedCollection(address collectionAddress) external onlyOwner {\\n        uint256 index = _findCollectionIndex(collectionAddress);\\n        if (index >= whitelistedCollections.length) revert CollectionAddressNotFound();\\n\\n        // Swap and pop pattern for efficient removal\\n        whitelistedCollections[index] = whitelistedCollections[whitelistedCollections.length - 1];\\n        whitelistedCollections.pop();\\n\\n        emit WhitelistedCollectionRemoved(collectionAddress);\\n    }\\n\\n    // Helper Functions\\n\\n    /**\\n     * @dev Check if a user has a valid key to any of the whitelisted collections\\n     * @param user Address of the user to check\\n     * @return True if the user has a valid key, false otherwise\\n     */\\n    function hasValidKey(address user) public view returns (bool) {\\n        if (whitelistedCollections.length == 0) return false;\\n\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\n            IPublicLock lock = IPublicLock(whitelistedCollections[i]);\\n            if (lock.getHasValidKey(user)) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the first collection for which the user has a valid key\\n     * @param user Address of the user to check\\n     * @return The address of the first valid collection, or address(0) if none found\\n     */\\n    function getFirstValidKeyCollection(address user) public view returns (address) {\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\n            if (IPublicLock(whitelistedCollections[i]).getHasValidKey(user)) {\\n                return whitelistedCollections[i];\\n            }\\n        }\\n        return address(0); // Return address(0) if no valid lock is found\\n    }\\n\\n    /**\\n     * @dev Check if a collection is already whitelisted\\n     * @param collectionAddress Address of the collection to check\\n     * @return True if the collection is whitelisted, false otherwise\\n     */\\n    function _isCollectionWhitelisted(address collectionAddress) internal view returns (bool) {\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\n            if (whitelistedCollections[i] == collectionAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Find the index of a collection in the whitelist\\n     * @param collectionAddress Address of the collection to find\\n     * @return The index of the collection, or the length of the array if not found\\n     */\\n    function _findCollectionIndex(address collectionAddress) internal view returns (uint256) {\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\n            if (whitelistedCollections[i] == collectionAddress) {\\n                return i;\\n            }\\n        }\\n        return whitelistedCollections.length; // Not found\\n    }\\n\\n    /**\\n     * @dev Get all whitelisted collections\\n     * @return Array of whitelisted collection addresses\\n     */\\n    function getWhitelistedCollections() external view returns (address[] memory) {\\n        return whitelistedCollections;\\n    }\\n\\n    /**\\n     * @dev Check if a user can change the exchange rate\\n     * @return True if the rate change cooldown has passed, false otherwise\\n     */\\n    function canChangeExchangeRate() external view returns (bool) {\\n        return block.timestamp >= lastRateChangeTimestamp + RATE_CHANGE_COOLDOWN;\\n    }\\n\\n    /**\\n     * @dev Receive function to allow the contract to receive ETH\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x7ec9171c0344f89230818c70b9f1671d88ff312bf781b96718436342e8273b9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a7538038062001a75833981016040819052620000349162000139565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006681620000cc565b5060018055600380546001600160a01b03199081166001600160a01b039687161790915560048054821694861694909417909355600691909155426007819055606460085560c8600955600a81905560028054909316919093161790556005556200018d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013457600080fd5b919050565b600080600080608085870312156200015057600080fd5b6200015b856200011c565b93506200016b602086016200011c565b92506040850151915062000182606086016200011c565b905092959194509250565b6118d8806200019d6000396000f3fe6080604052600436106102135760003560e01c8063ab65d99711610118578063d55be8c6116100a0578063e086e5ec1161006f578063e086e5ec146105c1578063e1f1c4a7146105d6578063f2fde38b146105ec578063feaca5831461060c578063ffa1ad741461062c57600080fd5b8063d55be8c614610555578063d70c401b1461056b578063db068e0e14610581578063dc73e49c146105a157600080fd5b8063c55dae63116100e7578063c55dae63146104c9578063c8ade8c8146104e9578063ce3d52d7146104ff578063d0d41fe114610515578063d18e629c1461053557600080fd5b8063ab65d9971461045c578063abd6dfb01461047c578063ba5d05e31461049c578063c53b368a146104b357600080fd5b806362553e141161019b578063883a4c901161016a578063883a4c90146103a95780638b0279d2146103bf5780638ca8cc9b146103e15780638da5cb5b146103f6578063a3f4df7e1461041457600080fd5b806362553e141461033d5780636c11bcd31461035d5780636eaa7ba21461037d578063715018a61461039457600080fd5b8063376ce13e116101e2578063376ce13e146102af5780633ba0b9a9146102c5578063476343ee146102db57806349fea517146102f05780635639e8cf1461030557600080fd5b806304898ad71461021f5780632f036c901461024157806330516a031461026b5780633610724e1461028f57600080fd5b3661021a57005b600080fd5b34801561022b57600080fd5b5061023f61023a366004611645565b61065a565b005b34801561024d57600080fd5b5061025661079f565b60405190151581526020015b60405180910390f35b34801561027757600080fd5b5061028160055481565b604051908152602001610262565b34801561029b57600080fd5b5061023f6102aa3660046116ba565b6107ba565b3480156102bb57600080fd5b5061028160085481565b3480156102d157600080fd5b5061028160065481565b3480156102e757600080fd5b5061023f6109ca565b3480156102fc57600080fd5b50610281600a81565b34801561031157600080fd5b50600254610325906001600160a01b031681565b6040516001600160a01b039091168152602001610262565b34801561034957600080fd5b5061023f6103583660046116d3565b610bcb565b34801561036957600080fd5b5061023f6103783660046116ba565b610ce8565b34801561038957600080fd5b506102816276a70081565b3480156103a057600080fd5b5061023f610ee3565b3480156103b557600080fd5b50610281600d5481565b3480156103cb57600080fd5b506103d4610ef5565b6040516102629190611703565b3480156103ed57600080fd5b50610256610f57565b34801561040257600080fd5b506000546001600160a01b0316610325565b34801561042057600080fd5b5061044f6040518060400160405280600f81526020016e4447546f6b656e56656e646f72563160881b81525081565b6040516102629190611750565b34801561046857600080fd5b506103256104773660046116d3565b610f6a565b34801561048857600080fd5b506102566104973660046116d3565b611051565b3480156104a857600080fd5b506102816283d60081565b3480156104bf57600080fd5b5061028160095481565b3480156104d557600080fd5b50600354610325906001600160a01b031681565b3480156104f557600080fd5b50610281600a5481565b34801561050b57600080fd5b5061028160075481565b34801561052157600080fd5b5061023f6105303660046116d3565b611123565b34801561054157600080fd5b5061023f6105503660046116d3565b6111a5565b34801561056157600080fd5b506102816103e881565b34801561057757600080fd5b50610281600c5481565b34801561058d57600080fd5b5061023f61059c3660046116ba565b61126f565b3480156105ad57600080fd5b50600454610325906001600160a01b031681565b3480156105cd57600080fd5b5061023f6112e7565b3480156105e257600080fd5b5061028161271081565b3480156105f857600080fd5b5061023f6106073660046116d3565b6113e4565b34801561061857600080fd5b5061023f61062736600461179e565b611424565b34801561063857600080fd5b50610641600181565b60405167ffffffffffffffff9091168152602001610262565b6106626114d7565b600b54600a906106739083906117d6565b111561069257604051630ef0d4a960e11b815260040160405180910390fd5b60005b8181101561079a576106cc8383838181106106b2576106b26117ef565b90506020020160208101906106c791906116d3565b611504565b61078857600b8383838181106106e4576106e46117ef565b90506020020160208101906106f991906116d3565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905582828281811061073d5761073d6117ef565b905060200201602081019061075291906116d3565b6001600160a01b03167f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9260405160405180910390a25b8061079281611805565b915050610695565b505050565b60006276a7006007546107b291906117d6565b421015905090565b6107c2611564565b6107cb33611051565b6107e85760405163e4c147b760e01b815260040160405180910390fd5b6000612710600854836107fb919061181e565b6108059190611835565b905060006108138284611857565b9050600060065482610825919061181e565b905082600c600082825461083991906117d6565b90915550506003546040516323b872dd60e01b8152336004820152306024820152604481018690526000916001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ba919061186a565b9050806108da5760405163022e258160e11b815260040160405180910390fd5b6004805460405163a9059cbb60e01b81523392810192909252602482018490526000916001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610931573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610955919061186a565b9050806109755760405163022e258160e11b815260040160405180910390fd5b604080518781526020810185905290810186905233907f0d1a0d5e3d583a0e92588799dd06e50fd78c07daf05f0cc06d7b848b1ca445f1906060015b60405180910390a250505050506109c760018055565b50565b6109d2611564565b6000546001600160a01b03163314806109f557506002546001600160a01b031633145b610a1257604051635c427cd960e01b815260040160405180910390fd5b600254600c8054600d80546000938490559290556001600160a01b0390921691908115610ad35760035460405163a9059cbb60e01b81526001600160a01b03858116600483015260248201859052600092169063a9059cbb906044016020604051808303816000875af1158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab1919061186a565b905080610ad15760405163022e258160e11b815260040160405180910390fd5b505b8015610b78576004805460405163a9059cbb60e01b81526001600160a01b0386811693820193909352602481018490526000929091169063a9059cbb906044016020604051808303816000875af1158015610b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b56919061186a565b905080610b765760405163022e258160e11b815260040160405180910390fd5b505b60408051838152602081018390526001600160a01b038516917fdeb5099d7943aa2b4c1142e5d53d2f7636aa8f7bd130ec79816f151572bcdf4591015b60405180910390a2505050610bc960018055565b565b610bd36114d7565b6000610bde8261158e565b600b549091508110610c03576040516387ad0f3f60e01b815260040160405180910390fd5b600b8054610c1390600190611857565b81548110610c2357610c236117ef565b600091825260209091200154600b80546001600160a01b039092169183908110610c4f57610c4f6117ef565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600b805480610c8e57610c8e61188c565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f0c1f38a01270cb49fbf915151e8a1908ccf738f8c3d79a1677f8fd879b56bdef91a25050565b610cf0611564565b610cf933611051565b610d165760405163e4c147b760e01b815260040160405180910390fd5b600061271060095483610d29919061181e565b610d339190611835565b90506000610d418284611857565b9050600060065482610d539190611835565b905082600d6000828254610d6791906117d6565b9091555050600480546040516323b872dd60e01b81523392810192909252306024830152604482018690526000916001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded919061186a565b905080610e0d5760405163022e258160e11b815260040160405180910390fd5b60035460405163a9059cbb60e01b8152336004820152602481018490526000916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e83919061186a565b905080610ea35760405163022e258160e11b815260040160405180910390fd5b604080518781526020810185905290810186905233907f6db63bebf1e6540277744df32846ebdb98385b1a73f2d5de49b28348add63f50906060016109b1565b610eeb6114d7565b610bc960006115f5565b6060600b805480602002602001604051908101604052809291908181526020018280548015610f4d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f2f575b5050505050905090565b60006283d600600a546107b291906117d6565b6000805b600b5481101561104857600b8181548110610f8b57610f8b6117ef565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03858116600483015290911690636d8ea5b490602401602060405180830381865afa158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611002919061186a565b1561103657600b818154811061101a5761101a6117ef565b6000918252602090912001546001600160a01b03169392505050565b8061104081611805565b915050610f6e565b50600092915050565b600b54600090810361106557506000919050565b60005b600b54811015611048576000600b8281548110611087576110876117ef565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03868116600483015290911691508190636d8ea5b490602401602060405180830381865afa1580156110dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611101919061186a565b15611110575060019392505050565b508061111b81611805565b915050611068565b61112b6114d7565b6001600160a01b03811661115257604051636a37fde960e01b815260040160405180910390fd5b6283d60060055461116391906117d6565b421015611183576040516326f4231b60e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6111ad6114d7565b600b54600a116111d057604051630ef0d4a960e11b815260040160405180910390fd5b6111d981611504565b156111f757604051633b461ab760e01b815260040160405180910390fd5b600b805460018101825560009182527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b03841690811790915560405190917f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9291a250565b6112776114d7565b6276a70060075461128891906117d6565b4210156112a857604051634269523560e01b815260040160405180910390fd5b6006819055426007556040518181527f388f446e9526fe5c9af20a5919b342370c8a7c0cb05245afe1e545658fa3cdba9060200160405180910390a150565b6112ef611564565b6000546001600160a01b031633148061131257506002546001600160a01b031633145b61132f57604051635c427cd960e01b815260040160405180910390fd5b6002546040516001600160a01b03909116904790600090839083908381818185875af1925050503d8060008114611382576040519150601f19603f3d011682016040523d82523d6000602084013e611387565b606091505b50509050806113a95760405163b12d13eb60e01b815260040160405180910390fd5b826001600160a01b03167f94b2de810873337ed265c5f8cf98c9cffefa06b8607f9a2f1fbaebdfbcfbef1c83604051610bb591815260200190565b6113ec6114d7565b6001600160a01b03811661141b57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6109c7816115f5565b61142c6114d7565b6283d600600a5461143d91906117d6565b42101561145d576040516320c2ffdb60e21b815260040160405180910390fd5b6103e882118061146e57506103e881115b1561148c5760405163530da5b960e01b815260040160405180910390fd5b6008829055600981905542600a5560408051838152602081018390527f4f672c50736ba0fe8a4825ecfde8bcd931727422a77ac89af44fccce2746e0b3910160405180910390a15050565b6000546001600160a01b03163314610bc95760405163118cdaa760e01b8152336004820152602401611412565b6000805b600b5481101561104857826001600160a01b0316600b828154811061152f5761152f6117ef565b6000918252602090912001546001600160a01b0316036115525750600192915050565b8061155c81611805565b915050611508565b60026001540361158757604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000805b600b548110156115eb57826001600160a01b0316600b82815481106115b9576115b96117ef565b6000918252602090912001546001600160a01b0316036115d95792915050565b806115e381611805565b915050611592565b5050600b54919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806020838503121561165857600080fd5b823567ffffffffffffffff8082111561167057600080fd5b818501915085601f83011261168457600080fd5b81358181111561169357600080fd5b8660208260051b85010111156116a857600080fd5b60209290920196919550909350505050565b6000602082840312156116cc57600080fd5b5035919050565b6000602082840312156116e557600080fd5b81356001600160a01b03811681146116fc57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156117445783516001600160a01b03168352928401929184019160010161171f565b50909695505050505050565b600060208083528351808285015260005b8181101561177d57858101830151858201604001528201611761565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156117b157600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b808201808211156117e9576117e96117c0565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201611817576118176117c0565b5060010190565b80820281158282048414176117e9576117e96117c0565b60008261185257634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156117e9576117e96117c0565b60006020828403121561187c57600080fd5b815180151581146116fc57600080fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220dcbc0b06f0a306d198538891a1207246dc2c8a99a2fc1a56768298272bc38f6264736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102135760003560e01c8063ab65d99711610118578063d55be8c6116100a0578063e086e5ec1161006f578063e086e5ec146105c1578063e1f1c4a7146105d6578063f2fde38b146105ec578063feaca5831461060c578063ffa1ad741461062c57600080fd5b8063d55be8c614610555578063d70c401b1461056b578063db068e0e14610581578063dc73e49c146105a157600080fd5b8063c55dae63116100e7578063c55dae63146104c9578063c8ade8c8146104e9578063ce3d52d7146104ff578063d0d41fe114610515578063d18e629c1461053557600080fd5b8063ab65d9971461045c578063abd6dfb01461047c578063ba5d05e31461049c578063c53b368a146104b357600080fd5b806362553e141161019b578063883a4c901161016a578063883a4c90146103a95780638b0279d2146103bf5780638ca8cc9b146103e15780638da5cb5b146103f6578063a3f4df7e1461041457600080fd5b806362553e141461033d5780636c11bcd31461035d5780636eaa7ba21461037d578063715018a61461039457600080fd5b8063376ce13e116101e2578063376ce13e146102af5780633ba0b9a9146102c5578063476343ee146102db57806349fea517146102f05780635639e8cf1461030557600080fd5b806304898ad71461021f5780632f036c901461024157806330516a031461026b5780633610724e1461028f57600080fd5b3661021a57005b600080fd5b34801561022b57600080fd5b5061023f61023a366004611645565b61065a565b005b34801561024d57600080fd5b5061025661079f565b60405190151581526020015b60405180910390f35b34801561027757600080fd5b5061028160055481565b604051908152602001610262565b34801561029b57600080fd5b5061023f6102aa3660046116ba565b6107ba565b3480156102bb57600080fd5b5061028160085481565b3480156102d157600080fd5b5061028160065481565b3480156102e757600080fd5b5061023f6109ca565b3480156102fc57600080fd5b50610281600a81565b34801561031157600080fd5b50600254610325906001600160a01b031681565b6040516001600160a01b039091168152602001610262565b34801561034957600080fd5b5061023f6103583660046116d3565b610bcb565b34801561036957600080fd5b5061023f6103783660046116ba565b610ce8565b34801561038957600080fd5b506102816276a70081565b3480156103a057600080fd5b5061023f610ee3565b3480156103b557600080fd5b50610281600d5481565b3480156103cb57600080fd5b506103d4610ef5565b6040516102629190611703565b3480156103ed57600080fd5b50610256610f57565b34801561040257600080fd5b506000546001600160a01b0316610325565b34801561042057600080fd5b5061044f6040518060400160405280600f81526020016e4447546f6b656e56656e646f72563160881b81525081565b6040516102629190611750565b34801561046857600080fd5b506103256104773660046116d3565b610f6a565b34801561048857600080fd5b506102566104973660046116d3565b611051565b3480156104a857600080fd5b506102816283d60081565b3480156104bf57600080fd5b5061028160095481565b3480156104d557600080fd5b50600354610325906001600160a01b031681565b3480156104f557600080fd5b50610281600a5481565b34801561050b57600080fd5b5061028160075481565b34801561052157600080fd5b5061023f6105303660046116d3565b611123565b34801561054157600080fd5b5061023f6105503660046116d3565b6111a5565b34801561056157600080fd5b506102816103e881565b34801561057757600080fd5b50610281600c5481565b34801561058d57600080fd5b5061023f61059c3660046116ba565b61126f565b3480156105ad57600080fd5b50600454610325906001600160a01b031681565b3480156105cd57600080fd5b5061023f6112e7565b3480156105e257600080fd5b5061028161271081565b3480156105f857600080fd5b5061023f6106073660046116d3565b6113e4565b34801561061857600080fd5b5061023f61062736600461179e565b611424565b34801561063857600080fd5b50610641600181565b60405167ffffffffffffffff9091168152602001610262565b6106626114d7565b600b54600a906106739083906117d6565b111561069257604051630ef0d4a960e11b815260040160405180910390fd5b60005b8181101561079a576106cc8383838181106106b2576106b26117ef565b90506020020160208101906106c791906116d3565b611504565b61078857600b8383838181106106e4576106e46117ef565b90506020020160208101906106f991906116d3565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905582828281811061073d5761073d6117ef565b905060200201602081019061075291906116d3565b6001600160a01b03167f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9260405160405180910390a25b8061079281611805565b915050610695565b505050565b60006276a7006007546107b291906117d6565b421015905090565b6107c2611564565b6107cb33611051565b6107e85760405163e4c147b760e01b815260040160405180910390fd5b6000612710600854836107fb919061181e565b6108059190611835565b905060006108138284611857565b9050600060065482610825919061181e565b905082600c600082825461083991906117d6565b90915550506003546040516323b872dd60e01b8152336004820152306024820152604481018690526000916001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ba919061186a565b9050806108da5760405163022e258160e11b815260040160405180910390fd5b6004805460405163a9059cbb60e01b81523392810192909252602482018490526000916001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610931573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610955919061186a565b9050806109755760405163022e258160e11b815260040160405180910390fd5b604080518781526020810185905290810186905233907f0d1a0d5e3d583a0e92588799dd06e50fd78c07daf05f0cc06d7b848b1ca445f1906060015b60405180910390a250505050506109c760018055565b50565b6109d2611564565b6000546001600160a01b03163314806109f557506002546001600160a01b031633145b610a1257604051635c427cd960e01b815260040160405180910390fd5b600254600c8054600d80546000938490559290556001600160a01b0390921691908115610ad35760035460405163a9059cbb60e01b81526001600160a01b03858116600483015260248201859052600092169063a9059cbb906044016020604051808303816000875af1158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab1919061186a565b905080610ad15760405163022e258160e11b815260040160405180910390fd5b505b8015610b78576004805460405163a9059cbb60e01b81526001600160a01b0386811693820193909352602481018490526000929091169063a9059cbb906044016020604051808303816000875af1158015610b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b56919061186a565b905080610b765760405163022e258160e11b815260040160405180910390fd5b505b60408051838152602081018390526001600160a01b038516917fdeb5099d7943aa2b4c1142e5d53d2f7636aa8f7bd130ec79816f151572bcdf4591015b60405180910390a2505050610bc960018055565b565b610bd36114d7565b6000610bde8261158e565b600b549091508110610c03576040516387ad0f3f60e01b815260040160405180910390fd5b600b8054610c1390600190611857565b81548110610c2357610c236117ef565b600091825260209091200154600b80546001600160a01b039092169183908110610c4f57610c4f6117ef565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600b805480610c8e57610c8e61188c565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f0c1f38a01270cb49fbf915151e8a1908ccf738f8c3d79a1677f8fd879b56bdef91a25050565b610cf0611564565b610cf933611051565b610d165760405163e4c147b760e01b815260040160405180910390fd5b600061271060095483610d29919061181e565b610d339190611835565b90506000610d418284611857565b9050600060065482610d539190611835565b905082600d6000828254610d6791906117d6565b9091555050600480546040516323b872dd60e01b81523392810192909252306024830152604482018690526000916001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded919061186a565b905080610e0d5760405163022e258160e11b815260040160405180910390fd5b60035460405163a9059cbb60e01b8152336004820152602481018490526000916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e83919061186a565b905080610ea35760405163022e258160e11b815260040160405180910390fd5b604080518781526020810185905290810186905233907f6db63bebf1e6540277744df32846ebdb98385b1a73f2d5de49b28348add63f50906060016109b1565b610eeb6114d7565b610bc960006115f5565b6060600b805480602002602001604051908101604052809291908181526020018280548015610f4d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f2f575b5050505050905090565b60006283d600600a546107b291906117d6565b6000805b600b5481101561104857600b8181548110610f8b57610f8b6117ef565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03858116600483015290911690636d8ea5b490602401602060405180830381865afa158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611002919061186a565b1561103657600b818154811061101a5761101a6117ef565b6000918252602090912001546001600160a01b03169392505050565b8061104081611805565b915050610f6e565b50600092915050565b600b54600090810361106557506000919050565b60005b600b54811015611048576000600b8281548110611087576110876117ef565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03868116600483015290911691508190636d8ea5b490602401602060405180830381865afa1580156110dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611101919061186a565b15611110575060019392505050565b508061111b81611805565b915050611068565b61112b6114d7565b6001600160a01b03811661115257604051636a37fde960e01b815260040160405180910390fd5b6283d60060055461116391906117d6565b421015611183576040516326f4231b60e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6111ad6114d7565b600b54600a116111d057604051630ef0d4a960e11b815260040160405180910390fd5b6111d981611504565b156111f757604051633b461ab760e01b815260040160405180910390fd5b600b805460018101825560009182527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b03841690811790915560405190917f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9291a250565b6112776114d7565b6276a70060075461128891906117d6565b4210156112a857604051634269523560e01b815260040160405180910390fd5b6006819055426007556040518181527f388f446e9526fe5c9af20a5919b342370c8a7c0cb05245afe1e545658fa3cdba9060200160405180910390a150565b6112ef611564565b6000546001600160a01b031633148061131257506002546001600160a01b031633145b61132f57604051635c427cd960e01b815260040160405180910390fd5b6002546040516001600160a01b03909116904790600090839083908381818185875af1925050503d8060008114611382576040519150601f19603f3d011682016040523d82523d6000602084013e611387565b606091505b50509050806113a95760405163b12d13eb60e01b815260040160405180910390fd5b826001600160a01b03167f94b2de810873337ed265c5f8cf98c9cffefa06b8607f9a2f1fbaebdfbcfbef1c83604051610bb591815260200190565b6113ec6114d7565b6001600160a01b03811661141b57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6109c7816115f5565b61142c6114d7565b6283d600600a5461143d91906117d6565b42101561145d576040516320c2ffdb60e21b815260040160405180910390fd5b6103e882118061146e57506103e881115b1561148c5760405163530da5b960e01b815260040160405180910390fd5b6008829055600981905542600a5560408051838152602081018390527f4f672c50736ba0fe8a4825ecfde8bcd931727422a77ac89af44fccce2746e0b3910160405180910390a15050565b6000546001600160a01b03163314610bc95760405163118cdaa760e01b8152336004820152602401611412565b6000805b600b5481101561104857826001600160a01b0316600b828154811061152f5761152f6117ef565b6000918252602090912001546001600160a01b0316036115525750600192915050565b8061155c81611805565b915050611508565b60026001540361158757604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000805b600b548110156115eb57826001600160a01b0316600b82815481106115b9576115b96117ef565b6000918252602090912001546001600160a01b0316036115d95792915050565b806115e381611805565b915050611592565b5050600b54919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806020838503121561165857600080fd5b823567ffffffffffffffff8082111561167057600080fd5b818501915085601f83011261168457600080fd5b81358181111561169357600080fd5b8660208260051b85010111156116a857600080fd5b60209290920196919550909350505050565b6000602082840312156116cc57600080fd5b5035919050565b6000602082840312156116e557600080fd5b81356001600160a01b03811681146116fc57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156117445783516001600160a01b03168352928401929184019160010161171f565b50909695505050505050565b600060208083528351808285015260005b8181101561177d57858101830151858201604001528201611761565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156117b157600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b808201808211156117e9576117e96117c0565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201611817576118176117c0565b5060010190565b80820281158282048414176117e9576117e96117c0565b60008261185257634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156117e9576117e96117c0565b60006020828403121561187c57600080fd5b815180151581146116fc57600080fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220dcbc0b06f0a306d198538891a1207246dc2c8a99a2fc1a56768298272bc38f6264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addWhitelistedCollection(address)": {
        "details": "Add a collection to the whitelist",
        "params": {
          "collectionAddress": "Address of the NFT collection to add"
        }
      },
      "batchAddWhitelistedCollections(address[])": {
        "details": "Add multiple collections to the whitelist",
        "params": {
          "collections": "Array of collection addresses to add"
        }
      },
      "buyTokens(uint256)": {
        "details": "Buy swap tokens using base tokens",
        "params": {
          "amount": "Amount of base tokens to spend"
        }
      },
      "canChangeExchangeRate()": {
        "details": "Check if a user can change the exchange rate",
        "returns": {
          "_0": "True if the rate change cooldown has passed, false otherwise"
        }
      },
      "canChangeFeeRates()": {
        "details": "Check if fee rates can be changed",
        "returns": {
          "_0": "True if the fee change cooldown has passed, false otherwise"
        }
      },
      "getFirstValidKeyCollection(address)": {
        "details": "Returns the address of the first collection for which the user has a valid key",
        "params": {
          "user": "Address of the user to check"
        },
        "returns": {
          "_0": "The address of the first valid collection, or address(0) if none found"
        }
      },
      "getWhitelistedCollections()": {
        "details": "Get all whitelisted collections",
        "returns": {
          "_0": "Array of whitelisted collection addresses"
        }
      },
      "hasValidKey(address)": {
        "details": "Check if a user has a valid key to any of the whitelisted collections",
        "params": {
          "user": "Address of the user to check"
        },
        "returns": {
          "_0": "True if the user has a valid key, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeWhitelistedCollection(address)": {
        "details": "Remove a collection from the whitelist",
        "params": {
          "collectionAddress": "Address of the NFT collection to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sellTokens(uint256)": {
        "details": "Sell swap tokens for base tokens",
        "params": {
          "amount": "Amount of swap tokens to sell"
        }
      },
      "setExchangeRate(uint256)": {
        "details": "Update the exchange rate (only once per 90 days)",
        "params": {
          "newRate": "New exchange rate"
        }
      },
      "setFeeRates(uint256,uint256)": {
        "details": "Update both buy and sell fee rates (only once per 90 days)",
        "params": {
          "newBuyFeeBPS": "New buy fee in basis points",
          "newSellFeeBPS": "New sell fee in basis points"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawETH()": {
        "details": "Withdraw ETH from the contract (only admin)"
      },
      "withdrawFees()": {
        "details": "Withdraw accumulated fees to a specified address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 387,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 527,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "DEV_ADDRESS",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 536,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "baseToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)229"
      },
      {
        "astId": 539,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "swapToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)229"
      },
      {
        "astId": 541,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "lastDevAddressChangeTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 543,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "exchangeRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 545,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "lastRateChangeTimestamp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 547,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "buyFeeBPS",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 549,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "sellFeeBPS",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 551,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "lastFeeChangeTimestamp",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 554,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "whitelistedCollections",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 556,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "baseTokenFees",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 558,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "swapTokenFees",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)229": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}