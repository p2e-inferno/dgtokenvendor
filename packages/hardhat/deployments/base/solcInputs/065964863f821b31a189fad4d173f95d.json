{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/DGTokenVendor.sol": {
      "content": "pragma solidity 0.8.20; //Do not change the solidity version as it negatively impacts submission grading\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n// Custom error definitions\nerror ExceedsMaxWhitelistedCollections();\nerror CollectionAddressNotFound();\nerror CollectionAlreadyAdded();\nerror NoValidKeyForUserFound();\nerror TokenTransferFailed();\nerror RateLockStillActive();\nerror FeeLockStillActive();\nerror InsufficientAllowance();\nerror ETHTransferFailed();\nerror InvalidFeeBPS();\nerror InvalidDevAddress();\nerror AppChangeCooldownStillActive();\nerror UnauthorizedCaller();\n\ninterface IPublicLock {\n    function getHasValidKey(address _user) external view returns (bool);\n\n    function tokenOfOwnerByIndex(address _user, uint256 _index) external view returns (uint256);\n}\n\ncontract DGTokenVendor is Ownable, ReentrancyGuard {\n    // Constants\n    uint256 public constant MAX_WHITELISTED_COLLECTIONS = 10;\n    uint256 public constant BASIS_POINTS = 10000; // 100% = 10000 basis points\n    uint256 public constant MAX_FEE_BPS = 1000; // Maximum fee of 10% (1000 basis points)\n    uint256 public constant RATE_CHANGE_COOLDOWN = 90 days;\n    uint256 public constant APP_CHANGE_COOLDOWN = 100 days;\n    address public DEV_ADDRESS;\n    uint64 public constant VERSION = 1;\n    string public constant NAME = \"DGTokenVendorV1\";\n\n    // Token addresses\n    IERC20 public baseToken;\n    IERC20 public swapToken;\n\n    uint256 public lastDevAddressChangeTimestamp;\n\n    // Exchange rate (how many swap tokens per base token)\n    uint256 public exchangeRate;\n    uint256 public lastRateChangeTimestamp;\n\n    // Fee settings\n    uint256 public buyFeeBPS; // Buy fee in basis points\n    uint256 public sellFeeBPS; // Sell fee in basis points\n    uint256 public lastFeeChangeTimestamp;\n\n    // Array of whitelisted NFT collection addresses\n    address[] private whitelistedCollections;\n\n    // Fee tracking\n    uint256 public baseTokenFees;\n    uint256 public swapTokenFees;\n\n    // Events\n    event TokensPurchased(address indexed buyer, uint256 baseTokenAmount, uint256 swapTokenAmount, uint256 fee);\n    event TokensSold(address indexed seller, uint256 swapTokenAmount, uint256 baseTokenAmount, uint256 fee);\n    event WhitelistedCollectionAdded(address indexed collectionAddress);\n    event WhitelistedCollectionRemoved(address indexed collectionAddress);\n    event ExchangeRateUpdated(uint256 newRate);\n    event FeesWithdrawn(address indexed to, uint256 baseTokenFees, uint256 swapTokenFees);\n    event ETHWithdrawn(address indexed to, uint256 amount);\n    event FeeRatesUpdated(uint256 newBuyFeeBPS, uint256 newSellFeeBPS);\n\n    constructor(\n        address _baseToken,\n        address _swapToken,\n        uint256 _initialExchangeRate,\n        address _devAddress\n    ) Ownable(msg.sender) {\n        // Initialize Dapp state\n        baseToken = IERC20(_baseToken);\n        swapToken = IERC20(_swapToken);\n        exchangeRate = _initialExchangeRate;\n        lastRateChangeTimestamp = block.timestamp;\n        buyFeeBPS = 100; // 1% initial buy fee\n        sellFeeBPS = 200; // 2% initial sell fee\n        lastFeeChangeTimestamp = block.timestamp;\n        DEV_ADDRESS = _devAddress;\n        lastDevAddressChangeTimestamp = block.timestamp;\n    }\n\n    modifier onlyNFTHolder() {\n        if (!hasValidKey(msg.sender)) revert NoValidKeyForUserFound();\n        _;\n    }\n\n    modifier onlyAuthorized() {\n        if (!(msg.sender == owner() || msg.sender == DEV_ADDRESS)) revert UnauthorizedCaller();\n        _;\n    }\n\n    /**\n     * @dev Buy swap tokens using base tokens\n     * @param amount Amount of base tokens to spend\n     */\n    function buyTokens(uint256 amount) external nonReentrant onlyNFTHolder {\n        // Calculate fee using current buyFeeBPS\n        uint256 fee = (amount * buyFeeBPS) / BASIS_POINTS;\n        uint256 tokenToBuyAmountAfterFee = amount - fee;\n        // Calculate swap tokens to receive\n        uint256 tokenToBuyAmount = tokenToBuyAmountAfterFee * exchangeRate;\n\n        // Update fee tracking\n        baseTokenFees += fee;\n\n        // Transfer base tokens from user to contract\n        bool baseTransferSuccess = baseToken.transferFrom(msg.sender, address(this), amount);\n        if (!baseTransferSuccess) revert TokenTransferFailed();\n\n        // Transfer swap tokens to user\n        bool swapTransferSuccess = swapToken.transfer(msg.sender, tokenToBuyAmount);\n        if (!swapTransferSuccess) revert TokenTransferFailed();\n\n        emit TokensPurchased(msg.sender, amount, tokenToBuyAmount, fee);\n    }\n\n    /**\n     * @dev Sell swap tokens for base tokens\n     * @param amount Amount of swap tokens to sell\n     */\n    function sellTokens(uint256 amount) external nonReentrant onlyNFTHolder {\n        // Calculate fee using current sellFeeBPS\n        uint256 fee = (amount * sellFeeBPS) / BASIS_POINTS;\n        uint256 tokensAmountAfterFee = amount - fee;\n        // Calculate base tokens to receive\n        uint256 tokensToTransferAmount = tokensAmountAfterFee / exchangeRate;\n\n        // Update fee tracking\n        swapTokenFees += fee;\n\n        // Transfer swap tokens from user to contract\n        bool swapTransferSuccess = swapToken.transferFrom(msg.sender, address(this), amount);\n        if (!swapTransferSuccess) revert TokenTransferFailed();\n\n        // Transfer base tokens to user\n        bool baseTransferSuccess = baseToken.transfer(msg.sender, tokensToTransferAmount);\n        if (!baseTransferSuccess) revert TokenTransferFailed();\n\n        emit TokensSold(msg.sender, amount, tokensToTransferAmount, fee);\n    }\n\n    // Admin Functions\n\n    /**\n     * @dev Update the exchange rate (only once per 90 days)\n     * @param newRate New exchange rate\n     */\n    function setExchangeRate(uint256 newRate) external onlyOwner {\n        if (block.timestamp < lastRateChangeTimestamp + RATE_CHANGE_COOLDOWN) revert RateLockStillActive();\n\n        exchangeRate = newRate;\n        lastRateChangeTimestamp = block.timestamp;\n\n        emit ExchangeRateUpdated(newRate);\n    }\n\n    /**\n     * @dev Update both buy and sell fee rates (only once per 90 days)\n     * @param newBuyFeeBPS New buy fee in basis points\n     * @param newSellFeeBPS New sell fee in basis points\n     */\n    function setFeeRates(uint256 newBuyFeeBPS, uint256 newSellFeeBPS) external onlyOwner {\n        // Check cooldown period\n        if (block.timestamp < lastFeeChangeTimestamp + APP_CHANGE_COOLDOWN) revert FeeLockStillActive();\n\n        // Validate new fee rates\n        if (newBuyFeeBPS > MAX_FEE_BPS || newSellFeeBPS > MAX_FEE_BPS) revert InvalidFeeBPS();\n\n        buyFeeBPS = newBuyFeeBPS;\n        sellFeeBPS = newSellFeeBPS;\n        lastFeeChangeTimestamp = block.timestamp;\n\n        emit FeeRatesUpdated(newBuyFeeBPS, newSellFeeBPS);\n    }\n\n    /**\n     * @dev Check if fee rates can be changed\n     * @return True if the fee change cooldown has passed, false otherwise\n     */\n    function canChangeFeeRates() external view returns (bool) {\n        return block.timestamp >= lastFeeChangeTimestamp + APP_CHANGE_COOLDOWN;\n    }\n\n    function setDevAddress(address newDevAddress) external onlyOwner {\n        if (newDevAddress == address(0)) revert InvalidDevAddress();\n        if (block.timestamp < lastDevAddressChangeTimestamp + APP_CHANGE_COOLDOWN)\n            revert AppChangeCooldownStillActive();\n        DEV_ADDRESS = newDevAddress;\n    }\n\n    /**\n     * @dev Withdraw accumulated fees to a specified address\n     */\n    function withdrawFees() external nonReentrant onlyAuthorized {\n        address to = DEV_ADDRESS;\n        uint256 baseTokenFeesToWithdraw = baseTokenFees;\n        uint256 swapTokenFeesToWithdraw = swapTokenFees;\n\n        // Reset fee tracking\n        baseTokenFees = 0;\n        swapTokenFees = 0;\n\n        // Transfer base token fees\n        if (baseTokenFeesToWithdraw > 0) {\n            bool baseTransferSuccess = baseToken.transfer(to, baseTokenFeesToWithdraw);\n            if (!baseTransferSuccess) revert TokenTransferFailed();\n        }\n\n        // Transfer swap token fees\n        if (swapTokenFeesToWithdraw > 0) {\n            bool swapTransferSuccess = swapToken.transfer(to, swapTokenFeesToWithdraw);\n            if (!swapTransferSuccess) revert TokenTransferFailed();\n        }\n\n        emit FeesWithdrawn(to, baseTokenFeesToWithdraw, swapTokenFeesToWithdraw);\n    }\n\n    /**\n     * @dev Withdraw ETH from the contract (only admin)\n     */\n    function withdrawETH() external nonReentrant onlyAuthorized {\n        address to = DEV_ADDRESS;\n        uint256 amount = address(this).balance;\n        (bool success, ) = to.call{ value: amount }(\"\");\n        if (!success) revert ETHTransferFailed();\n\n        emit ETHWithdrawn(to, amount);\n    }\n\n    // Whitelist Management Functions\n\n    /**\n     * @dev Add a collection to the whitelist\n     * @param collectionAddress Address of the NFT collection to add\n     */\n    function addWhitelistedCollection(address collectionAddress) external onlyOwner {\n        if (whitelistedCollections.length >= MAX_WHITELISTED_COLLECTIONS) revert ExceedsMaxWhitelistedCollections();\n        if (_isCollectionWhitelisted(collectionAddress)) revert CollectionAlreadyAdded();\n\n        whitelistedCollections.push(collectionAddress);\n        emit WhitelistedCollectionAdded(collectionAddress);\n    }\n\n    /**\n     * @dev Add multiple collections to the whitelist\n     * @param collections Array of collection addresses to add\n     */\n    function batchAddWhitelistedCollections(address[] calldata collections) external onlyOwner {\n        if (whitelistedCollections.length + collections.length > MAX_WHITELISTED_COLLECTIONS)\n            revert ExceedsMaxWhitelistedCollections();\n\n        for (uint256 i = 0; i < collections.length; i++) {\n            if (!_isCollectionWhitelisted(collections[i])) {\n                whitelistedCollections.push(collections[i]);\n                emit WhitelistedCollectionAdded(collections[i]);\n            }\n        }\n    }\n\n    /**\n     * @dev Remove a collection from the whitelist\n     * @param collectionAddress Address of the NFT collection to remove\n     */\n    function removeWhitelistedCollection(address collectionAddress) external onlyOwner {\n        uint256 index = _findCollectionIndex(collectionAddress);\n        if (index >= whitelistedCollections.length) revert CollectionAddressNotFound();\n\n        // Swap and pop pattern for efficient removal\n        whitelistedCollections[index] = whitelistedCollections[whitelistedCollections.length - 1];\n        whitelistedCollections.pop();\n\n        emit WhitelistedCollectionRemoved(collectionAddress);\n    }\n\n    // Helper Functions\n\n    /**\n     * @dev Check if a user has a valid key to any of the whitelisted collections\n     * @param user Address of the user to check\n     * @return True if the user has a valid key, false otherwise\n     */\n    function hasValidKey(address user) public view returns (bool) {\n        if (whitelistedCollections.length == 0) return false;\n\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\n            IPublicLock lock = IPublicLock(whitelistedCollections[i]);\n            if (lock.getHasValidKey(user)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @dev Returns the address of the first collection for which the user has a valid key\n     * @param user Address of the user to check\n     * @return The address of the first valid collection, or address(0) if none found\n     */\n    function getFirstValidKeyCollection(address user) public view returns (address) {\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\n            if (IPublicLock(whitelistedCollections[i]).getHasValidKey(user)) {\n                return whitelistedCollections[i];\n            }\n        }\n        return address(0); // Return address(0) if no valid lock is found\n    }\n\n    /**\n     * @dev Check if a collection is already whitelisted\n     * @param collectionAddress Address of the collection to check\n     * @return True if the collection is whitelisted, false otherwise\n     */\n    function _isCollectionWhitelisted(address collectionAddress) internal view returns (bool) {\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\n            if (whitelistedCollections[i] == collectionAddress) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Find the index of a collection in the whitelist\n     * @param collectionAddress Address of the collection to find\n     * @return The index of the collection, or the length of the array if not found\n     */\n    function _findCollectionIndex(address collectionAddress) internal view returns (uint256) {\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\n            if (whitelistedCollections[i] == collectionAddress) {\n                return i;\n            }\n        }\n        return whitelistedCollections.length; // Not found\n    }\n\n    /**\n     * @dev Get all whitelisted collections\n     * @return Array of whitelisted collection addresses\n     */\n    function getWhitelistedCollections() external view returns (address[] memory) {\n        return whitelistedCollections;\n    }\n\n    /**\n     * @dev Check if a user can change the exchange rate\n     * @return True if the rate change cooldown has passed, false otherwise\n     */\n    function canChangeExchangeRate() external view returns (bool) {\n        return block.timestamp >= lastRateChangeTimestamp + RATE_CHANGE_COOLDOWN;\n    }\n\n    /**\n     * @dev Receive function to allow the contract to receive ETH\n     */\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}