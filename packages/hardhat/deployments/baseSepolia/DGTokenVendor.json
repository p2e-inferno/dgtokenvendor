{
  "address": "0x45adA67dc9a5fb49c5f1A88f0ff83fb0550b3A82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialExchangeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AppChangeCooldownStillActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollectionAddressNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollectionAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DailySellLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsMaxWhitelistedCollections",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCooldownActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFuelForUpgrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPointsForUpgrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBurnAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCooldown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDailyLimitMultiplier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDevAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExchangeRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeBPS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFuelRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPointsAwarded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQualifyingBuyThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUpgradeFuelThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUpgradePointsThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxStageReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumAmountNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoValidKeyForUserFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RateCooldownActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StageCooldownActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StageSellLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WhitelistedCollectionsAlreadyInitialized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDevAddress",
          "type": "address"
        }
      ],
      "name": "DevAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "ExchangeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rateChangeCooldown",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "appChangeCooldown",
          "type": "uint256"
        }
      ],
      "name": "FeeConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBuyFeeBPS",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSellFeeBPS",
          "type": "uint256"
        }
      ],
      "name": "FeeRatesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapTokenFees",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFuel",
          "type": "uint256"
        }
      ],
      "name": "Lit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IDGTokenVendor.UserStage",
          "name": "stage",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "burnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradePointsThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradeFuelThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuelRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pointsAwarded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qualifyingBuyThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSellBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyLimitMultiplier",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IDGTokenVendor.StageConfig",
          "name": "oldConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "burnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradePointsThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradeFuelThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuelRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pointsAwarded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qualifyingBuyThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSellBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyLimitMultiplier",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IDGTokenVendor.StageConfig",
          "name": "newConfig",
          "type": "tuple"
        }
      ],
      "name": "StageConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "parameter",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "StageConstantsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IDGTokenVendor.UserStage",
          "name": "newStage",
          "type": "uint8"
        }
      ],
      "name": "StageUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "TokensSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        }
      ],
      "name": "WhitelistedCollectionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        }
      ],
      "name": "WhitelistedCollectionRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DAILY_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FUEL_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FUEL_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_POINTS_AWARDED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SELL_BPS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WHITELISTED_COLLECTIONS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        }
      ],
      "name": "addWhitelistedCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collections",
          "type": "address[]"
        }
      ],
      "name": "batchAddWhitelistedCollections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collections",
          "type": "address[]"
        }
      ],
      "name": "batchRemoveWhitelistedCollections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canChangeExchangeRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canChangeFeeRates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxFeeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyFeeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellFeeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rateChangeCooldown",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "appChangeCooldown",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.FeeConfig",
          "name": "_feeConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFirstValidCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IDGTokenVendor.UserStage",
          "name": "_stage",
          "type": "uint8"
        }
      ],
      "name": "getStageConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "burnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradePointsThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradeFuelThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuelRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pointsAwarded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qualifyingBuyThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSellBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyLimitMultiplier",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.StageConfig",
          "name": "_stageConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStageConstants",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxSellCooldown",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBuyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSellAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.StageConstants",
          "name": "_stageConstants",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSystemState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseTokenFees",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapTokenFees",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRateChangeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastFeeChangeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "devAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastDevAddressChangeTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.SystemState",
          "name": "_systemState",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "baseToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "swapToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.TokenConfig",
          "name": "_tokenConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum IDGTokenVendor.UserStage",
              "name": "stage",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "points",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuel",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastStage3MaxSale",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailySoldAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyWindowStart",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.UserState",
          "name": "_userState",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelistedCollections",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasValidKey",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collections",
          "type": "address[]"
        }
      ],
      "name": "initializeWhitelistedCollections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lightUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rateChangeCooldown",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_appChangeCooldown",
          "type": "uint256"
        }
      ],
      "name": "setCooldownConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDevAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "setExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBuyFeeBPS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSellFeeBPS",
          "type": "uint256"
        }
      ],
      "name": "setFeeRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IDGTokenVendor.UserStage",
          "name": "_stage",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "burnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradePointsThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upgradeFuelThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuelRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pointsAwarded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qualifyingBuyThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSellBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyLimitMultiplier",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDGTokenVendor.StageConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setStageConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xae8aa62b39a323c00d93e9e67b266bbd2c2efc4cdfc63fe96384448909d37a43",
  "receipt": {
    "to": null,
    "from": "0x57a79bFB16155303E77E12beB1137803F3D42326",
    "contractAddress": "0x45adA67dc9a5fb49c5f1A88f0ff83fb0550b3A82",
    "transactionIndex": 39,
    "gasUsed": "3469870",
    "logsBloom": "0x
    "blockHash": "0x50099b5d6cab9dccd28b1eb1ea971712a448fdc37fd02fef94affa96307be305",
    "transactionHash": "0xae8aa62b39a323c00d93e9e67b266bbd2c2efc4cdfc63fe96384448909d37a43",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 24325944,
        "transactionHash": "0xae8aa62b39a323c00d93e9e67b266bbd2c2efc4cdfc63fe96384448909d37a43",
        "address": "0x45adA67dc9a5fb49c5f1A88f0ff83fb0550b3A82",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000057a79bfb16155303e77e12beb1137803f3d42326"
        ],
        "data": "0x",
        "logIndex": 205,
        "blockHash": "0x50099b5d6cab9dccd28b1eb1ea971712a448fdc37fd02fef94affa96307be305"
      }
    ],
    "blockNumber": 24325944,
    "cumulativeGasUsed": "11207092",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4231F89f3F88F0346bCF997D54C140596Cc9E1A0",
    "0xf7193B58f24300dbA84d12D6768dB5902D7AB483",
    10,
    "0x306677D29De683a6907Bb2A666f8E206e062a689"
  ],
  "numDeployments": 1,
  "solcInputHash": "8de9f33bc04bc08fec6e65fca5c75de3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AppChangeCooldownStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionAddressNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DailySellLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxWhitelistedCollections\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCooldownActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFuelForUpgrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPointsForUpgrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurnAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCooldown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDailyLimitMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDevAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExchangeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeBPS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFuelRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPointsAwarded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQualifyingBuyThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUpgradeFuelThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUpgradePointsThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxStageReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumAmountNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoValidKeyForUserFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateCooldownActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageCooldownActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageSellLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhitelistedCollectionsAlreadyInitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"DevAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateChangeCooldown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appChangeCooldown\",\"type\":\"uint256\"}],\"name\":\"FeeConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyFeeBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellFeeBPS\",\"type\":\"uint256\"}],\"name\":\"FeeRatesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokenFees\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFuel\",\"type\":\"uint256\"}],\"name\":\"Lit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IDGTokenVendor.UserStage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradePointsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeFuelThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuelRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsAwarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyingBuyThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimitMultiplier\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDGTokenVendor.StageConfig\",\"name\":\"oldConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradePointsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeFuelThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuelRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsAwarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyingBuyThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimitMultiplier\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDGTokenVendor.StageConfig\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"StageConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"parameter\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StageConstantsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IDGTokenVendor.UserStage\",\"name\":\"newStage\",\"type\":\"uint8\"}],\"name\":\"StageUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"WhitelistedCollectionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"WhitelistedCollectionRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DAILY_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FUEL_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FUEL_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_POINTS_AWARDED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SELL_BPS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WHITELISTED_COLLECTIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"addWhitelistedCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"}],\"name\":\"batchAddWhitelistedCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"}],\"name\":\"batchRemoveWhitelistedCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canChangeExchangeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canChangeFeeRates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateChangeCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appChangeCooldown\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.FeeConfig\",\"name\":\"_feeConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFirstValidCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IDGTokenVendor.UserStage\",\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"getStageConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradePointsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeFuelThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuelRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsAwarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyingBuyThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimitMultiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.StageConfig\",\"name\":\"_stageConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStageConstants\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxSellCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSellAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.StageConstants\",\"name\":\"_stageConstants\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseTokenFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTokenFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRateChangeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastFeeChangeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastDevAddressChangeTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.SystemState\",\"name\":\"_systemState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.TokenConfig\",\"name\":\"_tokenConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserState\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IDGTokenVendor.UserStage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStage3MaxSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailySoldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyWindowStart\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.UserState\",\"name\":\"_userState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedCollections\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasValidKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"}],\"name\":\"initializeWhitelistedCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lightUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"removeWhitelistedCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateChangeCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_appChangeCooldown\",\"type\":\"uint256\"}],\"name\":\"setCooldownConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFeeBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellFeeBPS\",\"type\":\"uint256\"}],\"name\":\"setFeeRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IDGTokenVendor.UserStage\",\"name\":\"_stage\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradePointsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeFuelThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuelRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsAwarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyingBuyThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimitMultiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct IDGTokenVendor.StageConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setStageConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"DevAddressUpdated(address)\":{\"params\":{\"newDevAddress\":\"The new developer address\"}},\"ETHWithdrawn(address,uint256)\":{\"params\":{\"amount\":\"Amount of ETH withdrawn\",\"to\":\"Address receiving the ETH\"}},\"ExchangeRateUpdated(uint256)\":{\"params\":{\"newRate\":\"New exchange rate\"}},\"FeeConfigUpdated(uint256,uint256)\":{\"params\":{\"appChangeCooldown\":\"New app change cooldown\",\"rateChangeCooldown\":\"New rate change cooldown\"}},\"FeeRatesUpdated(uint256,uint256)\":{\"params\":{\"newBuyFeeBPS\":\"New buy fee rate in basis points\",\"newSellFeeBPS\":\"New sell fee rate in basis points\"}},\"FeesWithdrawn(address,uint256,uint256)\":{\"params\":{\"baseTokenFees\":\"Amount of base token fees withdrawn\",\"swapTokenFees\":\"Amount of swap token fees withdrawn\",\"to\":\"Address receiving the fees\"}},\"Lit(address,uint256,uint256)\":{\"params\":{\"burnAmount\":\"Amount of tokens burned\",\"newFuel\":\"New fuel level\",\"user\":\"User address\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"StageConfigUpdated(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"newConfig\":\"New configuration\",\"oldConfig\":\"Previous configuration\",\"stage\":\"The stage being updated\"}},\"StageConstantsUpdated(string,uint256)\":{\"params\":{\"parameter\":\"The name of the updated parameter\",\"value\":\"The new value\"}},\"StageUpgraded(address,uint8)\":{\"params\":{\"newStage\":\"New stage of the user\",\"user\":\"User address\"}},\"TokensPurchased(address,uint256,uint256,uint256)\":{\"params\":{\"baseTokenAmount\":\"Amount of base tokens used\",\"buyer\":\"Address of the buyer\",\"fee\":\"Fee taken in base tokens\",\"swapTokenAmount\":\"Amount of swap tokens received\"}},\"TokensSold(address,uint256,uint256,uint256)\":{\"params\":{\"baseTokenAmount\":\"Amount of base tokens received\",\"fee\":\"Fee taken in swap tokens\",\"seller\":\"Address of the seller\",\"swapTokenAmount\":\"Amount of swap tokens sold\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"WhitelistedCollectionAdded(address)\":{\"params\":{\"collectionAddress\":\"Address of the added collection\"}},\"WhitelistedCollectionRemoved(address)\":{\"params\":{\"collectionAddress\":\"Address of the removed collection\"}}},\"kind\":\"dev\",\"methods\":{\"addWhitelistedCollection(address)\":{\"params\":{\"collectionAddress\":\"Address of collection to whitelist\"}},\"buyTokens(uint256)\":{\"params\":{\"amount\":\"Amount of base token to use for purchase\"}},\"canChangeExchangeRate()\":{\"returns\":{\"_0\":\"bool Whether exchange rate can be changed\"}},\"canChangeFeeRates()\":{\"returns\":{\"_0\":\"bool Whether fee rates can be changed\"}},\"getExchangeRate()\":{\"returns\":{\"_0\":\"_exchangeRate The exchange rate\"}},\"getFeeConfig()\":{\"returns\":{\"_feeConfig\":\"The fee configuration\"}},\"getFirstValidCollection(address)\":{\"params\":{\"user\":\"Address to check\"},\"returns\":{\"_0\":\"address First valid collection address\"}},\"getStageConfig(uint8)\":{\"params\":{\"_stage\":\"The stage to get configuration for\"},\"returns\":{\"_stageConfig\":\"The stage configuration\"}},\"getStageConstants()\":{\"returns\":{\"_stageConstants\":\"The stage constants\"}},\"getSystemState()\":{\"returns\":{\"_systemState\":\"The system state\"}},\"getTokenConfig()\":{\"returns\":{\"_tokenConfig\":\"The token configuration\"}},\"getUserState(address)\":{\"params\":{\"user\":\"The user address\"},\"returns\":{\"_userState\":\"The user state\"}},\"getWhitelistedCollections()\":{\"returns\":{\"_0\":\"address[] Array of whitelisted collection addresses\"}},\"hasValidKey(address)\":{\"params\":{\"user\":\"Address to check\"},\"returns\":{\"_0\":\"bool Whether user has a valid key\"}},\"initializeWhitelistedCollections(address[])\":{\"params\":{\"collections\":\"Array of collection addresses to whitelist\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeWhitelistedCollection(address)\":{\"params\":{\"collectionAddress\":\"Address of collection to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sellTokens(uint256)\":{\"params\":{\"amount\":\"Amount of swap token to sell\"}},\"setCooldownConfig(uint256,uint256)\":{\"params\":{\"_appChangeCooldown\":\"Cooldown for changing app settings\",\"_rateChangeCooldown\":\"Cooldown for changing exchange rate\"}},\"setDevAddress(address)\":{\"params\":{\"newDevAddress\":\"New developer address\"}},\"setExchangeRate(uint256)\":{\"params\":{\"newRate\":\"New exchange rate\"}},\"setFeeRates(uint256,uint256)\":{\"params\":{\"newBuyFeeBPS\":\"New buy fee in basis points\",\"newSellFeeBPS\":\"New sell fee in basis points\"}},\"setStageConfig(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"_config\":\"New configuration for the stage\",\"_stage\":\"The stage to update\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawETH()\":{\"details\":\"Withdraw ETH from the contract (only admin)\"}},\"version\":1},\"userdoc\":{\"events\":{\"DevAddressUpdated(address)\":{\"notice\":\"Emitted when the developer address is updated\"},\"ETHWithdrawn(address,uint256)\":{\"notice\":\"Emitted when ETH is withdrawn\"},\"ExchangeRateUpdated(uint256)\":{\"notice\":\"Emitted when exchange rate is updated\"},\"FeeConfigUpdated(uint256,uint256)\":{\"notice\":\"Emitted when fee configuration cooldowns are updated\"},\"FeeRatesUpdated(uint256,uint256)\":{\"notice\":\"Emitted when fee rates are updated\"},\"FeesWithdrawn(address,uint256,uint256)\":{\"notice\":\"Emitted when fees are withdrawn\"},\"Lit(address,uint256,uint256)\":{\"notice\":\"Emitted when a user uses the light up feature\"},\"StageConfigUpdated(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Emitted when stage configuration is updated\"},\"StageConstantsUpdated(string,uint256)\":{\"notice\":\"Emitted when stage constants are updated\"},\"StageUpgraded(address,uint8)\":{\"notice\":\"Emitted when a user upgrades to a new stage\"},\"TokensPurchased(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when tokens are purchased\"},\"TokensSold(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when tokens are sold\"},\"WhitelistedCollectionAdded(address)\":{\"notice\":\"Emitted when a collection is added to whitelist\"},\"WhitelistedCollectionRemoved(address)\":{\"notice\":\"Emitted when a collection is removed from whitelist\"}},\"kind\":\"user\",\"methods\":{\"addWhitelistedCollection(address)\":{\"notice\":\"Add a new whitelisted collection\"},\"buyTokens(uint256)\":{\"notice\":\"Buy tokens using base token\"},\"canChangeExchangeRate()\":{\"notice\":\"Check if exchange rate can be changed\"},\"canChangeFeeRates()\":{\"notice\":\"Check if fee rates can be changed\"},\"getExchangeRate()\":{\"notice\":\"Get exchange rate\"},\"getFeeConfig()\":{\"notice\":\"Get fee configuration\"},\"getFirstValidCollection(address)\":{\"notice\":\"Get the whitelisted collection for the first valid key a user has\"},\"getStageConfig(uint8)\":{\"notice\":\"Get stage configuration\"},\"getStageConstants()\":{\"notice\":\"Get stage constants\"},\"getSystemState()\":{\"notice\":\"Get system state\"},\"getTokenConfig()\":{\"notice\":\"Get token configuration\"},\"getUserState(address)\":{\"notice\":\"Get user state\"},\"getWhitelistedCollections()\":{\"notice\":\"Get all whitelisted collections\"},\"hasValidKey(address)\":{\"notice\":\"Check if user has a valid NFT key\"},\"initializeWhitelistedCollections(address[])\":{\"notice\":\"Initialize the whitelisted collections \"},\"lightUp()\":{\"notice\":\"Increase user's fuel by burning tokens\"},\"removeWhitelistedCollection(address)\":{\"notice\":\"Remove a whitelisted collection\"},\"sellTokens(uint256)\":{\"notice\":\"Sell tokens to receive base token\"},\"setCooldownConfig(uint256,uint256)\":{\"notice\":\"Updates the fee configuration\"},\"setDevAddress(address)\":{\"notice\":\"Set new developer address\"},\"setExchangeRate(uint256)\":{\"notice\":\"Set new exchange rate\"},\"setFeeRates(uint256,uint256)\":{\"notice\":\"Set new fee rates\"},\"setStageConfig(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Update stage configuration\"},\"upgradeStage()\":{\"notice\":\"Upgrade user to next stage when requirements are met\"},\"withdrawFees()\":{\"notice\":\"Withdraw accumulated fees\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DGTokenVendor.sol\":\"DGTokenVendor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/DGTokenVendor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IDGTokenVendor.sol\\\";\\n\\n// Custom errors\\nerror AppChangeCooldownStillActive();\\nerror CollectionAddressNotFound();\\nerror CollectionAlreadyAdded();\\nerror DailySellLimitExceeded();\\nerror ExceedsMaxWhitelistedCollections();\\nerror ETHTransferFailed();\\nerror FeeCooldownActive();\\nerror InsufficientPointsForUpgrade();\\nerror InsufficientFuelForUpgrade();\\nerror InvalidFeeBPS();\\nerror InvalidDevAddress();\\nerror InvalidExchangeRate();\\nerror InsufficientBalance();\\nerror InvalidFuelRate();\\nerror InvalidPointsAwarded();\\nerror InvalidDailyLimitMultiplier();\\nerror InvalidBurnAmount();\\nerror InvalidUpgradePointsThreshold();\\nerror InvalidUpgradeFuelThreshold();\\nerror InvalidQualifyingBuyThreshold();\\nerror InvalidCooldown();\\nerror MinimumAmountNotMet();\\nerror MaxStageReached();\\nerror NoValidKeyForUserFound();\\nerror RateCooldownActive();\\nerror StageSellLimitExceeded();\\nerror StageCooldownActive();\\nerror UnauthorizedCaller();\\nerror WhitelistedCollectionsAlreadyInitialized();\\n\\ninterface IPublicLock {\\n    function getHasValidKey(address _user) external view returns (bool);\\n\\n    function tokenOfOwnerByIndex(address _user, uint256 _index) external view returns (uint256);\\n}\\n\\ncontract DGTokenVendor is Ownable, ReentrancyGuard, Pausable, IDGTokenVendor {\\n    using SafeERC20 for IERC20;\\n\\n    // Core Constants\\n    uint256 public constant MAX_WHITELISTED_COLLECTIONS = 10;\\n    uint256 public constant BASIS_POINTS = 10000;\\n    uint256 public constant MAX_DAILY_MULTIPLIER = 100;\\n    uint256 public constant MAX_FUEL_LIMIT = 100;\\n    uint256 public constant MAX_FUEL_RATE = 5;\\n    uint256 public constant MAX_POINTS_AWARDED = 5;\\n    uint256 public constant MAX_SELL_BPS_LIMIT = 7000;\\n    address public constant BURN_ADDRESS = 0x2Ef7DeC913e4127Fd0f94B32eeAd23ee63143598;\\n\\n    // State Variables\\n    StageConstants stageConstants;\\n    FeeConfig feeConfig;\\n    TokenConfig tokenConfig;\\n    SystemState systemState;\\n    address[] private whitelistedCollections;\\n\\n    mapping(address => UserState) userStates;\\n    mapping(UserStage => StageConfig) stageConfig;\\n\\n    modifier onlyNFTHolder() {\\n        if (!hasValidKey(msg.sender)) revert NoValidKeyForUserFound();\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        if (!(msg.sender == owner() || msg.sender == systemState.devAddress)) revert UnauthorizedCaller();\\n        _;\\n    }\\n\\n    constructor(\\n        address _baseToken,\\n        address _swapToken,\\n        uint256 _initialExchangeRate,\\n        address _devAddress\\n    ) Ownable(msg.sender) {\\n        if (_initialExchangeRate == 0) revert InvalidExchangeRate();\\n        // TODO: Uncomment this once the contract is ready to be deployed to mainnet\\n        // _initialize(_baseToken, _swapToken, _initialExchangeRate, _devAddress);\\n\\n        //////////////////////////////////////////////////////////////////////////////////////////////////\\n        /////////////////////////////////////////////////////////////////////////////////////////////////\\n        //////////// TODO: Remove this once the contract is ready to be deployed to mainnet ////////////\\n        //////////// Testnet values use `_initialize()` for mainnet deployment ////////////////////////\\n        //////////////////////////////////////////////////////////////////////////////////////////////\\n        tokenConfig = TokenConfig({\\n            baseToken: IERC20(_baseToken),\\n            swapToken: IERC20(_swapToken),\\n            exchangeRate: _initialExchangeRate\\n        });\\n\\n        systemState = SystemState({\\n            baseTokenFees: 0,\\n            swapTokenFees: 0,\\n            lastRateChangeTimestamp: block.timestamp,\\n            lastFeeChangeTimestamp: block.timestamp,\\n            devAddress: _devAddress,\\n            lastDevAddressChangeTimestamp: block.timestamp\\n        });\\n\\n        feeConfig = FeeConfig({\\n            maxFeeBps: 1000,\\n            buyFeeBps: 100,\\n            sellFeeBps: 200,\\n            rateChangeCooldown: 0 days,\\n            appChangeCooldown: 0 days\\n        });\\n\\n        stageConstants = StageConstants({\\n            maxSellCooldown: 45 days,\\n            dailyWindow: 24 hours,\\n            minBuyAmount: 1000e18,\\n            minSellAmount: 5000e18\\n        }); \\n\\n        stageConfig[UserStage.PLEB] = StageConfig({\\n            burnAmount: 10e18,\\n            upgradePointsThreshold: 0,\\n            upgradeFuelThreshold: 5,\\n            fuelRate: 5,\\n            pointsAwarded: 5,\\n            qualifyingBuyThreshold: 1000e18,\\n            maxSellBps: 5000,\\n            dailyLimitMultiplier: 100\\n        });\\n\\n        stageConfig[UserStage.HUSTLER] = StageConfig({\\n            burnAmount: 50e18,\\n            upgradePointsThreshold: 20,\\n            upgradeFuelThreshold: 15,\\n            fuelRate: 5,\\n            pointsAwarded: 5,\\n            qualifyingBuyThreshold: 5000e18,\\n            maxSellBps: 6000,\\n            dailyLimitMultiplier: 100\\n        });\\n\\n        stageConfig[UserStage.OG] = StageConfig({\\n            burnAmount: 100e18,\\n            upgradePointsThreshold: 20,\\n            upgradeFuelThreshold: 20,\\n            fuelRate: 5,\\n            pointsAwarded: 5,\\n            qualifyingBuyThreshold: 20000e18,\\n            maxSellBps: 7000,\\n            dailyLimitMultiplier: 100\\n        });\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function buyTokens(uint256 amount) external nonReentrant onlyNFTHolder whenNotPaused {\\n        if (amount < stageConstants.minBuyAmount) revert MinimumAmountNotMet();\\n        if (tokenConfig.baseToken.balanceOf(msg.sender) < amount) revert InsufficientBalance();\\n        uint256 fee = (amount * feeConfig.buyFeeBps) / BASIS_POINTS;\\n        uint256 tokenToBuyAmount = (amount - fee) * tokenConfig.exchangeRate;\\n\\n        systemState.baseTokenFees += fee;\\n        // Update user points\\n        UserState storage user = userStates[msg.sender];\\n        StageConfig memory config = stageConfig[user.stage];\\n\\n        // Award points if threshold met\\n        if (amount >= config.qualifyingBuyThreshold) {\\n            user.points += config.pointsAwarded;\\n        }\\n\\n        tokenConfig.baseToken.safeTransferFrom(msg.sender, address(this), amount);\\n        tokenConfig.swapToken.safeTransfer(msg.sender, tokenToBuyAmount);\\n\\n        emit TokensPurchased(msg.sender, amount, tokenToBuyAmount, fee);\\n    }\\n\\n    function sellTokens(uint256 amount) external nonReentrant onlyNFTHolder whenNotPaused {\\n        if (amount < stageConstants.minSellAmount) revert MinimumAmountNotMet();\\n\\n        // Calculate token conversion and fees\\n        uint256 fee = (amount * feeConfig.sellFeeBps) / BASIS_POINTS;\\n        uint256 tokensAmountAfterFee = amount - fee;\\n        uint256 tokensToTransferAmount = tokensAmountAfterFee / tokenConfig.exchangeRate;\\n        if (tokensToTransferAmount == 0) revert MinimumAmountNotMet();\\n\\n        UserState storage user = userStates[msg.sender];\\n        StageConfig memory config = stageConfig[user.stage];\\n\\n        // Calculate maximum allowed transaction size\\n        uint256 contractBalance = tokenConfig.baseToken.balanceOf(address(this));\\n        uint256 maxTxSell = (contractBalance * config.maxSellBps) / BASIS_POINTS;\\n\\n        // Validate transaction limits\\n        if (tokensToTransferAmount > maxTxSell) revert StageSellLimitExceeded();\\n\\n        // Handle OG stage cooldown for max-sized transactions\\n        if (user.stage == UserStage.OG && tokensToTransferAmount == maxTxSell) {\\n            if (block.timestamp <= user.lastStage3MaxSale + stageConstants.maxSellCooldown) {\\n                revert StageCooldownActive();\\n            }\\n            user.lastStage3MaxSale = block.timestamp;\\n        }\\n\\n        // Update daily tracking window\\n        if (block.timestamp > user.dailyWindowStart + stageConstants.dailyWindow) {\\n            user.dailySoldAmount = 0;\\n            user.dailyWindowStart = block.timestamp;\\n        }\\n\\n        // Calculate and validate daily limit\\n        uint256 dailyLimit = config.qualifyingBuyThreshold * (config.dailyLimitMultiplier + user.fuel);\\n        if (user.dailySoldAmount + amount > dailyLimit) {\\n            revert DailySellLimitExceeded();\\n        }\\n\\n        // Update state variables\\n        user.dailySoldAmount += amount;\\n        user.fuel = 0;\\n        systemState.swapTokenFees += fee;\\n\\n        // Execute token transfers\\n        tokenConfig.swapToken.safeTransferFrom(msg.sender, address(this), amount);\\n        tokenConfig.baseToken.safeTransfer(msg.sender, tokensToTransferAmount);\\n\\n        emit TokensSold(msg.sender, amount, tokensToTransferAmount, fee);\\n    }\\n\\n    function lightUp() external onlyNFTHolder whenNotPaused nonReentrant {\\n        UserState storage user = userStates[msg.sender];\\n        StageConfig memory config = stageConfig[UserStage(user.stage)];\\n\\n        tokenConfig.baseToken.safeTransferFrom(msg.sender, BURN_ADDRESS, config.burnAmount);\\n\\n        uint256 newFuel = Math.min(user.fuel + config.fuelRate, MAX_FUEL_LIMIT);\\n\\n        if (newFuel > user.fuel) user.fuel = newFuel;\\n        emit Lit(msg.sender, config.burnAmount, newFuel);\\n    }\\n\\n    function upgradeStage() external onlyNFTHolder whenNotPaused nonReentrant {\\n        UserState storage user = userStates[msg.sender];\\n        if (user.stage == UserStage.OG) revert MaxStageReached(); \\n        UserStage nextStage = UserStage(uint256(user.stage) + 1);\\n\\n        if (user.points < stageConfig[nextStage].upgradePointsThreshold) revert InsufficientPointsForUpgrade();\\n        if (user.fuel < stageConfig[nextStage].upgradeFuelThreshold) revert InsufficientFuelForUpgrade();\\n\\n        user.stage = nextStage;\\n        user.points = 0;\\n        user.fuel = 0;\\n        emit StageUpgraded(msg.sender, user.stage);\\n    }\\n\\n    function setExchangeRate(uint256 newRate) external onlyOwner {\\n        if (block.timestamp < systemState.lastRateChangeTimestamp + feeConfig.rateChangeCooldown)\\n            revert RateCooldownActive();\\n        if (newRate == 0) revert InvalidExchangeRate();\\n\\n        tokenConfig.exchangeRate = newRate;\\n        systemState.lastRateChangeTimestamp = block.timestamp;\\n        emit ExchangeRateUpdated(newRate);\\n    }\\n\\n    function setFeeRates(uint256 newBuyFeeBPS, uint256 newSellFeeBPS) external onlyOwner {\\n        if (block.timestamp < systemState.lastFeeChangeTimestamp + feeConfig.appChangeCooldown)\\n            revert FeeCooldownActive();\\n        if (newBuyFeeBPS > feeConfig.maxFeeBps || newSellFeeBPS > feeConfig.maxFeeBps) revert InvalidFeeBPS();\\n\\n        feeConfig.buyFeeBps = newBuyFeeBPS;\\n        feeConfig.sellFeeBps = newSellFeeBPS;\\n        systemState.lastFeeChangeTimestamp = block.timestamp;\\n        emit FeeRatesUpdated(newBuyFeeBPS, newSellFeeBPS);\\n    }\\n\\n    function setDevAddress(address newDevAddress) external onlyOwner {\\n        if (newDevAddress == address(0)) revert InvalidDevAddress();\\n        if (block.timestamp < systemState.lastDevAddressChangeTimestamp + feeConfig.appChangeCooldown)\\n            revert AppChangeCooldownStillActive();\\n        systemState.devAddress = newDevAddress;\\n        systemState.lastDevAddressChangeTimestamp = block.timestamp;\\n        emit DevAddressUpdated(newDevAddress);\\n    }\\n\\n    function withdrawFees() external nonReentrant onlyAuthorized whenNotPaused {\\n        address to = systemState.devAddress;\\n        uint256 baseTokenFeesToWithdraw = systemState.baseTokenFees;\\n        uint256 swapTokenFeesToWithdraw = systemState.swapTokenFees;\\n\\n        systemState.baseTokenFees = 0;\\n        systemState.swapTokenFees = 0;\\n\\n        if (baseTokenFeesToWithdraw > 0) {\\n            tokenConfig.baseToken.safeTransfer(to, baseTokenFeesToWithdraw);\\n        }\\n\\n        if (swapTokenFeesToWithdraw > 0) {\\n            tokenConfig.swapToken.safeTransfer(to, swapTokenFeesToWithdraw);\\n        }\\n\\n        emit FeesWithdrawn(to, baseTokenFeesToWithdraw, swapTokenFeesToWithdraw);\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH from the contract (only admin)\\n     */\\n    function withdrawETH() external nonReentrant onlyAuthorized whenNotPaused {\\n        address to = systemState.devAddress;\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n        if (!success) revert ETHTransferFailed();\\n\\n        emit ETHWithdrawn(to, amount);\\n    }\\n\\n    function addWhitelistedCollection(address collectionAddress) external onlyOwner {\\n        if (whitelistedCollections.length >= MAX_WHITELISTED_COLLECTIONS) revert ExceedsMaxWhitelistedCollections();\\n        if (_isCollectionWhitelisted(collectionAddress)) revert CollectionAlreadyAdded();\\n\\n        whitelistedCollections.push(collectionAddress);\\n        emit WhitelistedCollectionAdded(collectionAddress);\\n    }\\n\\n    function batchAddWhitelistedCollections(address[] calldata collections) external onlyOwner {\\n        if (whitelistedCollections.length + collections.length > MAX_WHITELISTED_COLLECTIONS)\\n            revert ExceedsMaxWhitelistedCollections();\\n\\n        for (uint256 i = 0; i < collections.length; i++) {\\n            if (!_isCollectionWhitelisted(collections[i])) {\\n                whitelistedCollections.push(collections[i]);\\n                emit WhitelistedCollectionAdded(collections[i]);\\n            }\\n        }\\n    }\\n\\n    function removeWhitelistedCollection(address collectionAddress) external onlyOwner {\\n        uint256 index = _findCollectionIndex(collectionAddress);\\n        if (index >= whitelistedCollections.length) revert CollectionAddressNotFound();\\n\\n        whitelistedCollections[index] = whitelistedCollections[whitelistedCollections.length - 1];\\n        whitelistedCollections.pop();\\n        emit WhitelistedCollectionRemoved(collectionAddress);\\n    }\\n\\n    function batchRemoveWhitelistedCollections(\\n        address[] calldata collections\\n    ) external onlyOwner {\\n        uint256 length = collections.length;\\n        for (uint256 i = length; i > 0; ) {\\n            unchecked {\\n                i--; \\n            }\\n            \\n            address collection = collections[i];\\n            uint256 index = _findCollectionIndex(collection);\\n            if (index >= whitelistedCollections.length) {\\n                revert CollectionAddressNotFound();\\n            }\\n\\n            uint256 lastIndex = whitelistedCollections.length - 1;\\n            if (index != lastIndex) {\\n                whitelistedCollections[index] = whitelistedCollections[lastIndex];\\n            }\\n            whitelistedCollections.pop();\\n\\n            emit WhitelistedCollectionRemoved(collection);\\n        }\\n    }\\n\\n    function initializeWhitelistedCollections(address[] calldata collections) external onlyAuthorized {\\n        if (whitelistedCollections.length + collections.length > MAX_WHITELISTED_COLLECTIONS)\\n            revert ExceedsMaxWhitelistedCollections();\\n        if (whitelistedCollections.length > 0) revert WhitelistedCollectionsAlreadyInitialized();\\n\\n        for (uint256 i = 0; i < collections.length; i++) {\\n            if (!_isCollectionWhitelisted(collections[i])) {\\n                whitelistedCollections.push(collections[i]);\\n                emit WhitelistedCollectionAdded(collections[i]);\\n            }\\n        }\\n    }\\n\\n    function canChangeFeeRates() external view returns (bool) {\\n        return block.timestamp >= systemState.lastFeeChangeTimestamp + feeConfig.appChangeCooldown;\\n    }\\n\\n    function canChangeExchangeRate() external view returns (bool) {\\n        return block.timestamp >= systemState.lastRateChangeTimestamp + feeConfig.rateChangeCooldown;\\n    }\\n\\n    function hasValidKey(address user) public view returns (bool) {\\n        if (whitelistedCollections.length == 0) return false;\\n\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\n            if (IPublicLock(whitelistedCollections[i]).getHasValidKey(user)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getFirstValidCollection(address user) public view returns (address) {\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\n            if (IPublicLock(whitelistedCollections[i]).getHasValidKey(user)) {\\n                return whitelistedCollections[i];\\n            }\\n        }\\n        return address(0);\\n    }\\n\\n    function getStageConstants() public view returns (StageConstants memory _stageConstants) {\\n        _stageConstants = stageConstants;\\n    }\\n\\n    function getFeeConfig() public view returns (FeeConfig memory _feeConfig) {\\n        _feeConfig = feeConfig;\\n    }\\n\\n    function getTokenConfig() public view returns (TokenConfig memory _tokenConfig) {\\n        _tokenConfig = tokenConfig;\\n    }\\n\\n    function getSystemState() public view returns (SystemState memory _systemState) {\\n        _systemState = systemState;\\n    }\\n\\n    function getUserState(address user) public view returns (UserState memory _userState) {\\n        _userState = userStates[user];\\n    }\\n\\n    function getStageConfig(UserStage _stage) public view returns (StageConfig memory _stageConfig) {\\n        _stageConfig = stageConfig[_stage];\\n    }\\n\\n    function getExchangeRate() external view returns (uint256) {\\n        return tokenConfig.exchangeRate;\\n    }\\n\\n    function getWhitelistedCollections() external view returns (address[] memory) {\\n        return whitelistedCollections;\\n    }\\n\\n    function _isCollectionWhitelisted(address collectionAddress) internal view returns (bool) {\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\n            if (whitelistedCollections[i] == collectionAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _findCollectionIndex(address collectionAddress) internal view returns (uint256) {\\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\\n            if (whitelistedCollections[i] == collectionAddress) {\\n                return i;\\n            }\\n        }\\n        return whitelistedCollections.length;\\n    }\\n\\n    function setStageConfig(UserStage _stage, StageConfig calldata _config) external onlyOwner {\\n        uint256 minSellBps = 100;\\n        uint256 invalidLowerBound = 0;\\n        if (_config.maxSellBps < minSellBps || _config.maxSellBps > MAX_SELL_BPS_LIMIT) revert InvalidFeeBPS();\\n        if (_config.fuelRate == invalidLowerBound || _config.fuelRate > MAX_FUEL_RATE) revert InvalidFuelRate();\\n        if (_config.pointsAwarded == invalidLowerBound || _config.pointsAwarded > MAX_POINTS_AWARDED)\\n            revert InvalidPointsAwarded();\\n        if (_config.dailyLimitMultiplier == invalidLowerBound || _config.dailyLimitMultiplier > MAX_DAILY_MULTIPLIER)\\n            revert InvalidDailyLimitMultiplier();\\n        if (_config.burnAmount == invalidLowerBound) revert InvalidBurnAmount();\\n        if (_config.upgradePointsThreshold == invalidLowerBound) revert InvalidUpgradePointsThreshold();\\n        if (_config.upgradeFuelThreshold == invalidLowerBound) revert InvalidUpgradeFuelThreshold();\\n        if (_config.qualifyingBuyThreshold == invalidLowerBound) revert InvalidQualifyingBuyThreshold();\\n\\n        StageConfig storage storedConfig = stageConfig[_stage];\\n        StageConfig memory oldConfig = storedConfig;\\n\\n        storedConfig.burnAmount = _config.burnAmount;\\n        storedConfig.upgradePointsThreshold = _config.upgradePointsThreshold;\\n        storedConfig.upgradeFuelThreshold = _config.upgradeFuelThreshold;\\n        storedConfig.fuelRate = _config.fuelRate;\\n        storedConfig.pointsAwarded = _config.pointsAwarded;\\n        storedConfig.qualifyingBuyThreshold = _config.qualifyingBuyThreshold;\\n        storedConfig.maxSellBps = _config.maxSellBps;\\n        storedConfig.dailyLimitMultiplier = _config.dailyLimitMultiplier;\\n\\n        emit StageConfigUpdated(_stage, oldConfig, storedConfig);\\n    }\\n\\n    /**\\n     * @notice Updates the fee configuration\\n     * @param _rateChangeCooldown Cooldown for changing exchange rate\\n     * @param _appChangeCooldown Cooldown for changing app settings\\n     */\\n    function setCooldownConfig(uint256 _rateChangeCooldown, uint256 _appChangeCooldown) external onlyOwner {\\n        uint256 minCooldown = 14 days;\\n        uint256 maxCooldown = 180 days;\\n        if (_rateChangeCooldown < minCooldown || _rateChangeCooldown > maxCooldown) revert InvalidCooldown();\\n        if (_appChangeCooldown < minCooldown || _appChangeCooldown > maxCooldown) revert InvalidCooldown();\\n\\n        feeConfig.rateChangeCooldown = _rateChangeCooldown;\\n        feeConfig.appChangeCooldown = _appChangeCooldown;\\n        emit FeeConfigUpdated(_rateChangeCooldown, _appChangeCooldown);\\n    }\\n    function _initialize(address _baseToken, address _swapToken, uint256 _initialExchangeRate, address _devAddress) private {\\n        // Initialize token config\\n        tokenConfig = TokenConfig({\\n            baseToken: IERC20(_baseToken),\\n            swapToken: IERC20(_swapToken),\\n            exchangeRate: _initialExchangeRate\\n        });\\n\\n        // Initialize system state\\n        systemState = SystemState({\\n            baseTokenFees: 0,\\n            swapTokenFees: 0,\\n            lastRateChangeTimestamp: block.timestamp,\\n            lastFeeChangeTimestamp: block.timestamp,\\n            devAddress: _devAddress,\\n            lastDevAddressChangeTimestamp: block.timestamp\\n        });\\n\\n        // Initialize fee config\\n        feeConfig = FeeConfig({\\n            maxFeeBps: 1000,\\n            buyFeeBps: 100,\\n            sellFeeBps: 200,\\n            rateChangeCooldown: 90 days,\\n            appChangeCooldown: 90 days\\n        });\\n\\n        // Initialize stage constants\\n        stageConstants = StageConstants({\\n            maxSellCooldown: 45 days,\\n            dailyWindow: 24 hours,\\n            minBuyAmount: 1000e18,\\n            minSellAmount: 5000e18\\n        }); \\n\\n        // Configure stages\\n        stageConfig[UserStage.PLEB] = StageConfig({\\n            burnAmount: 10e18,\\n            upgradePointsThreshold: 0,\\n            upgradeFuelThreshold: 0,\\n            fuelRate: 1,\\n            pointsAwarded: 1,\\n            qualifyingBuyThreshold: 1000e18,\\n            maxSellBps: 5000,\\n            dailyLimitMultiplier: 100\\n        });\\n\\n        stageConfig[UserStage.HUSTLER] = StageConfig({\\n            burnAmount: 50e18,\\n            upgradePointsThreshold: 100,\\n            upgradeFuelThreshold: 10,\\n            fuelRate: 2,\\n            pointsAwarded: 2,\\n            qualifyingBuyThreshold: 5000e18,\\n            maxSellBps: 6000,\\n            dailyLimitMultiplier: 100\\n        });\\n\\n        stageConfig[UserStage.OG] = StageConfig({\\n            burnAmount: 100e18,\\n            upgradePointsThreshold: 500,\\n            upgradeFuelThreshold: 30,\\n            fuelRate: 3,\\n            pointsAwarded: 3,\\n            qualifyingBuyThreshold: 20000e18,\\n            maxSellBps: 7000,\\n            dailyLimitMultiplier: 100\\n        });\\n    }\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb0bb1646ed89b1d2edeccac15d40f9a8f93156bfa05e394fe48da50d099abe2e\",\"license\":\"MIT\"},\"contracts/interfaces/IDGTokenVendor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IDGTokenVendor\\r\\n * @author Danny Thomx\\r\\n * @notice Interface for the DGTokenVendor contract\\r\\n * @dev Contains all external and public functions of the DGTokenVendor contract\\r\\n */\\r\\ninterface IDGTokenVendor {\\r\\n    /* ========== ENUMS & STRUCTS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice User progression stages\\r\\n     */\\r\\n    enum UserStage {\\r\\n        PLEB, // Entry level\\r\\n        HUSTLER, // Mid level\\r\\n        OG // Top level\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Configuration for each user stage\\r\\n     * @param burnAmount Amount of tokens burned for \\\"light up\\\" feature\\r\\n     * @param upgradePointsThreshold Points needed for upgrading to next stage\\r\\n     * @param upgradeFuelThreshold Fuel threshold for upgrade\\r\\n     * @param fuelRate Rate at which fuel increases\\r\\n     * @param pointsAwarded Points awarded for qualifying buy\\r\\n     * @param qualifyingBuyThreshold Minimum buy amount to earn points at this stage\\r\\n     * @param maxSellBps Maximum percentage of contract balance that can be sold in one tx\\r\\n     * @param dailyLimitMultiplier Multiplier for daily sell limit\\r\\n     */\\r\\n    struct StageConfig {\\r\\n        uint256 burnAmount;\\r\\n        uint256 upgradePointsThreshold;\\r\\n        uint256 upgradeFuelThreshold;\\r\\n        uint256 fuelRate;\\r\\n        uint256 pointsAwarded;\\r\\n        uint256 qualifyingBuyThreshold;\\r\\n        uint256 maxSellBps;\\r\\n        uint256 dailyLimitMultiplier;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constants for stage system timing and minimum amounts\\r\\n     * @param cooldown Cooldown period between stage operations\\r\\n     * @param dailyWindow Time window for daily limits\\r\\n     * @param minBuyAmount Minimum amount for buying tokens\\r\\n     * @param minSellAmount Minimum amount for selling tokens\\r\\n     */\\r\\n    struct StageConstants {\\r\\n        uint256 maxSellCooldown;\\r\\n        uint256 dailyWindow;\\r\\n        uint256 minBuyAmount;\\r\\n        uint256 minSellAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Individual user state\\r\\n     * @param stage Current user stage\\r\\n     * @param points Points earned toward next stage\\r\\n     * @param fuel Current fuel level\\r\\n     * @param lastStage3MaxSale Timestamp of last maximum stage 3 sale\\r\\n     * @param dailySoldAmount Amount sold in current daily window\\r\\n     * @param dailyWindowStart Start timestamp of current daily window\\r\\n     */\\r\\n    struct UserState {\\r\\n        UserStage stage;\\r\\n        uint256 points;\\r\\n        uint256 fuel;\\r\\n        uint256 lastStage3MaxSale;\\r\\n        uint256 dailySoldAmount;\\r\\n        uint256 dailyWindowStart;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fee configuration\\r\\n     * @param maxFeeBps Maximum fee in basis points\\r\\n     * @param buyFeeBps Fee for buying tokens in basis points\\r\\n     * @param sellFeeBps Fee for selling tokens in basis points\\r\\n     * @param rateChangeCooldown Cooldown for changing exchange rate\\r\\n     * @param appChangeCooldown Cooldown for changing app settings\\r\\n     */\\r\\n    struct FeeConfig {\\r\\n        uint256 maxFeeBps;\\r\\n        uint256 buyFeeBps;\\r\\n        uint256 sellFeeBps;\\r\\n        uint256 rateChangeCooldown;\\r\\n        uint256 appChangeCooldown;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Token configuration\\r\\n     * @param baseToken The base token contract\\r\\n     * @param swapToken The swap token contract\\r\\n     * @param exchangeRate Exchange rate between tokens\\r\\n     */\\r\\n    struct TokenConfig {\\r\\n        IERC20 baseToken;\\r\\n        IERC20 swapToken;\\r\\n        uint256 exchangeRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice System state variables\\r\\n     * @param baseTokenFees Accumulated fees in base token\\r\\n     * @param swapTokenFees Accumulated fees in swap token\\r\\n     * @param lastRateChangeTimestamp Last time exchange rate was changed\\r\\n     * @param lastFeeChangeTimestamp Last time fees were changed\\r\\n     * @param devAddress Developer address for fee withdrawal\\r\\n     * @param lastDevAddressChangeTimestamp Last time dev address was changed\\r\\n     */\\r\\n    struct SystemState {\\r\\n        uint256 baseTokenFees;\\r\\n        uint256 swapTokenFees;\\r\\n        uint256 lastRateChangeTimestamp;\\r\\n        uint256 lastFeeChangeTimestamp;\\r\\n        address devAddress;\\r\\n        uint256 lastDevAddressChangeTimestamp;\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when tokens are purchased\\r\\n     * @param buyer Address of the buyer\\r\\n     * @param baseTokenAmount Amount of base tokens used\\r\\n     * @param swapTokenAmount Amount of swap tokens received\\r\\n     * @param fee Fee taken in base tokens\\r\\n     */\\r\\n    event TokensPurchased(address indexed buyer, uint256 baseTokenAmount, uint256 swapTokenAmount, uint256 fee);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when tokens are sold\\r\\n     * @param seller Address of the seller\\r\\n     * @param swapTokenAmount Amount of swap tokens sold\\r\\n     * @param baseTokenAmount Amount of base tokens received\\r\\n     * @param fee Fee taken in swap tokens\\r\\n     */\\r\\n    event TokensSold(address indexed seller, uint256 swapTokenAmount, uint256 baseTokenAmount, uint256 fee);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a collection is added to whitelist\\r\\n     * @param collectionAddress Address of the added collection\\r\\n     */\\r\\n    event WhitelistedCollectionAdded(address indexed collectionAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a collection is removed from whitelist\\r\\n     * @param collectionAddress Address of the removed collection\\r\\n     */\\r\\n    event WhitelistedCollectionRemoved(address indexed collectionAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when exchange rate is updated\\r\\n     * @param newRate New exchange rate\\r\\n     */\\r\\n    event ExchangeRateUpdated(uint256 newRate);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the developer address is updated\\r\\n     * @param newDevAddress The new developer address\\r\\n     */\\r\\n    event DevAddressUpdated(address indexed newDevAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when fees are withdrawn\\r\\n     * @param to Address receiving the fees\\r\\n     * @param baseTokenFees Amount of base token fees withdrawn\\r\\n     * @param swapTokenFees Amount of swap token fees withdrawn\\r\\n     */\\r\\n    event FeesWithdrawn(address indexed to, uint256 baseTokenFees, uint256 swapTokenFees);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when ETH is withdrawn\\r\\n     * @param to Address receiving the ETH\\r\\n     * @param amount Amount of ETH withdrawn\\r\\n     */\\r\\n    event ETHWithdrawn(address indexed to, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when fee rates are updated\\r\\n     * @param newBuyFeeBPS New buy fee rate in basis points\\r\\n     * @param newSellFeeBPS New sell fee rate in basis points\\r\\n     */\\r\\n    event FeeRatesUpdated(uint256 newBuyFeeBPS, uint256 newSellFeeBPS);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a user upgrades to a new stage\\r\\n     * @param user User address\\r\\n     * @param newStage New stage of the user\\r\\n     */\\r\\n    event StageUpgraded(address indexed user, UserStage newStage);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a user uses the light up feature\\r\\n     * @param user User address\\r\\n     * @param burnAmount Amount of tokens burned\\r\\n     * @param newFuel New fuel level\\r\\n     */\\r\\n    event Lit(address indexed user, uint256 burnAmount, uint256 newFuel);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when stage constants are updated\\r\\n     * @param parameter The name of the updated parameter\\r\\n     * @param value The new value\\r\\n     */\\r\\n    event StageConstantsUpdated(string parameter, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when fee configuration cooldowns are updated\\r\\n     * @param rateChangeCooldown New rate change cooldown\\r\\n     * @param appChangeCooldown New app change cooldown\\r\\n     */\\r\\n    event FeeConfigUpdated(uint256 rateChangeCooldown, uint256 appChangeCooldown);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when stage configuration is updated\\r\\n     * @param stage The stage being updated\\r\\n     * @param oldConfig Previous configuration\\r\\n     * @param newConfig New configuration\\r\\n     */\\r\\n    event StageConfigUpdated(UserStage indexed stage, StageConfig oldConfig, StageConfig newConfig);\\r\\n\\r\\n    /* ========== CORE CONSTANTS ========== */\\r\\n    function MAX_WHITELISTED_COLLECTIONS() external pure returns (uint256);\\r\\n\\r\\n    function BASIS_POINTS() external pure returns (uint256);\\r\\n\\r\\n    function MAX_DAILY_MULTIPLIER() external pure returns (uint256);\\r\\n\\r\\n    function MAX_FUEL_LIMIT() external pure returns (uint256);\\r\\n\\r\\n    function MAX_FUEL_RATE() external pure returns (uint256);\\r\\n\\r\\n    function MAX_POINTS_AWARDED() external pure returns (uint256);\\r\\n\\r\\n    function MAX_SELL_BPS_LIMIT() external pure returns (uint256);\\r\\n\\r\\n    function BURN_ADDRESS() external pure returns (address);\\r\\n\\r\\n    /* ========== USER FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Buy tokens using base token\\r\\n     * @param amount Amount of base token to use for purchase\\r\\n     */\\r\\n    function buyTokens(uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sell tokens to receive base token\\r\\n     * @param amount Amount of swap token to sell\\r\\n     */\\r\\n    function sellTokens(uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Increase user's fuel by burning tokens\\r\\n     */\\r\\n    function lightUp() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Upgrade user to next stage when requirements are met\\r\\n     */\\r\\n    function upgradeStage() external;\\r\\n\\r\\n    /* ========== ADMIN FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Set new exchange rate\\r\\n     * @param newRate New exchange rate\\r\\n     */\\r\\n    function setExchangeRate(uint256 newRate) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set new fee rates\\r\\n     * @param newBuyFeeBPS New buy fee in basis points\\r\\n     * @param newSellFeeBPS New sell fee in basis points\\r\\n     */\\r\\n    function setFeeRates(uint256 newBuyFeeBPS, uint256 newSellFeeBPS) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set new developer address\\r\\n     * @param newDevAddress New developer address\\r\\n     */\\r\\n    function setDevAddress(address newDevAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw accumulated fees\\r\\n     */\\r\\n    function withdrawFees() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw ETH from the contract\\r\\n     */\\r\\n    function withdrawETH() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Add a new whitelisted collection\\r\\n     * @param collectionAddress Address of collection to whitelist\\r\\n     */\\r\\n    function addWhitelistedCollection(address collectionAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Remove a whitelisted collection\\r\\n     * @param collectionAddress Address of collection to remove\\r\\n     */\\r\\n    function removeWhitelistedCollection(address collectionAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize the whitelisted collections \\r\\n     * @param collections Array of collection addresses to whitelist\\r\\n     */\\r\\n    function initializeWhitelistedCollections(address[] calldata collections) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Batch add whitelisted collections\\r\\n     * @param _collectionAddresses Array of collection addresses to add\\r\\n     */\\r\\n    function batchAddWhitelistedCollections(address[] memory _collectionAddresses) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update stage configuration\\r\\n     * @param _stage The stage to update\\r\\n     * @param _config New configuration for the stage\\r\\n     */\\r\\n    function setStageConfig(UserStage _stage, StageConfig calldata _config) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update cooldown configuration\\r\\n     * @param _rateChangeCooldown New rate change cooldown\\r\\n     * @param _appChangeCooldown New app change cooldown\\r\\n     */\\r\\n    function setCooldownConfig(uint256 _rateChangeCooldown, uint256 _appChangeCooldown) external;\\r\\n\\r\\n    /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Check if fee rates can be changed\\r\\n     * @return bool Whether fee rates can be changed\\r\\n     */\\r\\n    function canChangeFeeRates() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Check if exchange rate can be changed\\r\\n     * @return bool Whether exchange rate can be changed\\r\\n     */\\r\\n    function canChangeExchangeRate() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Check if user has a valid NFT key\\r\\n     * @param user Address to check\\r\\n     * @return bool Whether user has a valid key\\r\\n     */\\r\\n    function hasValidKey(address user) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the whitelisted collection for the first valid key a user has\\r\\n     * @param user Address to check\\r\\n     * @return address First valid collection address\\r\\n     */\\r\\n    function getFirstValidCollection(address user) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get all whitelisted collections\\r\\n     * @return address[] Array of whitelisted collection addresses\\r\\n     */\\r\\n    function getWhitelistedCollections() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Get stage constants\\r\\n     * @return _stageConstants The stage constants\\r\\n     */\\r\\n    function getStageConstants() external view returns (StageConstants memory _stageConstants);\\r\\n\\r\\n    /**\\r\\n     * @notice Get fee configuration\\r\\n     * @return _feeConfig The fee configuration\\r\\n     */\\r\\n    function getFeeConfig() external view returns (FeeConfig memory _feeConfig);\\r\\n\\r\\n    /**\\r\\n     * @notice Get token configuration\\r\\n     * @return _tokenConfig The token configuration\\r\\n     */\\r\\n    function getTokenConfig() external view returns (TokenConfig memory _tokenConfig);\\r\\n\\r\\n    /**\\r\\n     * @notice Get system state\\r\\n     * @return _systemState The system state\\r\\n     */\\r\\n    function getSystemState() external view returns (SystemState memory _systemState);\\r\\n\\r\\n    /**\\r\\n     * @notice Get user state\\r\\n     * @param user The user address\\r\\n     * @return _userState The user state\\r\\n     */\\r\\n    function getUserState(address user) external view returns (UserState memory _userState);\\r\\n\\r\\n    /**\\r\\n     * @notice Get exchange rate\\r\\n     * @return _exchangeRate The exchange rate\\r\\n     */\\r\\n    function getExchangeRate() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get stage configuration\\r\\n     * @param _stage The stage to get configuration for\\r\\n     * @return _stageConfig The stage configuration\\r\\n     */\\r\\n    function getStageConfig(UserStage _stage) external view returns (StageConfig memory _stageConfig);\\r\\n}\\r\\n\",\"keccak256\":\"0x72d4269df3ffa2230d77ff64585866df2ae9a3fb07b0fa9893c510d532acd750\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620032b3380380620032b38339810160408190526200003491620004ba565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000066816200044d565b50600180556002805460ff191690556000829003620000985760405163a2ec3a5560e01b815260040160405180910390fd5b60408051606080820183526001600160a01b038781168084528782166020808601829052948601889052600c80546001600160a01b03199081169093179055600d805483169091179055600e879055845160c08082018752600080835282870181905242838901819052838701819052948916608080850182905260a0948501879052600f83905560108390556011879055601287905560138054909616909117909455601494909455865180830188526103e8808252606482890181905260c8838b018190528389018890529286018790526007919091556008819055600991909155600a859055600b85905587518085018952623b538080825262015180828a01819052683635c9adc5dea00000838c0181905269010f0cf064dd59200000938a018490526003929092556004556005818155600692909255895161010081018b52678ac7230489e800008152988901879052988801819052958701869052928601949094528401949094526113889183019190915260e082019290925290601790808152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701559050506040518061010001604052806802b5e3af16b1880000815260200160148152602001600f8152602001600581526020016005815260200169010f0cf064dd592000008152602001611770815260200160648152506017600060016002811115620002ec57620002ec6200050e565b60028111156200030057620003006200050e565b8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015590505060405180610100016040528068056bc75e2d6310000081526020016014815260200160148152602001600581526020016005815260200169043c33c19375648000008152602001611b588152602001606481525060176000600280811115620003ce57620003ce6200050e565b6002811115620003e257620003e26200050e565b8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701559050505050505062000524565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620004b557600080fd5b919050565b60008060008060808587031215620004d157600080fd5b620004dc856200049d565b9350620004ec602086016200049d565b92506040850151915062000503606086016200049d565b905092959194509250565b634e487b7160e01b600052602160045260246000fd5b612d7f80620005346000396000f3fe6080604052600436106102555760003560e01c80638438296d11610139578063d0d41fe1116100b6578063e29091501161007a578063e290915014610742578063e6aa216c1461076f578063f2fde38b14610784578063fccc2813146107a4578063feaca583146107cc578063ff8fefc5146107ec57600080fd5b8063d0d41fe1146106b7578063d18e629c146106d7578063db068e0e146106f7578063e086e5ec14610717578063e1f1c4a71461072c57600080fd5b806390eff969116100fd57806390eff96914610442578063a1441f4f146105e4578063abd6dfb014610657578063b1c5b8a714610677578063c6ae9dfb1461069757600080fd5b80638438296d146104c65780638456cb59146105665780638b0279d21461057b5780638ca8cc9b1461059d5780638da5cb5b146105b257600080fd5b8063476343ee116101d25780635fec87c5116101965780635fec87c5146104c657806362553e14146104db578063641208f1146104fb5780636c11bcd3146105115780636f0dc1bd14610531578063715018a61461055157600080fd5b8063476343ee1461040a57806349fea5171461041f5780634faf0e71146104425780635c975abb146104575780635fbbc0d21461046f57600080fd5b80632f036c90116102195780632f036c90146103635780633610724e146103885780633f4ba83a146103a8578063416ae768146103bd5780634205ecf4146103ea57600080fd5b806304898ad7146102615780630602f2f914610283578063168c89cf146102985780631e70a17c146102ad57806328fa777f146102fe57600080fd5b3661025c57005b600080fd5b34801561026d57600080fd5b5061028161027c366004612936565b61080c565b005b34801561028f57600080fd5b50610281610951565b3480156102a457600080fd5b50610281610b39565b3480156102b957600080fd5b506102c2610cca565b6040516102f591908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b60405180910390f35b34801561030a57600080fd5b50610313610d22565b6040516102f59190815181526020808301519082015260408083015190820152606080830151908201526080808301516001600160a01b03169082015260a0918201519181019190915260c00190565b34801561036f57600080fd5b50610378610daa565b60405190151581526020016102f5565b34801561039457600080fd5b506102816103a33660046129ab565b610dc4565b3480156103b457600080fd5b50610281611054565b3480156103c957600080fd5b506103dd6103d83660046129c4565b611064565b6040516102f59190612a25565b3480156103f657600080fd5b50610281610405366004612a84565b611126565b34801561041657600080fd5b506102816113e6565b34801561042b57600080fd5b50610434600a81565b6040519081526020016102f5565b34801561044e57600080fd5b50610434606481565b34801561046357600080fd5b5060025460ff16610378565b34801561047b57600080fd5b506104846114d2565b6040516102f59190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b3480156104d257600080fd5b50610434600581565b3480156104e757600080fd5b506102816104f63660046129c4565b611539565b34801561050757600080fd5b50610434611b5881565b34801561051d57600080fd5b5061028161052c3660046129ab565b611656565b34801561053d57600080fd5b5061028161054c366004612ac5565b611a0a565b34801561055d57600080fd5b50610281611ab9565b34801561057257600080fd5b50610281611acb565b34801561058757600080fd5b50610590611adb565b6040516102f59190612ae7565b3480156105a957600080fd5b50610378611b3d565b3480156105be57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016102f5565b3480156105f057600080fd5b506040805160608082018352600080835260208084018290529284015282518082018452600c546001600160a01b03908116808352600d548216838601908152600e54938701938452865191825251909116938101939093525192820192909252016102f5565b34801561066357600080fd5b506103786106723660046129c4565b611b4f565b34801561068357600080fd5b506105cc6106923660046129c4565b611c23565b3480156106a357600080fd5b506102816106b2366004612936565b611d01565b3480156106c357600080fd5b506102816106d23660046129c4565b611e6f565b3480156106e357600080fd5b506102816106f23660046129c4565b611f1c565b34801561070357600080fd5b506102816107123660046129ab565b611fe6565b34801561072357600080fd5b5061028161207e565b34801561073857600080fd5b5061043461271081565b34801561074e57600080fd5b5061076261075d366004612b34565b612183565b6040516102f59190612b9d565b34801561077b57600080fd5b50600e54610434565b34801561079057600080fd5b5061028161079f3660046129c4565b612263565b3480156107b057600080fd5b506105cc732ef7dec913e4127fd0f94b32eead23ee6314359881565b3480156107d857600080fd5b506102816107e7366004612ac5565b6122a3565b3480156107f857600080fd5b50610281610807366004612936565b612355565b6108146124d4565b601554600a90610825908390612bc2565b111561084457604051630ef0d4a960e11b815260040160405180910390fd5b60005b8181101561094c5761087e83838381811061086457610864612bd5565b905060200201602081019061087991906129c4565b612501565b61093a57601583838381811061089657610896612bd5565b90506020020160208101906108ab91906129c4565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790558282828181106108ef576108ef612bd5565b905060200201602081019061090491906129c4565b6001600160a01b03167f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9260405160405180910390a25b8061094481612beb565b915050610847565b505050565b61095a33611b4f565b6109775760405163e4c147b760e01b815260040160405180910390fd5b61097f612561565b610987612585565b3360009081526016602052604090206002815460ff1660028111156109ae576109ae6129ed565b036109cc576040516323c3457d60e21b815260040160405180910390fd5b805460009060ff1660028111156109e5576109e56129ed565b6109f0906001612bc2565b6002811115610a0157610a016129ed565b905060176000826002811115610a1957610a196129ed565b6002811115610a2a57610a2a6129ed565b81526020019081526020016000206001015482600101541015610a6057604051635d25a49360e01b815260040160405180910390fd5b60176000826002811115610a7657610a766129ed565b6002811115610a8757610a876129ed565b81526020019081526020016000206002015482600201541015610abd57604051630797028d60e01b815260040160405180910390fd5b81548190839060ff19166001836002811115610adb57610adb6129ed565b02179055506000600183018190556002830155815460405133917fb70d74b9d8c0fda2b85abb8b3f56ec446bbb704a0f82cff6e20bb6958778407891610b249160ff1690612c04565b60405180910390a25050610b3760018055565b565b610b4233611b4f565b610b5f5760405163e4c147b760e01b815260040160405180910390fd5b610b67612561565b610b6f612585565b3360009081526016602052604081208054909190601790829060ff166002811115610b9c57610b9c6129ed565b6002811115610bad57610bad6129ed565b8152602080820192909252604090810160002081516101008101835281548082526001830154948201949094526002820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e0820152600c54909250610c4a916001600160a01b03909116903390732ef7dec913e4127fd0f94b32eead23ee63143598906125af565b6000610c6a82606001518460020154610c639190612bc2565b6064612616565b90508260020154811115610c8057600283018190555b8151604080519182526020820183905233917fdbfd1f1a3141f27f6376b66eab3b06a7aed44b4adaa74c1cde2953f60b4a901e91015b60405180910390a2505050610b3760018055565b610cf56040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526003548152600454602082015260055491810191909152600654606082015290565b610d646040518060c001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081525090565b506040805160c081018252600f54815260105460208201526011549181019190915260125460608201526013546001600160a01b0316608082015260145460a082015290565b600a54601154600091610dbc91612bc2565b421015905090565b610dcc612585565b610dd533611b4f565b610df25760405163e4c147b760e01b815260040160405180910390fd5b610dfa612561565b600554811015610e1d57604051631b88e6f960e31b815260040160405180910390fd5b600c546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e899190612c12565b1015610ea857604051631e9acf1760e31b815260040160405180910390fd5b60085460009061271090610ebc9084612c2b565b610ec69190612c42565b600e54909150600090610ed98385612c64565b610ee39190612c2b565b905081600f6000016000828254610efa9190612bc2565b90915550503360009081526016602052604081208054909190601790829060ff166002811115610f2c57610f2c6129ed565b6002811115610f3d57610f3d6129ed565b8152602001908152602001600020604051806101000160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090508060a001518510610fd2578060800151826001016000828254610fcc9190612bc2565b90915550505b600c54610fea906001600160a01b03163330886125af565b600d54611001906001600160a01b03163385612630565b604080518681526020810185905290810185905233907f0d1a0d5e3d583a0e92588799dd06e50fd78c07daf05f0cc06d7b848b1ca445f19060600160405180910390a25050505061105160018055565b50565b61105c6124d4565b610b37612661565b61109e6040805160c08101909152806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03821660009081526016602052604090819020815160c081019092528054829060ff1660028111156110d9576110d96129ed565b60028111156110ea576110ea6129ed565b81526001820154602082015260028201546040820152600382015460608201526004820154608082015260059091015460a09091015292915050565b61112e6124d4565b6064600060c08301358211806111495750611b588360c00135115b156111675760405163530da5b960e01b815260040160405180910390fd5b808360600135148061117d575060058360600135115b1561119b57604051630816fbc760e11b815260040160405180910390fd5b80836080013514806111b1575060058360800135115b156111cf576040516308226f8b60e01b815260040160405180910390fd5b808360e0013514806111e5575060648360e00135115b156112035760405163de35777160e01b815260040160405180910390fd5b8235819003611225576040516302075cc160e41b815260040160405180910390fd5b8083602001350361124957604051639541404d60e01b815260040160405180910390fd5b8083604001350361126d5760405163ecb4113760e01b815260040160405180910390fd5b808360a00135036112915760405163062e16f560e11b815260040160405180910390fd5b6000601760008660028111156112a9576112a96129ed565b60028111156112ba576112ba6129ed565b815260200190815260200160002090506000816040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905084600001358260000181905550846020013582600101819055508460400135826002018190555084606001358260030181905550846080013582600401819055508460a0013582600501819055508460c0013582600601819055508460e0013582600701819055508560028111156113a5576113a56129ed565b7fc58b1e897dd4f5f2b7b3549304a2614500629e7b5954f911df41b4f9b27b46bb82846040516113d6929190612c77565b60405180910390a2505050505050565b6113ee612585565b6000546001600160a01b031633148061141157506013546001600160a01b031633145b61142e57604051635c427cd960e01b815260040160405180910390fd5b611436612561565b601354600f8054601080546000938490559290556001600160a01b039092169190811561147457600c54611474906001600160a01b03168484612630565b801561149157600d54611491906001600160a01b03168483612630565b60408051838152602081018390526001600160a01b038516917fdeb5099d7943aa2b4c1142e5d53d2f7636aa8f7bd130ec79816f151572bcdf459101610cb6565b6115046040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b506040805160a0810182526007548152600854602082015260095491810191909152600a546060820152600b54608082015290565b6115416124d4565b600061154c826126b3565b6015549091508110611571576040516387ad0f3f60e01b815260040160405180910390fd5b6015805461158190600190612c64565b8154811061159157611591612bd5565b600091825260209091200154601580546001600160a01b0390921691839081106115bd576115bd612bd5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060158054806115fc576115fc612ce2565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f0c1f38a01270cb49fbf915151e8a1908ccf738f8c3d79a1677f8fd879b56bdef91a25050565b61165e612585565b61166733611b4f565b6116845760405163e4c147b760e01b815260040160405180910390fd5b61168c612561565b6006548110156116af57604051631b88e6f960e31b815260040160405180910390fd5b600954600090612710906116c39084612c2b565b6116cd9190612c42565b905060006116db8284612c64565b600e549091506000906116ee9083612c42565b90508060000361171157604051631b88e6f960e31b815260040160405180910390fd5b3360009081526016602052604081208054909190601790829060ff16600281111561173e5761173e6129ed565b600281111561174f5761174f6129ed565b81526020808201929092526040908101600090812082516101008101845281548152600182015494810194909452600281015484840152600381015460608501526004808201546080860152600582015460a0860152600682015460c086015260079091015460e0850152600c5492516370a0823160e01b81523091810191909152929350916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182b9190612c12565b905060006127108360c00151836118429190612c2b565b61184c9190612c42565b90508085111561186f57604051632509499f60e11b815260040160405180910390fd5b6002845460ff166002811115611887576118876129ed565b14801561189357508085145b156118d05760038054908501546118aa9190612bc2565b42116118c9576040516308516f7760e11b815260040160405180910390fd5b4260038501555b60045460058501546118e29190612bc2565b4211156118f757600060048501554260058501555b600084600201548460e0015161190d9190612bc2565b8460a0015161191c9190612c2b565b90508089866004015461192f9190612bc2565b111561194e57604051636a6c16ab60e01b815260040160405180910390fd5b888560040160008282546119629190612bc2565b9091555050600060028601819055601080548a9290611982908490612bc2565b9091555050600d5461199f906001600160a01b031633308c6125af565b600c546119b6906001600160a01b03163388612630565b604080518a81526020810188905290810189905233907f6db63bebf1e6540277744df32846ebdb98385b1a73f2d5de49b28348add63f509060600160405180910390a2505050505050505061105160018055565b611a126124d4565b6212750062ed4e0081841080611a2757508084115b15611a4557604051637475d84d60e11b815260040160405180910390fd5b81831080611a5257508083115b15611a7057604051637475d84d60e11b815260040160405180910390fd5b600a849055600b83905560408051858152602081018590527f1eab951da250f7e001396235b296e29bc73945b6a52fd471dd8f3de3398634be910160405180910390a150505050565b611ac16124d4565b610b37600061271a565b611ad36124d4565b610b3761276a565b60606015805480602002602001604051908101604052809291908181526020018280548015611b3357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b15575b5050505050905090565b600b54601254600091610dbc91612bc2565b6015546000908103611b6357506000919050565b60005b601554811015611c1a5760158181548110611b8357611b83612bd5565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03858116600483015290911690636d8ea5b490602401602060405180830381865afa158015611bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfa9190612cf8565b15611c085750600192915050565b80611c1281612beb565b915050611b66565b50600092915050565b6000805b601554811015611c1a5760158181548110611c4457611c44612bd5565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03858116600483015290911690636d8ea5b490602401602060405180830381865afa158015611c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbb9190612cf8565b15611cef5760158181548110611cd357611cd3612bd5565b6000918252602090912001546001600160a01b03169392505050565b80611cf981612beb565b915050611c27565b611d096124d4565b80805b8015611e6957600019016000848483818110611d2a57611d2a612bd5565b9050602002016020810190611d3f91906129c4565b90506000611d4c826126b3565b6015549091508110611d71576040516387ad0f3f60e01b815260040160405180910390fd5b601554600090611d8390600190612c64565b9050808214611dfa5760158181548110611d9f57611d9f612bd5565b600091825260209091200154601580546001600160a01b039092169184908110611dcb57611dcb612bd5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6015805480611e0b57611e0b612ce2565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038516917f0c1f38a01270cb49fbf915151e8a1908ccf738f8c3d79a1677f8fd879b56bdef91a2505050611d0c565b50505050565b611e776124d4565b6001600160a01b038116611e9e57604051636a37fde960e01b815260040160405180910390fd5b600b54601454611eae9190612bc2565b421015611ece576040516326f4231b60e11b815260040160405180910390fd5b601380546001600160a01b0319166001600160a01b038316908117909155426014556040517f34830ecd12aee38e030de8db2aab7662959ba614a8af53e095041d13deced11d90600090a250565b611f246124d4565b601554600a11611f4757604051630ef0d4a960e11b815260040160405180910390fd5b611f5081612501565b15611f6e57604051633b461ab760e01b815260040160405180910390fd5b6015805460018101825560009182527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750180546001600160a01b0319166001600160a01b03841690811790915560405190917f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9291a250565b611fee6124d4565b600a54601154611ffe9190612bc2565b42101561201e5760405163418ffd5d60e01b815260040160405180910390fd5b8060000361203f5760405163a2ec3a5560e01b815260040160405180910390fd5b600e819055426011556040518181527f388f446e9526fe5c9af20a5919b342370c8a7c0cb05245afe1e545658fa3cdba9060200160405180910390a150565b612086612585565b6000546001600160a01b03163314806120a957506013546001600160a01b031633145b6120c657604051635c427cd960e01b815260040160405180910390fd5b6120ce612561565b6013546040516001600160a01b03909116904790600090839083908381818185875af1925050503d8060008114612121576040519150601f19603f3d011682016040523d82523d6000602084013e612126565b606091505b50509050806121485760405163b12d13eb60e01b815260040160405180910390fd5b826001600160a01b03167f94b2de810873337ed265c5f8cf98c9cffefa06b8607f9a2f1fbaebdfbcfbef1c83604051610cb691815260200190565b6121cb60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b601760008360028111156121e1576121e16129ed565b60028111156121f2576121f26129ed565b815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b61226b6124d4565b6001600160a01b03811661229a57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6110518161271a565b6122ab6124d4565b600b546012546122bb9190612bc2565b4210156122db576040516376fd201760e01b815260040160405180910390fd5b6007548211806122ec575060075481115b1561230a5760405163530da5b960e01b815260040160405180910390fd5b600882905560098190554260125560408051838152602081018390527f4f672c50736ba0fe8a4825ecfde8bcd931727422a77ac89af44fccce2746e0b3910160405180910390a15050565b6000546001600160a01b031633148061237857506013546001600160a01b031633145b61239557604051635c427cd960e01b815260040160405180910390fd5b601554600a906123a6908390612bc2565b11156123c557604051630ef0d4a960e11b815260040160405180910390fd5b601554156123e657604051630397a11d60e41b815260040160405180910390fd5b60005b8181101561094c5761240683838381811061086457610864612bd5565b6124c257601583838381811061241e5761241e612bd5565b905060200201602081019061243391906129c4565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905582828281811061247757612477612bd5565b905060200201602081019061248c91906129c4565b6001600160a01b03167f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9260405160405180910390a25b806124cc81612beb565b9150506123e9565b6000546001600160a01b03163314610b375760405163118cdaa760e01b8152336004820152602401612291565b6000805b601554811015611c1a57826001600160a01b03166015828154811061252c5761252c612bd5565b6000918252602090912001546001600160a01b03160361254f5750600192915050565b8061255981612beb565b915050612505565b60025460ff1615610b375760405163d93c066560e01b815260040160405180910390fd5b6002600154036125a857604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b038481166024830152838116604483015260648201839052611e699186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506127a7565b60008183106126255781612627565b825b90505b92915050565b6040516001600160a01b0383811660248301526044820183905261094c91859182169063a9059cbb906064016125e4565b61266961280a565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000805b60155481101561271057826001600160a01b0316601582815481106126de576126de612bd5565b6000918252602090912001546001600160a01b0316036126fe5792915050565b8061270881612beb565b9150506126b7565b5050601554919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612772612561565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126963390565b60006127bc6001600160a01b0384168361282d565b905080516000141580156127e15750808060200190518101906127df9190612cf8565b155b1561094c57604051635274afe760e01b81526001600160a01b0384166004820152602401612291565b60025460ff16610b3757604051638dfc202b60e01b815260040160405180910390fd5b60606126278383600084600080856001600160a01b031684866040516128539190612d1a565b60006040518083038185875af1925050503d8060008114612890576040519150601f19603f3d011682016040523d82523d6000602084013e612895565b606091505b50915091506128a58683836128b1565b925050505b9392505050565b6060826128c6576128c18261290d565b6128aa565b81511580156128dd57506001600160a01b0384163b155b1561290657604051639996b31560e01b81526001600160a01b0385166004820152602401612291565b50806128aa565b80511561291d5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000806020838503121561294957600080fd5b823567ffffffffffffffff8082111561296157600080fd5b818501915085601f83011261297557600080fd5b81358181111561298457600080fd5b8660208260051b850101111561299957600080fd5b60209290920196919550909350505050565b6000602082840312156129bd57600080fd5b5035919050565b6000602082840312156129d657600080fd5b81356001600160a01b03811681146128aa57600080fd5b634e487b7160e01b600052602160045260246000fd5b60038110612a2157634e487b7160e01b600052602160045260246000fd5b9052565b600060c082019050612a38828451612a03565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b803560038110612a7f57600080fd5b919050565b600080828403610120811215612a9957600080fd5b612aa284612a70565b9250610100601f1982011215612ab757600080fd5b506020830190509250929050565b60008060408385031215612ad857600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015612b285783516001600160a01b031683529284019291840191600101612b03565b50909695505050505050565b600060208284031215612b4657600080fd5b61262782612a70565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b610100810161262a8284612b4f565b634e487b7160e01b600052601160045260246000fd5b8082018082111561262a5761262a612bac565b634e487b7160e01b600052603260045260246000fd5b600060018201612bfd57612bfd612bac565b5060010190565b6020810161262a8284612a03565b600060208284031215612c2457600080fd5b5051919050565b808202811582820484141761262a5761262a612bac565b600082612c5f57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561262a5761262a612bac565b6102008101612c868285612b4f565b8254610100830152600183015461012083015260028301546101408301526003830154610160830152600483015461018083015260058301546101a083015260068301546101c083015260078301546101e08301529392505050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215612d0a57600080fd5b815180151581146128aa57600080fd5b6000825160005b81811015612d3b5760208186018101518583015201612d21565b50600092019182525091905056fea264697066735822122094ef19b9d06c85f91e71633d6ee9324977c37787a50bf9700831ec3c4cc047e464736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102555760003560e01c80638438296d11610139578063d0d41fe1116100b6578063e29091501161007a578063e290915014610742578063e6aa216c1461076f578063f2fde38b14610784578063fccc2813146107a4578063feaca583146107cc578063ff8fefc5146107ec57600080fd5b8063d0d41fe1146106b7578063d18e629c146106d7578063db068e0e146106f7578063e086e5ec14610717578063e1f1c4a71461072c57600080fd5b806390eff969116100fd57806390eff96914610442578063a1441f4f146105e4578063abd6dfb014610657578063b1c5b8a714610677578063c6ae9dfb1461069757600080fd5b80638438296d146104c65780638456cb59146105665780638b0279d21461057b5780638ca8cc9b1461059d5780638da5cb5b146105b257600080fd5b8063476343ee116101d25780635fec87c5116101965780635fec87c5146104c657806362553e14146104db578063641208f1146104fb5780636c11bcd3146105115780636f0dc1bd14610531578063715018a61461055157600080fd5b8063476343ee1461040a57806349fea5171461041f5780634faf0e71146104425780635c975abb146104575780635fbbc0d21461046f57600080fd5b80632f036c90116102195780632f036c90146103635780633610724e146103885780633f4ba83a146103a8578063416ae768146103bd5780634205ecf4146103ea57600080fd5b806304898ad7146102615780630602f2f914610283578063168c89cf146102985780631e70a17c146102ad57806328fa777f146102fe57600080fd5b3661025c57005b600080fd5b34801561026d57600080fd5b5061028161027c366004612936565b61080c565b005b34801561028f57600080fd5b50610281610951565b3480156102a457600080fd5b50610281610b39565b3480156102b957600080fd5b506102c2610cca565b6040516102f591908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b60405180910390f35b34801561030a57600080fd5b50610313610d22565b6040516102f59190815181526020808301519082015260408083015190820152606080830151908201526080808301516001600160a01b03169082015260a0918201519181019190915260c00190565b34801561036f57600080fd5b50610378610daa565b60405190151581526020016102f5565b34801561039457600080fd5b506102816103a33660046129ab565b610dc4565b3480156103b457600080fd5b50610281611054565b3480156103c957600080fd5b506103dd6103d83660046129c4565b611064565b6040516102f59190612a25565b3480156103f657600080fd5b50610281610405366004612a84565b611126565b34801561041657600080fd5b506102816113e6565b34801561042b57600080fd5b50610434600a81565b6040519081526020016102f5565b34801561044e57600080fd5b50610434606481565b34801561046357600080fd5b5060025460ff16610378565b34801561047b57600080fd5b506104846114d2565b6040516102f59190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b3480156104d257600080fd5b50610434600581565b3480156104e757600080fd5b506102816104f63660046129c4565b611539565b34801561050757600080fd5b50610434611b5881565b34801561051d57600080fd5b5061028161052c3660046129ab565b611656565b34801561053d57600080fd5b5061028161054c366004612ac5565b611a0a565b34801561055d57600080fd5b50610281611ab9565b34801561057257600080fd5b50610281611acb565b34801561058757600080fd5b50610590611adb565b6040516102f59190612ae7565b3480156105a957600080fd5b50610378611b3d565b3480156105be57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016102f5565b3480156105f057600080fd5b506040805160608082018352600080835260208084018290529284015282518082018452600c546001600160a01b03908116808352600d548216838601908152600e54938701938452865191825251909116938101939093525192820192909252016102f5565b34801561066357600080fd5b506103786106723660046129c4565b611b4f565b34801561068357600080fd5b506105cc6106923660046129c4565b611c23565b3480156106a357600080fd5b506102816106b2366004612936565b611d01565b3480156106c357600080fd5b506102816106d23660046129c4565b611e6f565b3480156106e357600080fd5b506102816106f23660046129c4565b611f1c565b34801561070357600080fd5b506102816107123660046129ab565b611fe6565b34801561072357600080fd5b5061028161207e565b34801561073857600080fd5b5061043461271081565b34801561074e57600080fd5b5061076261075d366004612b34565b612183565b6040516102f59190612b9d565b34801561077b57600080fd5b50600e54610434565b34801561079057600080fd5b5061028161079f3660046129c4565b612263565b3480156107b057600080fd5b506105cc732ef7dec913e4127fd0f94b32eead23ee6314359881565b3480156107d857600080fd5b506102816107e7366004612ac5565b6122a3565b3480156107f857600080fd5b50610281610807366004612936565b612355565b6108146124d4565b601554600a90610825908390612bc2565b111561084457604051630ef0d4a960e11b815260040160405180910390fd5b60005b8181101561094c5761087e83838381811061086457610864612bd5565b905060200201602081019061087991906129c4565b612501565b61093a57601583838381811061089657610896612bd5565b90506020020160208101906108ab91906129c4565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790558282828181106108ef576108ef612bd5565b905060200201602081019061090491906129c4565b6001600160a01b03167f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9260405160405180910390a25b8061094481612beb565b915050610847565b505050565b61095a33611b4f565b6109775760405163e4c147b760e01b815260040160405180910390fd5b61097f612561565b610987612585565b3360009081526016602052604090206002815460ff1660028111156109ae576109ae6129ed565b036109cc576040516323c3457d60e21b815260040160405180910390fd5b805460009060ff1660028111156109e5576109e56129ed565b6109f0906001612bc2565b6002811115610a0157610a016129ed565b905060176000826002811115610a1957610a196129ed565b6002811115610a2a57610a2a6129ed565b81526020019081526020016000206001015482600101541015610a6057604051635d25a49360e01b815260040160405180910390fd5b60176000826002811115610a7657610a766129ed565b6002811115610a8757610a876129ed565b81526020019081526020016000206002015482600201541015610abd57604051630797028d60e01b815260040160405180910390fd5b81548190839060ff19166001836002811115610adb57610adb6129ed565b02179055506000600183018190556002830155815460405133917fb70d74b9d8c0fda2b85abb8b3f56ec446bbb704a0f82cff6e20bb6958778407891610b249160ff1690612c04565b60405180910390a25050610b3760018055565b565b610b4233611b4f565b610b5f5760405163e4c147b760e01b815260040160405180910390fd5b610b67612561565b610b6f612585565b3360009081526016602052604081208054909190601790829060ff166002811115610b9c57610b9c6129ed565b6002811115610bad57610bad6129ed565b8152602080820192909252604090810160002081516101008101835281548082526001830154948201949094526002820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e0820152600c54909250610c4a916001600160a01b03909116903390732ef7dec913e4127fd0f94b32eead23ee63143598906125af565b6000610c6a82606001518460020154610c639190612bc2565b6064612616565b90508260020154811115610c8057600283018190555b8151604080519182526020820183905233917fdbfd1f1a3141f27f6376b66eab3b06a7aed44b4adaa74c1cde2953f60b4a901e91015b60405180910390a2505050610b3760018055565b610cf56040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526003548152600454602082015260055491810191909152600654606082015290565b610d646040518060c001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081525090565b506040805160c081018252600f54815260105460208201526011549181019190915260125460608201526013546001600160a01b0316608082015260145460a082015290565b600a54601154600091610dbc91612bc2565b421015905090565b610dcc612585565b610dd533611b4f565b610df25760405163e4c147b760e01b815260040160405180910390fd5b610dfa612561565b600554811015610e1d57604051631b88e6f960e31b815260040160405180910390fd5b600c546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e899190612c12565b1015610ea857604051631e9acf1760e31b815260040160405180910390fd5b60085460009061271090610ebc9084612c2b565b610ec69190612c42565b600e54909150600090610ed98385612c64565b610ee39190612c2b565b905081600f6000016000828254610efa9190612bc2565b90915550503360009081526016602052604081208054909190601790829060ff166002811115610f2c57610f2c6129ed565b6002811115610f3d57610f3d6129ed565b8152602001908152602001600020604051806101000160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090508060a001518510610fd2578060800151826001016000828254610fcc9190612bc2565b90915550505b600c54610fea906001600160a01b03163330886125af565b600d54611001906001600160a01b03163385612630565b604080518681526020810185905290810185905233907f0d1a0d5e3d583a0e92588799dd06e50fd78c07daf05f0cc06d7b848b1ca445f19060600160405180910390a25050505061105160018055565b50565b61105c6124d4565b610b37612661565b61109e6040805160c08101909152806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03821660009081526016602052604090819020815160c081019092528054829060ff1660028111156110d9576110d96129ed565b60028111156110ea576110ea6129ed565b81526001820154602082015260028201546040820152600382015460608201526004820154608082015260059091015460a09091015292915050565b61112e6124d4565b6064600060c08301358211806111495750611b588360c00135115b156111675760405163530da5b960e01b815260040160405180910390fd5b808360600135148061117d575060058360600135115b1561119b57604051630816fbc760e11b815260040160405180910390fd5b80836080013514806111b1575060058360800135115b156111cf576040516308226f8b60e01b815260040160405180910390fd5b808360e0013514806111e5575060648360e00135115b156112035760405163de35777160e01b815260040160405180910390fd5b8235819003611225576040516302075cc160e41b815260040160405180910390fd5b8083602001350361124957604051639541404d60e01b815260040160405180910390fd5b8083604001350361126d5760405163ecb4113760e01b815260040160405180910390fd5b808360a00135036112915760405163062e16f560e11b815260040160405180910390fd5b6000601760008660028111156112a9576112a96129ed565b60028111156112ba576112ba6129ed565b815260200190815260200160002090506000816040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905084600001358260000181905550846020013582600101819055508460400135826002018190555084606001358260030181905550846080013582600401819055508460a0013582600501819055508460c0013582600601819055508460e0013582600701819055508560028111156113a5576113a56129ed565b7fc58b1e897dd4f5f2b7b3549304a2614500629e7b5954f911df41b4f9b27b46bb82846040516113d6929190612c77565b60405180910390a2505050505050565b6113ee612585565b6000546001600160a01b031633148061141157506013546001600160a01b031633145b61142e57604051635c427cd960e01b815260040160405180910390fd5b611436612561565b601354600f8054601080546000938490559290556001600160a01b039092169190811561147457600c54611474906001600160a01b03168484612630565b801561149157600d54611491906001600160a01b03168483612630565b60408051838152602081018390526001600160a01b038516917fdeb5099d7943aa2b4c1142e5d53d2f7636aa8f7bd130ec79816f151572bcdf459101610cb6565b6115046040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b506040805160a0810182526007548152600854602082015260095491810191909152600a546060820152600b54608082015290565b6115416124d4565b600061154c826126b3565b6015549091508110611571576040516387ad0f3f60e01b815260040160405180910390fd5b6015805461158190600190612c64565b8154811061159157611591612bd5565b600091825260209091200154601580546001600160a01b0390921691839081106115bd576115bd612bd5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060158054806115fc576115fc612ce2565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f0c1f38a01270cb49fbf915151e8a1908ccf738f8c3d79a1677f8fd879b56bdef91a25050565b61165e612585565b61166733611b4f565b6116845760405163e4c147b760e01b815260040160405180910390fd5b61168c612561565b6006548110156116af57604051631b88e6f960e31b815260040160405180910390fd5b600954600090612710906116c39084612c2b565b6116cd9190612c42565b905060006116db8284612c64565b600e549091506000906116ee9083612c42565b90508060000361171157604051631b88e6f960e31b815260040160405180910390fd5b3360009081526016602052604081208054909190601790829060ff16600281111561173e5761173e6129ed565b600281111561174f5761174f6129ed565b81526020808201929092526040908101600090812082516101008101845281548152600182015494810194909452600281015484840152600381015460608501526004808201546080860152600582015460a0860152600682015460c086015260079091015460e0850152600c5492516370a0823160e01b81523091810191909152929350916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182b9190612c12565b905060006127108360c00151836118429190612c2b565b61184c9190612c42565b90508085111561186f57604051632509499f60e11b815260040160405180910390fd5b6002845460ff166002811115611887576118876129ed565b14801561189357508085145b156118d05760038054908501546118aa9190612bc2565b42116118c9576040516308516f7760e11b815260040160405180910390fd5b4260038501555b60045460058501546118e29190612bc2565b4211156118f757600060048501554260058501555b600084600201548460e0015161190d9190612bc2565b8460a0015161191c9190612c2b565b90508089866004015461192f9190612bc2565b111561194e57604051636a6c16ab60e01b815260040160405180910390fd5b888560040160008282546119629190612bc2565b9091555050600060028601819055601080548a9290611982908490612bc2565b9091555050600d5461199f906001600160a01b031633308c6125af565b600c546119b6906001600160a01b03163388612630565b604080518a81526020810188905290810189905233907f6db63bebf1e6540277744df32846ebdb98385b1a73f2d5de49b28348add63f509060600160405180910390a2505050505050505061105160018055565b611a126124d4565b6212750062ed4e0081841080611a2757508084115b15611a4557604051637475d84d60e11b815260040160405180910390fd5b81831080611a5257508083115b15611a7057604051637475d84d60e11b815260040160405180910390fd5b600a849055600b83905560408051858152602081018590527f1eab951da250f7e001396235b296e29bc73945b6a52fd471dd8f3de3398634be910160405180910390a150505050565b611ac16124d4565b610b37600061271a565b611ad36124d4565b610b3761276a565b60606015805480602002602001604051908101604052809291908181526020018280548015611b3357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b15575b5050505050905090565b600b54601254600091610dbc91612bc2565b6015546000908103611b6357506000919050565b60005b601554811015611c1a5760158181548110611b8357611b83612bd5565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03858116600483015290911690636d8ea5b490602401602060405180830381865afa158015611bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfa9190612cf8565b15611c085750600192915050565b80611c1281612beb565b915050611b66565b50600092915050565b6000805b601554811015611c1a5760158181548110611c4457611c44612bd5565b600091825260209091200154604051631b63a96d60e21b81526001600160a01b03858116600483015290911690636d8ea5b490602401602060405180830381865afa158015611c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbb9190612cf8565b15611cef5760158181548110611cd357611cd3612bd5565b6000918252602090912001546001600160a01b03169392505050565b80611cf981612beb565b915050611c27565b611d096124d4565b80805b8015611e6957600019016000848483818110611d2a57611d2a612bd5565b9050602002016020810190611d3f91906129c4565b90506000611d4c826126b3565b6015549091508110611d71576040516387ad0f3f60e01b815260040160405180910390fd5b601554600090611d8390600190612c64565b9050808214611dfa5760158181548110611d9f57611d9f612bd5565b600091825260209091200154601580546001600160a01b039092169184908110611dcb57611dcb612bd5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6015805480611e0b57611e0b612ce2565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038516917f0c1f38a01270cb49fbf915151e8a1908ccf738f8c3d79a1677f8fd879b56bdef91a2505050611d0c565b50505050565b611e776124d4565b6001600160a01b038116611e9e57604051636a37fde960e01b815260040160405180910390fd5b600b54601454611eae9190612bc2565b421015611ece576040516326f4231b60e11b815260040160405180910390fd5b601380546001600160a01b0319166001600160a01b038316908117909155426014556040517f34830ecd12aee38e030de8db2aab7662959ba614a8af53e095041d13deced11d90600090a250565b611f246124d4565b601554600a11611f4757604051630ef0d4a960e11b815260040160405180910390fd5b611f5081612501565b15611f6e57604051633b461ab760e01b815260040160405180910390fd5b6015805460018101825560009182527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750180546001600160a01b0319166001600160a01b03841690811790915560405190917f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9291a250565b611fee6124d4565b600a54601154611ffe9190612bc2565b42101561201e5760405163418ffd5d60e01b815260040160405180910390fd5b8060000361203f5760405163a2ec3a5560e01b815260040160405180910390fd5b600e819055426011556040518181527f388f446e9526fe5c9af20a5919b342370c8a7c0cb05245afe1e545658fa3cdba9060200160405180910390a150565b612086612585565b6000546001600160a01b03163314806120a957506013546001600160a01b031633145b6120c657604051635c427cd960e01b815260040160405180910390fd5b6120ce612561565b6013546040516001600160a01b03909116904790600090839083908381818185875af1925050503d8060008114612121576040519150601f19603f3d011682016040523d82523d6000602084013e612126565b606091505b50509050806121485760405163b12d13eb60e01b815260040160405180910390fd5b826001600160a01b03167f94b2de810873337ed265c5f8cf98c9cffefa06b8607f9a2f1fbaebdfbcfbef1c83604051610cb691815260200190565b6121cb60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b601760008360028111156121e1576121e16129ed565b60028111156121f2576121f26129ed565b815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b61226b6124d4565b6001600160a01b03811661229a57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6110518161271a565b6122ab6124d4565b600b546012546122bb9190612bc2565b4210156122db576040516376fd201760e01b815260040160405180910390fd5b6007548211806122ec575060075481115b1561230a5760405163530da5b960e01b815260040160405180910390fd5b600882905560098190554260125560408051838152602081018390527f4f672c50736ba0fe8a4825ecfde8bcd931727422a77ac89af44fccce2746e0b3910160405180910390a15050565b6000546001600160a01b031633148061237857506013546001600160a01b031633145b61239557604051635c427cd960e01b815260040160405180910390fd5b601554600a906123a6908390612bc2565b11156123c557604051630ef0d4a960e11b815260040160405180910390fd5b601554156123e657604051630397a11d60e41b815260040160405180910390fd5b60005b8181101561094c5761240683838381811061086457610864612bd5565b6124c257601583838381811061241e5761241e612bd5565b905060200201602081019061243391906129c4565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905582828281811061247757612477612bd5565b905060200201602081019061248c91906129c4565b6001600160a01b03167f6ceaa522e49a50257b61147d8087ceb07e0921738699c728fa2d83b5eff6fd9260405160405180910390a25b806124cc81612beb565b9150506123e9565b6000546001600160a01b03163314610b375760405163118cdaa760e01b8152336004820152602401612291565b6000805b601554811015611c1a57826001600160a01b03166015828154811061252c5761252c612bd5565b6000918252602090912001546001600160a01b03160361254f5750600192915050565b8061255981612beb565b915050612505565b60025460ff1615610b375760405163d93c066560e01b815260040160405180910390fd5b6002600154036125a857604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b038481166024830152838116604483015260648201839052611e699186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506127a7565b60008183106126255781612627565b825b90505b92915050565b6040516001600160a01b0383811660248301526044820183905261094c91859182169063a9059cbb906064016125e4565b61266961280a565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000805b60155481101561271057826001600160a01b0316601582815481106126de576126de612bd5565b6000918252602090912001546001600160a01b0316036126fe5792915050565b8061270881612beb565b9150506126b7565b5050601554919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612772612561565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126963390565b60006127bc6001600160a01b0384168361282d565b905080516000141580156127e15750808060200190518101906127df9190612cf8565b155b1561094c57604051635274afe760e01b81526001600160a01b0384166004820152602401612291565b60025460ff16610b3757604051638dfc202b60e01b815260040160405180910390fd5b60606126278383600084600080856001600160a01b031684866040516128539190612d1a565b60006040518083038185875af1925050503d8060008114612890576040519150601f19603f3d011682016040523d82523d6000602084013e612895565b606091505b50915091506128a58683836128b1565b925050505b9392505050565b6060826128c6576128c18261290d565b6128aa565b81511580156128dd57506001600160a01b0384163b155b1561290657604051639996b31560e01b81526001600160a01b0385166004820152602401612291565b50806128aa565b80511561291d5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000806020838503121561294957600080fd5b823567ffffffffffffffff8082111561296157600080fd5b818501915085601f83011261297557600080fd5b81358181111561298457600080fd5b8660208260051b850101111561299957600080fd5b60209290920196919550909350505050565b6000602082840312156129bd57600080fd5b5035919050565b6000602082840312156129d657600080fd5b81356001600160a01b03811681146128aa57600080fd5b634e487b7160e01b600052602160045260246000fd5b60038110612a2157634e487b7160e01b600052602160045260246000fd5b9052565b600060c082019050612a38828451612a03565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b803560038110612a7f57600080fd5b919050565b600080828403610120811215612a9957600080fd5b612aa284612a70565b9250610100601f1982011215612ab757600080fd5b506020830190509250929050565b60008060408385031215612ad857600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015612b285783516001600160a01b031683529284019291840191600101612b03565b50909695505050505050565b600060208284031215612b4657600080fd5b61262782612a70565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b610100810161262a8284612b4f565b634e487b7160e01b600052601160045260246000fd5b8082018082111561262a5761262a612bac565b634e487b7160e01b600052603260045260246000fd5b600060018201612bfd57612bfd612bac565b5060010190565b6020810161262a8284612a03565b600060208284031215612c2457600080fd5b5051919050565b808202811582820484141761262a5761262a612bac565b600082612c5f57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561262a5761262a612bac565b6102008101612c868285612b4f565b8254610100830152600183015461012083015260028301546101408301526003830154610160830152600483015461018083015260058301546101a083015260068301546101c083015260078301546101e08301529392505050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215612d0a57600080fd5b815180151581146128aa57600080fd5b6000825160005b81811015612d3b5760208186018101518583015201612d21565b50600092019182525091905056fea264697066735822122094ef19b9d06c85f91e71633d6ee9324977c37787a50bf9700831ec3c4cc047e464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "DevAddressUpdated(address)": {
        "params": {
          "newDevAddress": "The new developer address"
        }
      },
      "ETHWithdrawn(address,uint256)": {
        "params": {
          "amount": "Amount of ETH withdrawn",
          "to": "Address receiving the ETH"
        }
      },
      "ExchangeRateUpdated(uint256)": {
        "params": {
          "newRate": "New exchange rate"
        }
      },
      "FeeConfigUpdated(uint256,uint256)": {
        "params": {
          "appChangeCooldown": "New app change cooldown",
          "rateChangeCooldown": "New rate change cooldown"
        }
      },
      "FeeRatesUpdated(uint256,uint256)": {
        "params": {
          "newBuyFeeBPS": "New buy fee rate in basis points",
          "newSellFeeBPS": "New sell fee rate in basis points"
        }
      },
      "FeesWithdrawn(address,uint256,uint256)": {
        "params": {
          "baseTokenFees": "Amount of base token fees withdrawn",
          "swapTokenFees": "Amount of swap token fees withdrawn",
          "to": "Address receiving the fees"
        }
      },
      "Lit(address,uint256,uint256)": {
        "params": {
          "burnAmount": "Amount of tokens burned",
          "newFuel": "New fuel level",
          "user": "User address"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "StageConfigUpdated(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "newConfig": "New configuration",
          "oldConfig": "Previous configuration",
          "stage": "The stage being updated"
        }
      },
      "StageConstantsUpdated(string,uint256)": {
        "params": {
          "parameter": "The name of the updated parameter",
          "value": "The new value"
        }
      },
      "StageUpgraded(address,uint8)": {
        "params": {
          "newStage": "New stage of the user",
          "user": "User address"
        }
      },
      "TokensPurchased(address,uint256,uint256,uint256)": {
        "params": {
          "baseTokenAmount": "Amount of base tokens used",
          "buyer": "Address of the buyer",
          "fee": "Fee taken in base tokens",
          "swapTokenAmount": "Amount of swap tokens received"
        }
      },
      "TokensSold(address,uint256,uint256,uint256)": {
        "params": {
          "baseTokenAmount": "Amount of base tokens received",
          "fee": "Fee taken in swap tokens",
          "seller": "Address of the seller",
          "swapTokenAmount": "Amount of swap tokens sold"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "WhitelistedCollectionAdded(address)": {
        "params": {
          "collectionAddress": "Address of the added collection"
        }
      },
      "WhitelistedCollectionRemoved(address)": {
        "params": {
          "collectionAddress": "Address of the removed collection"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addWhitelistedCollection(address)": {
        "params": {
          "collectionAddress": "Address of collection to whitelist"
        }
      },
      "buyTokens(uint256)": {
        "params": {
          "amount": "Amount of base token to use for purchase"
        }
      },
      "canChangeExchangeRate()": {
        "returns": {
          "_0": "bool Whether exchange rate can be changed"
        }
      },
      "canChangeFeeRates()": {
        "returns": {
          "_0": "bool Whether fee rates can be changed"
        }
      },
      "getExchangeRate()": {
        "returns": {
          "_0": "_exchangeRate The exchange rate"
        }
      },
      "getFeeConfig()": {
        "returns": {
          "_feeConfig": "The fee configuration"
        }
      },
      "getFirstValidCollection(address)": {
        "params": {
          "user": "Address to check"
        },
        "returns": {
          "_0": "address First valid collection address"
        }
      },
      "getStageConfig(uint8)": {
        "params": {
          "_stage": "The stage to get configuration for"
        },
        "returns": {
          "_stageConfig": "The stage configuration"
        }
      },
      "getStageConstants()": {
        "returns": {
          "_stageConstants": "The stage constants"
        }
      },
      "getSystemState()": {
        "returns": {
          "_systemState": "The system state"
        }
      },
      "getTokenConfig()": {
        "returns": {
          "_tokenConfig": "The token configuration"
        }
      },
      "getUserState(address)": {
        "params": {
          "user": "The user address"
        },
        "returns": {
          "_userState": "The user state"
        }
      },
      "getWhitelistedCollections()": {
        "returns": {
          "_0": "address[] Array of whitelisted collection addresses"
        }
      },
      "hasValidKey(address)": {
        "params": {
          "user": "Address to check"
        },
        "returns": {
          "_0": "bool Whether user has a valid key"
        }
      },
      "initializeWhitelistedCollections(address[])": {
        "params": {
          "collections": "Array of collection addresses to whitelist"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeWhitelistedCollection(address)": {
        "params": {
          "collectionAddress": "Address of collection to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sellTokens(uint256)": {
        "params": {
          "amount": "Amount of swap token to sell"
        }
      },
      "setCooldownConfig(uint256,uint256)": {
        "params": {
          "_appChangeCooldown": "Cooldown for changing app settings",
          "_rateChangeCooldown": "Cooldown for changing exchange rate"
        }
      },
      "setDevAddress(address)": {
        "params": {
          "newDevAddress": "New developer address"
        }
      },
      "setExchangeRate(uint256)": {
        "params": {
          "newRate": "New exchange rate"
        }
      },
      "setFeeRates(uint256,uint256)": {
        "params": {
          "newBuyFeeBPS": "New buy fee in basis points",
          "newSellFeeBPS": "New sell fee in basis points"
        }
      },
      "setStageConfig(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "_config": "New configuration for the stage",
          "_stage": "The stage to update"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawETH()": {
        "details": "Withdraw ETH from the contract (only admin)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DevAddressUpdated(address)": {
        "notice": "Emitted when the developer address is updated"
      },
      "ETHWithdrawn(address,uint256)": {
        "notice": "Emitted when ETH is withdrawn"
      },
      "ExchangeRateUpdated(uint256)": {
        "notice": "Emitted when exchange rate is updated"
      },
      "FeeConfigUpdated(uint256,uint256)": {
        "notice": "Emitted when fee configuration cooldowns are updated"
      },
      "FeeRatesUpdated(uint256,uint256)": {
        "notice": "Emitted when fee rates are updated"
      },
      "FeesWithdrawn(address,uint256,uint256)": {
        "notice": "Emitted when fees are withdrawn"
      },
      "Lit(address,uint256,uint256)": {
        "notice": "Emitted when a user uses the light up feature"
      },
      "StageConfigUpdated(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Emitted when stage configuration is updated"
      },
      "StageConstantsUpdated(string,uint256)": {
        "notice": "Emitted when stage constants are updated"
      },
      "StageUpgraded(address,uint8)": {
        "notice": "Emitted when a user upgrades to a new stage"
      },
      "TokensPurchased(address,uint256,uint256,uint256)": {
        "notice": "Emitted when tokens are purchased"
      },
      "TokensSold(address,uint256,uint256,uint256)": {
        "notice": "Emitted when tokens are sold"
      },
      "WhitelistedCollectionAdded(address)": {
        "notice": "Emitted when a collection is added to whitelist"
      },
      "WhitelistedCollectionRemoved(address)": {
        "notice": "Emitted when a collection is removed from whitelist"
      }
    },
    "kind": "user",
    "methods": {
      "addWhitelistedCollection(address)": {
        "notice": "Add a new whitelisted collection"
      },
      "buyTokens(uint256)": {
        "notice": "Buy tokens using base token"
      },
      "canChangeExchangeRate()": {
        "notice": "Check if exchange rate can be changed"
      },
      "canChangeFeeRates()": {
        "notice": "Check if fee rates can be changed"
      },
      "getExchangeRate()": {
        "notice": "Get exchange rate"
      },
      "getFeeConfig()": {
        "notice": "Get fee configuration"
      },
      "getFirstValidCollection(address)": {
        "notice": "Get the whitelisted collection for the first valid key a user has"
      },
      "getStageConfig(uint8)": {
        "notice": "Get stage configuration"
      },
      "getStageConstants()": {
        "notice": "Get stage constants"
      },
      "getSystemState()": {
        "notice": "Get system state"
      },
      "getTokenConfig()": {
        "notice": "Get token configuration"
      },
      "getUserState(address)": {
        "notice": "Get user state"
      },
      "getWhitelistedCollections()": {
        "notice": "Get all whitelisted collections"
      },
      "hasValidKey(address)": {
        "notice": "Check if user has a valid NFT key"
      },
      "initializeWhitelistedCollections(address[])": {
        "notice": "Initialize the whitelisted collections "
      },
      "lightUp()": {
        "notice": "Increase user's fuel by burning tokens"
      },
      "removeWhitelistedCollection(address)": {
        "notice": "Remove a whitelisted collection"
      },
      "sellTokens(uint256)": {
        "notice": "Sell tokens to receive base token"
      },
      "setCooldownConfig(uint256,uint256)": {
        "notice": "Updates the fee configuration"
      },
      "setDevAddress(address)": {
        "notice": "Set new developer address"
      },
      "setExchangeRate(uint256)": {
        "notice": "Set new exchange rate"
      },
      "setFeeRates(uint256,uint256)": {
        "notice": "Set new fee rates"
      },
      "setStageConfig(uint8,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Update stage configuration"
      },
      "upgradeStage()": {
        "notice": "Upgrade user to next stage when requirements are met"
      },
      "withdrawFees()": {
        "notice": "Withdraw accumulated fees"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2429,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2310,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4061,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "stageConstants",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(StageConstants)6112_storage"
      },
      {
        "astId": 4064,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "feeConfig",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(FeeConfig)6139_storage"
      },
      {
        "astId": 4067,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "tokenConfig",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(TokenConfig)6149_storage"
      },
      {
        "astId": 4070,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "systemState",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(SystemState)6163_storage"
      },
      {
        "astId": 4073,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "whitelistedCollections",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4078,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "userStates",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_struct(UserState)6127_storage)"
      },
      {
        "astId": 4084,
        "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
        "label": "stageConfig",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_enum(UserStage)6084,t_struct(StageConfig)6102_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)394": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(UserStage)6084": {
        "encoding": "inplace",
        "label": "enum IDGTokenVendor.UserStage",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserState)6127_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDGTokenVendor.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)6127_storage"
      },
      "t_mapping(t_enum(UserStage)6084,t_struct(StageConfig)6102_storage)": {
        "encoding": "mapping",
        "key": "t_enum(UserStage)6084",
        "label": "mapping(enum IDGTokenVendor.UserStage => struct IDGTokenVendor.StageConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(StageConfig)6102_storage"
      },
      "t_struct(FeeConfig)6139_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.FeeConfig",
        "members": [
          {
            "astId": 6130,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "maxFeeBps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6132,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "buyFeeBps",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6134,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "sellFeeBps",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6136,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "rateChangeCooldown",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6138,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "appChangeCooldown",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(StageConfig)6102_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.StageConfig",
        "members": [
          {
            "astId": 6087,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "burnAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6089,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "upgradePointsThreshold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6091,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "upgradeFuelThreshold",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6093,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "fuelRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6095,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "pointsAwarded",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6097,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "qualifyingBuyThreshold",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6099,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "maxSellBps",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6101,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "dailyLimitMultiplier",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(StageConstants)6112_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.StageConstants",
        "members": [
          {
            "astId": 6105,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "maxSellCooldown",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6107,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "dailyWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6109,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "minBuyAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6111,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "minSellAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SystemState)6163_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.SystemState",
        "members": [
          {
            "astId": 6152,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "baseTokenFees",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6154,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "swapTokenFees",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6156,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "lastRateChangeTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6158,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "lastFeeChangeTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6160,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "devAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 6162,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "lastDevAddressChangeTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TokenConfig)6149_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.TokenConfig",
        "members": [
          {
            "astId": 6143,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "baseToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)394"
          },
          {
            "astId": 6146,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "swapToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)394"
          },
          {
            "astId": 6148,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "exchangeRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserState)6127_storage": {
        "encoding": "inplace",
        "label": "struct IDGTokenVendor.UserState",
        "members": [
          {
            "astId": 6116,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "stage",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(UserStage)6084"
          },
          {
            "astId": 6118,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "points",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6120,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "fuel",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6122,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "lastStage3MaxSale",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6124,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "dailySoldAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6126,
            "contract": "contracts/DGTokenVendor.sol:DGTokenVendor",
            "label": "dailyWindowStart",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}